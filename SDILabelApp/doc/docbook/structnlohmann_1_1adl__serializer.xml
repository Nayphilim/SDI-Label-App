<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1adl__serializer">
<title>nlohmann::adl_serializer&lt; typename, typename &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::adl_serializer&lt; typename, typename &gt;</primary></indexterm>
<para>

<para>default JSONSerializer template argument </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename BasicJsonType , typename ValueType &gt; </para><para>static auto <link linkend="_structnlohmann_1_1adl__serializer_1a2c544585b8b1828a0f1eecd831d0496e">from_json</link> (BasicJsonType &amp;&amp;j, ValueType &amp;val) noexcept(noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val))) -&gt; decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val), void())</para>

<para>convert a JSON value to any value type </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename ValueType &gt; </para><para>static auto <link linkend="_structnlohmann_1_1adl__serializer_1a01b867bd5dce5249d4f7433b8f27def6">to_json</link> (BasicJsonType &amp;j, ValueType &amp;&amp;val) noexcept(noexcept(::nlohmann::to_json(j, std::forward&lt; ValueType &gt;(val)))) -&gt; decltype(::nlohmann::to_json(j, std::forward&lt; ValueType &gt;(val)), void())</para>

<para>convert any value type to a JSON value </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename, typename&gt;
struct nlohmann::adl_serializer&lt; typename, typename &gt;</title></simplesect>


<para>default JSONSerializer template argument </para>



<para>This serializer ignores the template arguments and uses ADL (<link xlink:href="https://en.cppreference.com/w/cpp/language/adl">argument-dependent lookup</link>) for serialization. </para>
<para>
Definition at line 2726 of file json.hpp.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_structnlohmann_1_1adl__serializer_1a2c544585b8b1828a0f1eecd831d0496e"/>    <section>
    <title>from_json()</title>
<indexterm><primary>from_json</primary><secondary>nlohmann::adl_serializer&lt; typename, typename &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::adl_serializer&lt; typename, typename &gt;</primary><secondary>from_json</secondary></indexterm>
<computeroutput>template&lt;typename , typename &gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename ValueType &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer</link>&lt; typename, typename &gt;::from_json (BasicJsonType &amp;&amp; j, ValueType &amp; val) -&gt; decltype(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j), val), void())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>convert a JSON value to any value type </para>
</para>

<para>This function is usually called by the <computeroutput><link linkend="_namespacenlohmann_1_1detail_1acc422c11342b31368f610b6f96fcedc6">get()</link></computeroutput> function of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class (either explicit or via conversion operators).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to read from </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>val</entry>
                                <entry>
<para>value to write to </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 4168 of file json.hpp.</para>
    </section><anchor xml:id="_structnlohmann_1_1adl__serializer_1a01b867bd5dce5249d4f7433b8f27def6"/>    <section>
    <title>to_json()</title>
<indexterm><primary>to_json</primary><secondary>nlohmann::adl_serializer&lt; typename, typename &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::adl_serializer&lt; typename, typename &gt;</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename , typename &gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename ValueType &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer</link>&lt; typename, typename &gt;::to_json (BasicJsonType &amp; j, ValueType &amp;&amp; val) -&gt; decltype(::nlohmann::to_json(j, std::forward&lt;ValueType&gt;(val)), void())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>convert any value type to a JSON value </para>
</para>

<para>This function is usually called by the constructors of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to write to </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>value to read from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 4185 of file json.hpp.</para>
</section>
</section>
</section>
