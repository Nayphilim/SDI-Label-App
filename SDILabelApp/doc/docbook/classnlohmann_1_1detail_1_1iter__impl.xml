<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1iter__impl">
<title>nlohmann::detail::iter_impl&lt; BasicJsonType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary></indexterm>
<para>

<para>a template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106">iterator_category</link> = std::bidirectional_iterator_tag</para>

<para>The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67">value_type</link> = typename BasicJsonType::value_type</para>

<para>the type of the values when the iterator is dereferenced </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> = typename BasicJsonType::difference_type</para>

<para>a type to represent differences between iterators </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> = typename std::conditional&lt; std::is_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>, typename BasicJsonType::const_pointer, typename BasicJsonType::pointer &gt;::type</para>

<para>defines a pointer to the type iterated over (value_type) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> = typename std::conditional&lt; std::is_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>, typename BasicJsonType::const_reference, typename BasicJsonType::reference &gt;::type</para>

<para>defines a reference to the type iterated over (value_type) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a19aa457f9c4af1b7e3af59839132cc5c">iter_impl</link> ()=default</para>

<para>default constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a88a00484ac201c52fc5f613d88a2918b">iter_impl</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> object) noexcept</para>

<para>constructor for a given JSON instance </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a71f84fb6e009619f12972bcf9002b8cd">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp;other) noexcept</para>

<para>const copy constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a9a5cd7864a8f848ef107d3f5a330f5e7">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp;other) noexcept</para>

<para>converting assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a867f7eb55091be31b013adb3e46816d3">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; &amp;other) noexcept</para>

<para>converting constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a7159ed1cfe7c423a2baef8bea0c94509">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; &amp;other) noexcept</para>

<para>converting assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827">operator*</link> () const</para>

<para>return a reference to the value pointed to by the iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a6da3d2b34528aff328f3dcb513076dec">operator-&gt;</link> () const</para>

<para>dereference the iterator </para>
</listitem>
            <listitem><para>const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a60f3b0a96cc0bff9a7e6ab84ca538a45">operator++</link> (int)</para>

<para>post-increment (it++) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abdfe2a7f464400a7ab572782d14b922f">operator++</link> ()</para>

<para>pre-increment (++it) </para>
</listitem>
            <listitem><para>const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1af91fb0bb9b2a2e96af030564ded2d92c">operator--</link> (int)</para>

<para>post-decrement (it&#8211;) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a84e689fb581d651d130039f7cb81494a">operator--</link> ()</para>

<para>pre-decrement (&#8211;it) </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2b592605b63ae7f5401996ffa3b14393">operator==</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aeab0e2b5da70b3bdebecd5b1a6ee66a6">operator!=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7">operator&lt;</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: smaller </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad">operator&lt;=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aaf3620b8dfa4bed8a9ac2b51dd55dbd7">operator&gt;</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a">operator&gt;=</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a3eef94f9d167046e7f773aeb6b78090c">operator+=</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)</para>

<para>add to iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abcc9d51bc52f2e8483bbe4018f05e978">operator-=</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)</para>

<para>subtract from iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8ef76aeb5a5032768f0f61f48ac189c0">operator+</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const</para>

<para>add to iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a0dd9c415b94a02ff2aa25da75e52da30">operator-</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const</para>

<para>subtract from iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a49bf3e708a9c1c88c415011735962d06">operator-</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;other) const</para>

<para>return difference </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac0b9276f1102ed4b9cd3f5f56287e3ce">operator[]</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> n) const</para>

<para>access to successor </para>
</listitem>
            <listitem><para>const object_t::key_type &amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc">key</link> () const</para>

<para>return the key of an object iterator </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link> () const</para>

<para>return the value of an iterator </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab9a9598052e83fa14a2288e56d5dda7c">object_t</link> = typename BasicJsonType::object_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aef02cf75b1cb199286fd2f666c60e38e">array_t</link> = typename BasicJsonType::array_t</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5d5f92c7f6848814bc82cf7e4e541820">set_begin</link> () noexcept</para>

<para>set the iterator to the first value </para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee">set_end</link> () noexcept</para>

<para>set the iterator past the last value </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link></para>
</listitem>
            <listitem><para>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a28328d17a18d9754c89c5c8159677a6f">iteration_proxy&lt; iter_impl &gt;</link></para>
</listitem>
            <listitem><para>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ac501dc2374b4d17a884fc9a656e80d5a">iteration_proxy_value&lt; iter_impl &gt;</link></para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aca84f84be598bdfaaddd23d928c42bbb">m_object</link> = nullptr</para>

<para>associated JSON instance </para>
</listitem>
            <listitem><para><link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link>&lt; typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa">m_it</link> {}</para>

<para>the actual iterator of the associated instance </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a94108d1a7563e103534f23eb5c1ee175">operator+</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i, const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &amp;it)</para>

<para>addition of distance and iterator </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BasicJsonType&gt;
class nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</title></simplesect>


<para>a template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. </para>



<para><note><title>Note</title>

<para>An iterator is called <emphasis>initialized</emphasis> when a pointer to a JSON value has been set (e.g., by a constructor or a copy assignment). If the iterator is default-constructed, it is <emphasis>uninitialized</emphasis> and most methods are undefined. The library uses assertions to detect calls on uninitialized iterators.** @requirement The class satisfies the following concept requirements:<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator">BidirectionalIterator</link>: The iterator that can be moved can be moved in both directions (i.e. incremented and decremented). </para>
</listitem></itemizedlist>
</para>
</note>
<formalpara><title>Since</title>

<para>version 1.0.0, simplified in version 2.0.9, change to bidirectional iterators in version 3.0.0 (see <link xlink:href="https://github.com/nlohmann/json/issues/593">https://github.com/nlohmann/json/issues/593</link>) </para>
</formalpara>
</para>
<para>
Definition at line 10081 of file json.hpp.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aef02cf75b1cb199286fd2f666c60e38e"/>    <section>
    <title>array_t</title>
<indexterm><primary>array_t</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>array_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1aef02cf75b1cb199286fd2f666c60e38e">array_t</link> =  typename BasicJsonType::array_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 10090 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840"/>    <section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> =  typename BasicJsonType::difference_type</computeroutput></para><para>

<para>a type to represent differences between iterators </para>
</para>
<para>
Definition at line 10107 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106"/>    <section>
    <title>iterator_category</title>
<indexterm><primary>iterator_category</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ad9e091f5c70b34b5b1abc1ab15fd9106">iterator_category</link> =  std::bidirectional_iterator_tag</computeroutput></para><para>

<para>The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. </para>
</para>

<para>The C++ Standard has never required user-defined iterators to derive from std::iterator. A user-defined iterator should provide publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. </para>
<para>
Definition at line 10102 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ab9a9598052e83fa14a2288e56d5dda7c"/>    <section>
    <title>object_t</title>
<indexterm><primary>object_t</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>object_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab9a9598052e83fa14a2288e56d5dda7c">object_t</link> =  typename BasicJsonType::object_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 10089 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360"/>    <section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> =  typename std::conditional&lt;std::is_const&lt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link>&gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>, typename BasicJsonType::const_pointer, typename BasicJsonType::pointer&gt;::type</computeroutput></para><para>

<para>defines a pointer to the type iterated over (value_type) </para>
</para>
<para>
Definition at line 10111 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce"/>    <section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> =  typename std::conditional&lt;std::is_const&lt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link>&gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>, typename BasicJsonType::const_reference, typename BasicJsonType::reference&gt;::type</computeroutput></para><para>

<para>defines a reference to the type iterated over (value_type) </para>
</para>
<para>
Definition at line 10116 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67"/>    <section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab35586a44f2222272c5346baa3013f67">value_type</link> =  typename BasicJsonType::value_type</computeroutput></para><para>

<para>the type of the values when the iterator is dereferenced </para>
</para>
<para>
Definition at line 10105 of file json.hpp.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a19aa457f9c4af1b7e3af59839132cc5c"/>    <section>
    <title>iter_impl()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::conditional&lt; std::is_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">value</link>, typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type, const <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; ( )<computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>default constructor </para>
</para>

<para>allow <link linkend="_classnlohmann_1_1basic__json">basic_json</link> to access private members </para>
<para>
Definition at line 10084 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a88a00484ac201c52fc5f613d88a2918b"/>    <section>
    <title>iter_impl()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> object)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>constructor for a given JSON instance </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>object</entry>
                                <entry>
<para>pointer to a JSON object for this iterator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>object != nullptr </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10127 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a71f84fb6e009619f12972bcf9002b8cd"/>    <section>
    <title>iter_impl()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>const copy constructor </para>
</para>

<para><note><title>Note</title>

<para>The conventional copy constructor and copy assignment are implicitly defined. Combined with the following converting constructor and assignment, they support: (1) copy from iterator to iterator, (2) copy from const iterator to const iterator, and (3) conversion from iterator to const iterator. However conversion from const iterator to iterator is not defined.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This copy constructor had to be defined explicitly to circumvent a bug occurring on msvc v19.0 compiler (VS 2015) debug build. For more information refer to: <link xlink:href="https://github.com/nlohmann/json/issues/1608">https://github.com/nlohmann/json/issues/1608</link> </para>
</note>
</para>
<para>
Definition at line 10169 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a867f7eb55091be31b013adb3e46816d3"/>    <section>
    <title>iter_impl()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting constructor </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>non-const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
<para>
Definition at line 10191 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc"/>    <section>
    <title>key()</title>
<indexterm><primary>key</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>key</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const object_t::key_type&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::key ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return the key of an object iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10651 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aeab0e2b5da70b3bdebecd5b1a6ee66a6"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator!= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10465 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a5ca57856d9bba54a5fc51cee891de827"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return a reference to the value pointed to by the iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10281 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a8ef76aeb5a5032768f0f61f48ac189c0"/>    <section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator+ (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add to iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10566 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1abdfe2a7f464400a7ab572782d14b922f"/>    <section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>pre-increment (++it) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10363 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a60f3b0a96cc0bff9a7e6ab84ca538a45"/>    <section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>post-increment (it++) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10352 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a3eef94f9d167046e7f773aeb6b78090c"/>    <section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator+= (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add to iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10528 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a49bf3e708a9c1c88c415011735962d06"/>    <section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator- (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return difference </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10599 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a0dd9c415b94a02ff2aa25da75e52da30"/>    <section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator- (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>subtract from iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10588 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a84e689fb581d651d130039f7cb81494a"/>    <section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>pre-decrement (&#8211;it) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10406 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1af91fb0bb9b2a2e96af030564ded2d92c"/>    <section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>post-decrement (it&#8211;) </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10395 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1abcc9d51bc52f2e8483bbe4018f05e978"/>    <section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator-= (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>subtract from iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10557 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a6da3d2b34528aff328f3dcb513076dec"/>    <section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>dereference the iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10318 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a0d14cd76203e00bdcef6a64a5d055cc7"/>    <section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator&lt; (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: smaller </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10474 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ac6f71b36d7c87e427d1fee83f2600fad"/>    <section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator&lt;= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10501 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a9a5cd7864a8f848ef107d3f5a330f5e7"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting assignment </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const/non-const iterator </para>
</formalpara>
<note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
<para>
Definition at line 10179 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a7159ed1cfe7c423a2baef8bea0c94509"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; typename std::remove_const&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::type &gt; &amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>converting assignment </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>non-const iterator to copy from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const/non-const iterator </para>
</formalpara>
<note><title>Note</title>

<para>It is not checked whether <emphasis>other</emphasis> is initialized. </para>
</note>
</para>
<para>
Definition at line 10201 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a2b592605b63ae7f5401996ffa3b14393"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator== (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10438 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aaf3620b8dfa4bed8a9ac2b51dd55dbd7"/>    <section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator&gt; (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10510 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a"/>    <section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>bool <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator&gt;= (const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10519 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ac0b9276f1102ed4b9cd3f5f56287e3ce"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::operator[] (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> n) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access to successor </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10620 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a5d5f92c7f6848814bc82cf7e4e541820"/>    <section>
    <title>set_begin()</title>
<indexterm><primary>set_begin</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>set_begin</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::set_begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>set the iterator to the first value </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10213 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee"/>    <section>
    <title>set_end()</title>
<indexterm><primary>set_end</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>set_end</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::set_end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>set the iterator past the last value </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10250 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c"/>    <section>
    <title>value()</title>
<indexterm><primary>value</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a5be8001be099c6b82310f4d387b953ce">reference</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::value ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return the value of an iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10667 of file json.hpp.</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a94108d1a7563e103534f23eb5c1ee175"/>    <section>
    <title>operator+</title>
<indexterm><primary>operator+</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> operator+ (<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840">difference_type</link> i, const <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt; &amp; it)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>addition of distance and iterator </para>
</para>

<para><formalpara><title>Precondition</title>

<para>The iterator is initialized; i.e. <computeroutput>m_object != nullptr</computeroutput>. </para>
</formalpara>
</para>
<para>
Definition at line 10577 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a"/>    <section>
    <title>BasicJsonType</title>
<indexterm><primary>BasicJsonType</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>BasicJsonType</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;::BasicJsonType<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 10085 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a28328d17a18d9754c89c5c8159677a6f"/>    <section>
    <title>iteration_proxy&lt; iter_impl &gt;</title>
<indexterm><primary>iteration_proxy&lt; iter_impl &gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iteration_proxy&lt; iter_impl &gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy">iteration_proxy</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 10086 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1ac501dc2374b4d17a884fc9a656e80d5a"/>    <section>
    <title>iteration_proxy_value&lt; iter_impl &gt;</title>
<indexterm><primary>iteration_proxy_value&lt; iter_impl &gt;</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>iteration_proxy_value&lt; iter_impl &gt;</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy__value">iteration_proxy_value</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link> &gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 10087 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa"/>    <section>
    <title>m_it</title>
<indexterm><primary>m_it</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>m_it</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link>&lt;typename std::remove_const&lt;<link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link>&gt;::type&gt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::m_it {}<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the actual iterator of the associated instance </para>
</para>
<para>
Definition at line 10676 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1iter__impl_1aca84f84be598bdfaaddd23d928c42bbb"/>    <section>
    <title>m_object</title>
<indexterm><primary>m_object</primary><secondary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</primary><secondary>m_object</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a69e52f890ce8c556fd68ce109e24b360">pointer</link> <link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1abf18f18793f84b0222aebb5a2a87da7a">BasicJsonType</link> &gt;::m_object = nullptr<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>associated JSON instance </para>
</para>
<para>
Definition at line 10674 of file json.hpp.</para>
</section>
</section>
</section>
