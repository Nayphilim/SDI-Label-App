<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26">
<title>nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr bool <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184">value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BasicJsonType, typename ConstructibleArrayType&gt;
struct nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</title></simplesect>

<para>
Definition at line 3054 of file json.hpp.</para>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184"/>    <section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename ConstructibleArrayType &gt; </computeroutput><para><computeroutput>constexpr bool <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">nlohmann::detail::is_constructible_array_type_impl</link>&lt; BasicJsonType, ConstructibleArrayType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link>, ConstructibleArrayType &gt;::value andis_detected&lt; <link linkend="_namespacenlohmann_1_1detail_1a9ff93db146174305bce1bc4c54703e11">iterator_t</link>, ConstructibleArrayType &gt;::value andis_complete_type&lt; <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link>, ConstructibleArrayType &gt; &gt;::value &gt; &gt;::value<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;not&#32;is_iterator_traits&lt;iterator_traits&lt;ConstructibleArrayType&gt;&gt;<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184">::value</link>&#32;and

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::is_same&lt;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType::value_type,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;BasicJsonType::array_t::value_type&gt;::<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184">value</link>&#32;or
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_from_json&lt;BasicJsonType,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType::value_type&gt;::<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184">value</link>&#32;or
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_non_default_from_json&#32;&lt;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BasicJsonType,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConstructibleArrayType::value_type&#32;&gt;::<link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26_1a39e2baa94bee9c7abed5e3cada4bf184">value</link>)
</programlisting><para>
Definition at line 3066 of file json.hpp.</para>
</section>
</section>
</section>
