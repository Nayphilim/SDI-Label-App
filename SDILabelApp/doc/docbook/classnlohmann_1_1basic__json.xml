<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1basic__json">
<title>nlohmann::basic_json Class Reference</title>
<indexterm><primary>nlohmann::basic_json</primary></indexterm>
<para>

<para>a class to store JSON values </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structnlohmann_1_1basic__json_1_1internal__binary__t">internal_binary_t</link></para>

<para>an internal type for a backed binary type </para>
</listitem>
            <listitem><para>union <link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link></para>

<para>a JSON value </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1">value_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> = ::<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>JSON Pointer, see <link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename SFINAE &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer</link> = JSONSerializer&lt; T, SFINAE &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a05b1719e15d24c47f4fce69888967d1e">error_handler_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">detail::error_handler_t</link></para>

<para>how to treat decoding errors </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> = std::initializer_list&lt; <link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;</para>

<para>helper type for initializer lists of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> values </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a6cefa2384f912265e090f7a34c99703d">input_format_t</link> = <link linkend="_namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40">detail::input_format_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1af229d341abc5e2525a8ca4dc247533e1">json_sax_t</link> = <link linkend="_structnlohmann_1_1json__sax">json_sax</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>SAX interface type, see <link linkend="_structnlohmann_1_1json__sax">nlohmann::json_sax</link>. </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a4a4d5958eb47ab75530a3d5c68f6b88f">parse_event_t</link> = typename <link linkend="_classnlohmann_1_1detail_1_1parser_1a37ac88c864dda495f72cb62776b0bebe">parser::parse_event_t</link></para>

<para>parser event types </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> = typename <link linkend="_classnlohmann_1_1detail_1_1parser_1ad250ad4f2b4af4a497e727c963162ff1">parser::parser_callback_t</link></para>

<para>per-element parser callback type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>const <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> char * <link linkend="_classnlohmann_1_1basic__json_1a0fb9647ea72df0a3099cf6dd7e3f53e9">type_name</link> () const noexcept</para>

<para>return the type as string </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link> <link linkend="_classnlohmann_1_1basic__json_1af07877930c21c861d75a34cb32993fd0">get_allocator</link> ()</para>

<para>returns the allocator associated with the container </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a651af45dd9d619a3e7524a95388ddb33">meta</link> ()</para>

<para>returns version information on the library </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> = <link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link></para>

<para>workaround type for MSVC </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ad168ab3cb5b376e851d997143b6ae0ed">lexer</link> = ::<link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1adf6340d9881839847d6b7423c5a85e50">parser</link> = ::<link linkend="_classnlohmann_1_1detail_1_1parser">nlohmann::detail::parser</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1aa30cf01ce3b9e56bb1fc968b742c7f7d">primitive_iterator_t</link> = ::<link linkend="_classnlohmann_1_1detail_1_1primitive__iterator__t">nlohmann::detail::primitive_iterator_t</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1adde2de3a20dd50b61b9509d777bbe434">internal_iterator</link> = ::<link linkend="_structnlohmann_1_1detail_1_1internal__iterator">nlohmann::detail::internal_iterator</link>&lt; BasicJsonType &gt;</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">iter_impl</link> = ::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt; BasicJsonType &gt;</para>
</listitem>
            <listitem><para>template&lt;typename Iterator &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link> = ::<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy">nlohmann::detail::iteration_proxy</link>&lt; Iterator &gt;</para>
</listitem>
            <listitem><para>template&lt;typename Base &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">json_reverse_iterator</link> = ::<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">nlohmann::detail::json_reverse_iterator</link>&lt; Base &gt;</para>
</listitem>
            <listitem><para>template&lt;typename CharType &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1a1d73e1ec6468bb28ba8dbe7d586574cf">output_adapter_t</link> = ::<link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">nlohmann::detail::output_adapter_t</link>&lt; CharType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1adc04ef0052bc11c778d2084b67073b6d">binary_reader</link> = ::<link linkend="_classnlohmann_1_1detail_1_1binary__reader">nlohmann::detail::binary_reader</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>
</listitem>
            <listitem><para>template&lt;typename CharType &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1aa68060aae4c6abde125789021fd737f6">binary_writer</link> = ::<link linkend="_classnlohmann_1_1detail_1_1binary__writer">nlohmann::detail::binary_writer</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, CharType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a4ace22e6a5e43b978768013612e6f0c5">serializer</link> = ::<link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1aebf93a806247231640c785fbc6985d10">assert_invariant</link> () const noexcept</para>

<para>checks the class invariants </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> <link linkend="_classnlohmann_1_1basic__json_1a11bc366554be56ed9832dc25e009acaf">get_impl</link> (<link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> *) const</para>

<para>get a boolean (explicit) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> *) noexcept</para>

<para>get a pointer to the value (object) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> * <link linkend="_classnlohmann_1_1basic__json_1afcaf35277a772216232f82c2ecbe51df">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> *) const noexcept</para>

<para>get a pointer to the value (object) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a5560b65c43ebfa52fd81363f628f0fd6">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> *) noexcept</para>

<para>get a pointer to the value (array) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> * <link linkend="_classnlohmann_1_1basic__json_1ab882c22809696716a55d6572527709fa">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> *) const noexcept</para>

<para>get a pointer to the value (array) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a00601649a4242a528f60b9e0c7b89bd6">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> *) noexcept</para>

<para>get a pointer to the value (string) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a759e15ae107daa9ca50916aeb5070a18">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> *) const noexcept</para>

<para>get a pointer to the value (string) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> * <link linkend="_classnlohmann_1_1basic__json_1aa9fc99ec3a40c1e1ee086d797e2f4eec">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> *) noexcept</para>

<para>get a pointer to the value (boolean) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a7e5c49156b170062c176e520fb6e0002">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> *) const noexcept</para>

<para>get a pointer to the value (boolean) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a0c6ae57643e00da7bf6e4d1c29be6db7">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> *) noexcept</para>

<para>get a pointer to the value (integer number) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> * <link linkend="_classnlohmann_1_1basic__json_1ae48280c854cad4ff1b466310511d4815">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> *) const noexcept</para>

<para>get a pointer to the value (integer number) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a835557fd75998eb3a83254d051498b30">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> *) noexcept</para>

<para>get a pointer to the value (unsigned number) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a4800ba3349c81c61206add73e2b2e434">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> *) const noexcept</para>

<para>get a pointer to the value (unsigned number) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a2fabcdab83c0a3de7fb7d753d75ce2bb">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> *) noexcept</para>

<para>get a pointer to the value (floating-point number) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a135cc1f0f25c4ad2ceed7132fc83d8ce">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> *) const noexcept</para>

<para>get a pointer to the value (floating-point number) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> * <link linkend="_classnlohmann_1_1basic__json_1a1395936ee3b5bf12a44b583ce4c42c9c">get_impl_ptr</link> (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> *) noexcept</para>

<para>get a pointer to the value (binary) </para>
</listitem>
            <listitem><para>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> * <link linkend="_classnlohmann_1_1basic__json_1ab71294705ef1df01447c423aac909cc7">get_impl_ptr</link> (const <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> *) const noexcept</para>

<para>get a pointer to the value (binary) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T , typename... Args&gt; </para><para>static <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> T * <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> (Args &amp;&amp;... args)</para>

<para>helper for exception-safe object creation </para>
</listitem>
            <listitem><para>template&lt;typename ReferenceType , typename ThisType &gt; </para><para>static ReferenceType <link linkend="_classnlohmann_1_1basic__json_1a3999548d7bbac0fdc30960fe38996d2c">get_ref_impl</link> (ThisType &amp;obj)</para>

<para>helper function to implement <link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref()</link> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> <link linkend="_classnlohmann_1_1basic__json_1a5f22d74455ea3e1bb6a8a2c31e6be6be">m_type</link> = <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link></para>

<para>the type of the current element </para>
</listitem>
            <listitem><para><link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> <link linkend="_classnlohmann_1_1basic__json_1a19622cd7064559888959fe0ef3882bea">m_value</link> = {}</para>

<para>the value of the current element </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;detail::value_t &gt; </para><para>struct <link linkend="_classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c">detail::external_constructor</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4">::nlohmann::detail::iter_impl</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CharType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf">::nlohmann::detail::binary_writer</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename SAX &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a3226693341c251507fec5d6f4fa5ce79">::nlohmann::detail::binary_reader</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60">::nlohmann::detail::json_sax_dom_parser</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da">::nlohmann::detail::json_sax_dom_callback_parser</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>exceptions    </title>

<para><anchor xml:id="__1amgrp19ad27801b95bd1f2c6c2bf83dbb7515"/>Classes to implement user-defined exceptions. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> = <link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link></para>

<para>general exception of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> = <link linkend="_classnlohmann_1_1detail_1_1parse__error">detail::parse_error</link></para>

<para>exception indicating a parse error </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">detail::invalid_iterator</link></para>

<para>exception indicating errors with iterators </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> = <link linkend="_classnlohmann_1_1detail_1_1type__error">detail::type_error</link></para>

<para>exception indicating executing a member function with a wrong type </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> = <link linkend="_classnlohmann_1_1detail_1_1out__of__range">detail::out_of_range</link></para>

<para>exception indicating access out of the defined range </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> = <link linkend="_classnlohmann_1_1detail_1_1other__error">detail::other_error</link></para>

<para>exception indicating other library errors </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>container types    </title>

<para><anchor xml:id="__1amgrp6618fa684bc6d5a05e2c88bfff1c0d66"/>The canonic container types to use <link linkend="_classnlohmann_1_1basic__json">basic_json</link> like any other STL container. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">value_type</link> = <link linkend="_classnlohmann_1_1basic__json">basic_json</link></para>

<para>the type of elements in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> = <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">value_type</link> &amp;</para>

<para>the type of an element reference </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> = const <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">value_type</link> &amp;</para>

<para>the type of an element const reference </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a9b7596a400a85e2dd7ab22f62df8a340">difference_type</link> = std::ptrdiff_t</para>

<para>a type to represent differences between iterators </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> = std::size_t</para>

<para>a type to represent container sizes </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link> = AllocatorType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>the allocator type </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb">pointer</link> = typename std::allocator_traits&lt; <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb">pointer</link></para>

<para>the type of an element pointer </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a2c77adc1436dd4c62960d2679e4befee">const_pointer</link> = typename std::allocator_traits&lt; <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1a2c77adc1436dd4c62960d2679e4befee">const_pointer</link></para>

<para>the type of an element const pointer </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> = <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>an iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> = <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>a const iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">reverse_iterator</link> = <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">json_reverse_iterator</link>&lt; typename <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">basic_json::iterator</link> &gt;</para>

<para>a reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> = <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">json_reverse_iterator</link>&lt; typename <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">basic_json::const_iterator</link> &gt;</para>

<para>a const reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON value data types    </title>

<para><anchor xml:id="__1amgrpbddfba6d49869d59bfd397e65b8cba87"/>The data types to store a JSON value.</para>

<para>These types are derived from the template arguments passed to class <link linkend="_classnlohmann_1_1basic__json">basic_json</link>. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1af17b737bac7ddaa05c1b6205b1e025c6">object_comparator_t</link> = std::less&lt; StringType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> = ObjectType&lt; StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, <link linkend="_classnlohmann_1_1basic__json_1af17b737bac7ddaa05c1b6205b1e025c6">object_comparator_t</link>, AllocatorType&lt; std::pair&lt; const StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;&gt;</para>

<para>a type for an object </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> = ArrayType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, AllocatorType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;</para>

<para>a type for an array </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> = StringType</para>

<para>a type for a string </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> = BooleanType</para>

<para>a type for a boolean </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> = NumberIntegerType</para>

<para>a type for a number (integer) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> = NumberUnsignedType</para>

<para>a type for a number (unsigned) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> = NumberFloatType</para>

<para>a type for a number (floating-point) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> = BinaryType</para>

<para>a type for a packed binary type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>constructors and destructors    </title>

<para><anchor xml:id="__1amgrpd94b4d3d0135946bb7bdf25e48755337"/>Constructors of class <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para>
        <itemizedlist>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a92f3b05fee32f8f7a98fd1434086aaf7">binary_array</link> (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> const &amp;init)</para>

<para>explicitly create a binary array from an already constructed copy of its base type </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a53b49467488b240d28fc33e454129d86">binary_array</link> (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> &amp;&amp;init)</para>

<para>explicitly create a binary array from an already constructed rvalue copy of its base type </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init={})</para>

<para>explicitly create an array from an initializer list </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init={})</para>

<para>explicitly create an object from an initializer list </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ad886f4baa2efb7ac6b0ca70dc72f3d18">basic_json</link> (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> v)</para>

<para>create an empty value with a given type </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a9126e2860908bc6aa34da0063863070e">basic_json</link> (std::nullptr_t=nullptr) noexcept</para>

<para>create a null object </para>
</listitem>
            <listitem><para>template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, detail::enable_if_t&lt; not detail::is_basic_json&lt; U &gt;::value and detail::is_compatible_type&lt; basic_json_t, U &gt;::value, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a6365d9b23fd9c554d9fc89121c4df4d0">basic_json</link> (CompatibleType &amp;&amp;val) noexcept(noexcept(JSONSerializer&lt; U &gt;::to_json(std::declval&lt; <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;(), std::forward&lt; CompatibleType &gt;(val))))</para>

<para>create a JSON value </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , detail::enable_if_t&lt; detail::is_basic_json&lt; BasicJsonType &gt;::value and not std::is_same&lt; basic_json, BasicJsonType &gt;::value, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ad0cf7682c00f137bec6a5a680a80dc6e">basic_json</link> (const BasicJsonType &amp;val)</para>

<para>create a JSON value from an existing one </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init, bool type_deduction=true, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> manual_type=<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>)</para>

<para>create a container (array or object) from an initializer list </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aacff7cb1f9097fcb1f8f97d401220ac0">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;val)</para>

<para>construct an array with count copies of given value </para>
</listitem>
            <listitem><para>template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::value or std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a3fb693444043639e08ff7be62410b137">basic_json</link> (InputIT first, InputIT last)</para>

<para>construct a JSON container given an iterator range </para>
</listitem>
            <listitem><para>template&lt;typename JsonRef , detail::enable_if_t&lt; detail::conjunction&lt; detail::is_json_ref&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, basic_json &gt;&gt;::value, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a9b3c3c9ea1a0530f515d5be9ae77022c">basic_json</link> (const JsonRef &amp;ref)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af21eb13ca205fb51e267e6f7ee269229">basic_json</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;other)</para>

<para>copy constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a758a9350d03d6eb90a9cb0bf4653d286">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;other) noexcept</para>

<para>move constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; <link linkend="_classnlohmann_1_1basic__json_1ad839b769b960e8911e720e39de2af4e8">operator=</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> other) noexcept(std::is_nothrow_move_constructible&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_assignable&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_constructible&lt; <link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_assignable&lt; <link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link>)</para>

<para>copy assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a7d35fcb7c72f755a30ae433e58083eca">~basic_json</link> () noexcept</para>

<para>destructor </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>object inspection    </title>

<para><anchor xml:id="__1amgrpbbb01a37b8f261ae5b5799058dcac1a0"/>Functions to inspect the type of a JSON value. </para>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump</link> (const int indent=-1, const char indent_char=&apos; &apos;, const bool ensure_ascii=false, const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler=error_handler_t::strict, const bool serialize_binary=false) const</para>

<para>serialization </para>
</listitem>
            <listitem><para>constexpr <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> () const noexcept</para>

<para>return the type of the JSON value (explicit) </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a422885c85f603a13c36f8d0ac5d9f278">is_primitive</link> () const noexcept</para>

<para>return whether type is primitive </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a5a53e5a09d9123bfeed6f664b1334f8c">is_structured</link> () const noexcept</para>

<para>return whether type is structured </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1afe9a6fe72337a174cfb117a2081d2cfc">is_null</link> () const noexcept</para>

<para>return whether value is null </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a0bd23e6f679145905a78020c07547559">is_boolean</link> () const noexcept</para>

<para>return whether value is a boolean </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number</link> () const noexcept</para>

<para>return whether value is a number </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad">is_number_integer</link> () const noexcept</para>

<para>return whether value is an integer number </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc">is_number_unsigned</link> () const noexcept</para>

<para>return whether value is an unsigned integer number </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044">is_number_float</link> () const noexcept</para>

<para>return whether value is a floating-point number </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1ae3300a95d3bb4a55cb0e04b9f125e42f">is_object</link> () const noexcept</para>

<para>return whether value is an object </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a1859e0c783a24df797b758e3fc21b966">is_array</link> () const noexcept</para>

<para>return whether value is an array </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1ae958b0bc067c82850145299711d8bcd5">is_string</link> () const noexcept</para>

<para>return whether value is a string </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1af0623f174dc806b5c17b87a485febf68">is_binary</link> () const noexcept</para>

<para>return whether value is a binary array </para>
</listitem>
            <listitem><para>constexpr bool <link linkend="_classnlohmann_1_1basic__json_1a4fce66d66c424052b192ba45e08a661d">is_discarded</link> () const noexcept</para>

<para>return whether value is discarded </para>
</listitem>
            <listitem><para>constexpr <link linkend="_classnlohmann_1_1basic__json_1a568197da17e5f7f9889607a2524497c6">operator value_t</link> () const noexcept</para>

<para>return the type of the JSON value (implicit) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>value access    </title>

<para><anchor xml:id="__1amgrpd8f53c9caf18314e5b3f758245606995"/>Direct access to the stored value of a JSON value. </para>
        <itemizedlist>
            <listitem><para>template&lt;typename BasicJsonType , detail::enable_if_t&lt; std::is_same&lt; typename std::remove_const&lt; BasicJsonType &gt;::type, basic_json_t &gt;::value, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1adc6408fbeaf9545882dc62bc20db7d42">get</link> () const</para>

<para>get special-case overload </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , detail::enable_if_t&lt; not std::is_same&lt; BasicJsonType, basic_json &gt;::value and detail::is_basic_json&lt; BasicJsonType &gt;::value, int &gt;  = 0&gt; </para><para>BasicJsonType <link linkend="_classnlohmann_1_1basic__json_1ad6d521a14fe494fb08bea79cfaaa9b46">get</link> () const</para>

<para>get special-case overload </para>
</listitem>
            <listitem><para>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not detail::is_basic_json&lt; ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value and not detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1a0e3fba99f98f8b7c54b7e657f02162c9">get</link> () const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;(), std::declval&lt; ValueType &amp; &gt;())))</para>

<para>get a value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1a0ac973fb8b3bf1fb60d1b8df880060c3">get</link> () const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;())))</para>

<para>get a value (explicit); special case </para>
</listitem>
            <listitem><para>template&lt;typename ValueType , detail::enable_if_t&lt; not detail::is_basic_json&lt; ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </para><para>ValueType &amp; <link linkend="_classnlohmann_1_1basic__json_1a24f07b19d83414f342b204da5a400363">get_to</link> (ValueType &amp;v) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;(), v)))</para>

<para>get a value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename T , std::size_t N, typename Array  = T (&amp;)[N], detail::enable_if_t&lt; detail::has_from_json&lt; basic_json_t, Array &gt;::value, int &gt;  = 0&gt; </para><para>Array <link linkend="_classnlohmann_1_1basic__json_1aaca828acdba11b390de87689ac18fd08">get_to</link> (T(&amp;v)[N]) const noexcept(noexcept(JSONSerializer&lt; Array &gt;::from_json(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;(), v)))</para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </para><para>auto <link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr</link> () noexcept -&gt; decltype(std::declval&lt; <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;().<link linkend="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61">get_impl_ptr</link>(std::declval&lt; PointerType &gt;()))</para>

<para>get a pointer value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value and std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </para><para>constexpr auto <link linkend="_classnlohmann_1_1basic__json_1abad0f48fa4535a8820e90509b733f16b">get_ptr</link> () const noexcept -&gt; decltype(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;().<link linkend="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61">get_impl_ptr</link>(std::declval&lt; PointerType &gt;()))</para>

<para>get a pointer value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </para><para>auto <link linkend="_classnlohmann_1_1basic__json_1a19e7e8e1811dcbfb35d1855a24abd8aa">get</link> () noexcept -&gt; decltype(std::declval&lt; <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;().template <link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr</link>&lt; PointerType &gt;())</para>

<para>get a pointer value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </para><para>constexpr auto <link linkend="_classnlohmann_1_1basic__json_1a37a6d7eaf9d736a890adb6e9f1444fde">get</link> () const noexcept -&gt; decltype(std::declval&lt; const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link> &amp; &gt;().template <link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr</link>&lt; PointerType &gt;())</para>

<para>get a pointer value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value, int &gt;::type  = 0&gt; </para><para>ReferenceType <link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref</link> ()</para>

<para>get a reference value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value and std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </para><para>ReferenceType <link linkend="_classnlohmann_1_1basic__json_1a71ff2578d0655d983f2934a907b0f960">get_ref</link> () const</para>

<para>get a reference value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueType , typename std::enable_if&lt; not std::is_pointer&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, detail::json_ref&lt; basic_json &gt;&gt;::value and not std::is_same&lt; ValueType, typename string_t::value_type &gt;::value and not detail::is_basic_json&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::value and detail::is_detected&lt; detail::get_template_function, const basic_json_t &amp;, ValueType &gt;::value, int &gt;::type  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a3bdbda89fa87b8cd71f0ac0d048b8873">operator ValueType</link> () const</para>

<para>get a value (implicit) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>element access    </title>

<para><anchor xml:id="__1amgrpf68418821a90b03a001117a613b131dd"/>Access to the JSON value. </para>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)</para>

<para>access specified array element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a2204de84d420ad31b29488641815f90e">at</link> (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx) const</para>

<para>access specified array element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at</link> (const typename object_t::key_type &amp;key)</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a5ca85574718e7fde0a3113775c3023c8">at</link> (const typename object_t::key_type &amp;key) const</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a05c86efa156004b090258c1469eab3fd">operator[]</link> (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)</para>

<para>access specified array element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a9fd9864614513a7191df0bada4880228">operator[]</link> (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx) const</para>

<para>access specified array element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[]</link> (const typename object_t::key_type &amp;key)</para>

<para>access specified object element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a7630fcfd1eda4d7de237af90466bffc6">operator[]</link> (const typename object_t::key_type &amp;key) const</para>

<para>read-only access specified object element </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a4ef3a5ec711a8e4b32407a261baee850">operator[]</link> (T *key)</para>

<para>access specified object element </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1aadfe340990ea3f4039f8d3c100f254e6">operator[]</link> (T *key) const</para>

<para>read-only access specified object element </para>
</listitem>
            <listitem><para>template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> (const typename object_t::key_type &amp;key, const ValueType &amp;default_value) const</para>

<para>access specified object element with default value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1a7a378b9282dd1f7eb9bfffea6d177bbe">value</link> (const typename object_t::key_type &amp;key, const char *default_value) const</para>

<para>overload for a default value of type const char* </para>
</listitem>
            <listitem><para>template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1a23d4ac15d8df59f36967a46a49dd896d">value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr, const ValueType &amp;default_value) const</para>

<para>access specified object element via JSON Pointer with default value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1a5dfdaa906f429f5f8b6e14db46e94852">value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr, const char *default_value) const</para>

<para>overload for a default value of type const char* </para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classnlohmann_1_1basic__json_1a76e6ed5e2b067e8fc0f50fbc1fce0c52">get_subtype</link> () const noexcept</para>

<para>return the binary subtype </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1aa59cc57a1ea36eb2d24d16308a2baba2">set_subtype</link> (std::uint8_t subtype) noexcept</para>

<para>sets the binary subtype </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1aa2bb73931f8cdc113b1cec81412ee89d">clear_subtype</link> () noexcept</para>

<para>clears the binary subtype </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a002aa4e75d86a8beef332cf3a1c84d92">has_subtype</link> () const noexcept</para>

<para>return whether or not the binary subtype has a value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c">front</link> ()</para>

<para>access the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a135d1239f3189866baaede36ec0701c8">front</link> () const</para>

<para>access the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830">back</link> ()</para>

<para>access the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a3b1077520ab6c8682a9039fcc2a50b5d">back</link> () const</para>

<para>access the last element </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </para><para>IteratorType <link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase</link> (IteratorType pos)</para>

<para>remove element given an iterator </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </para><para>IteratorType <link linkend="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9">erase</link> (IteratorType first, IteratorType last)</para>

<para>remove elements given an iterator range </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a022404d92eb877a7ad5bfce198ef067a">erase</link> (const typename object_t::key_type &amp;key)</para>

<para>remove element from a JSON object given a key </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a49a7ac46583c77094f96a7717597ff5f">erase</link> (const <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)</para>

<para>remove element from a JSON array given an index </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>lookup    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename KeyT &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1af4167275baa0b2da76cdc89b1117c300">find</link> (KeyT &amp;&amp;key)</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para>template&lt;typename KeyT &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a581684a08bf3fa341f9fcec34d3885a3">find</link> (KeyT &amp;&amp;key) const</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para>template&lt;typename KeyT &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a369cf24de07945494df32e8b61e47917">count</link> (KeyT &amp;&amp;key) const</para>

<para>returns the number of occurrences of a key in a JSON object </para>
</listitem>
            <listitem><para>template&lt;typename KeyT , typename std::enable_if&lt; not std::is_same&lt; typename std::decay&lt; KeyT &gt;::type, json_pointer &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains</link> (KeyT &amp;&amp;key) const</para>

<para>check the existence of an element in a JSON object </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1af700bb8239390cf462126f0c96606fae">contains</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr) const</para>

<para>check the existence of an element in a JSON object given a JSON pointer </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>iterators    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt; <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a0a8051760196ac813fd5eb3c8d5a2976">iterator_wrapper</link> (<link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> ref) noexcept</para>

<para>wrapper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para>static <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt; <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1aca63364d2dbbda5b8848cf6987ab13b4">iterator_wrapper</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> ref) noexcept</para>

<para>wrapper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin</link> () noexcept</para>

<para>returns an iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1aeb76c192095f808283822c8401d2a3a1">begin</link> () const noexcept</para>

<para>returns a const iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin</link> () const noexcept</para>

<para>returns a const iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> () noexcept</para>

<para>returns an iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a94522e3b348ef50d9c212121b3478ee1">end</link> () const noexcept</para>

<para>returns a const iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend</link> () const noexcept</para>

<para>returns a const iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin</link> () noexcept</para>

<para>returns an iterator to the reverse-beginning </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a8d792070799098e6172e82a3865875ee">rbegin</link> () const noexcept</para>

<para>returns a const reverse iterator to the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend</link> () noexcept</para>

<para>returns an iterator to the reverse-end </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a6adf45af5f550ae31fe3bf0759b9af14">rend</link> () const noexcept</para>

<para>returns a const reverse iterator to one before the first </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin</link> () const noexcept</para>

<para>returns a const reverse iterator to the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend</link> () const noexcept</para>

<para>returns a const reverse iterator to one before the first </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt; <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items</link> () noexcept</para>

<para>helper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt; <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a79bac81ac682a6327fbd4e792190dfc6">items</link> () const noexcept</para>

<para>helper to access iterator member functions in range-based for </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>capacity    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae">empty</link> () const noexcept</para>

<para>checks whether the container is empty. </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size</link> () const noexcept</para>

<para>returns the number of elements </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size</link> () const noexcept</para>

<para>returns the maximum possible number of elements </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>modifiers    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a680c6cbaca83984fd7a5dd7496f86594">clear</link> () noexcept</para>

<para>clears the contents </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;val)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1afe3c79845dc1dd2243724558859d7e4b">operator+=</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;val)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1abf9a7dcd2b7a3080ccfacf5d0ebf12e5">push_back</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;val)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a4ec964f3346fa981453933901ca39dd1">operator+=</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;val)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1affac3bab5efcb26cdcd0942d24ad0ab5">push_back</link> (const typename object_t::value_type &amp;val)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1acbfa964cfa7c74f92d48a65eae744cfd">operator+=</link> (const typename object_t::value_type &amp;val)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a4f811ef36976a82a8e29cb1ae7c40152">push_back</link> (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ad7ca83d8fdd49dae585f9980af5f7a8c">operator+=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para>template&lt;class... Args&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a58837bac1c40038dcb07f437a02735da">emplace_back</link> (Args &amp;&amp;... args)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para>template&lt;class... Args&gt; </para><para>std::pair&lt; <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link>, bool &gt; <link linkend="_classnlohmann_1_1basic__json_1ae3866ccade11e7b73902169714363f21">emplace</link> (Args &amp;&amp;... args)</para>

<para>add an object to an object if key does not exist </para>
</listitem>
            <listitem><para>template&lt;typename... Args&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ab80c4bdc11b40246f668008bae80df25">insert_iterator</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, Args &amp;&amp;... args)</para>

<para>Helper for insertion of an iterator. </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;val)</para>

<para>inserts element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a3b86713def43fb79d40cb344b826033c">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;val)</para>

<para>inserts element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a58e65af3dd9223d8593c6ca1a8477c3f">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;val)</para>

<para>inserts elements </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a939390bb7d48b11c64413ec79c7104fa">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)</para>

<para>inserts elements </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1adaae3e55f4349e53d1526a6da464d34f">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> ilist)</para>

<para>inserts elements </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1aab2bc544912cb3954b38ee76772c16d7">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)</para>

<para>inserts elements </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85">update</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> j)</para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a0dbd5c8bdff3d633ff6d1d373297b777">update</link> (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)</para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> other) noexcept(std::is_nothrow_move_constructible&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_assignable&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_constructible&lt; <link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> and std::is_nothrow_move_assignable&lt; <link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> &gt;::<link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link>)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1adbb8131d4eaea460e8329bc0dfff1f6e">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a02f73d65a38b3f0450c992e8c337d522">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1a1c597d3cfa8aeec2ab4492306201851e">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>lexicographical comparison operators    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e">operator==</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1aba21440ea1aff44f718285ed7d6d20d9">operator==</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1aef302e3ae215e46e5035d0e4fdf47235">operator==</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327">operator!=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1afefc38fc08bdb7a9a7474b5ab4a1140f">operator!=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1ab0e886db6e9fa91ff9fd853333fed05b">operator!=</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a7999ee3a69a4979d92e98ab1e88c8759">operator&lt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1abed3e9b4ab75f5bcbd3cd20f5af5cdab">operator&lt;</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac">operator&lt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a7e368211047f725f333696aefdf39ffd">operator&lt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1ad73f88f70fe5acfa521750a8cd710026">operator&lt;=</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8">operator&gt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a412895af9a582869a4d369a64fb1b6d6">operator&gt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a124c319566198d9f092c5bebea46ce77">operator&gt;</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>bool <link linkend="_classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453">operator&gt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a68e3a92b3d9be1faa05c92d096299189">operator&gt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </para><para>bool <link linkend="_classnlohmann_1_1basic__json_1a5ee0e3e8afc7cbd932d6ed66418fa80a">operator&gt;=</link> (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>serialization    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405">operator&lt;&lt;</link> (std::ostream &amp;o, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>serialize to stream </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classnlohmann_1_1basic__json_1a34d6a60dd99e9f33b8273a1c8db5669b">operator&gt;&gt;</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, std::ostream &amp;o)</para>

<para>serialize to stream </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>deserialization    </title>
        <itemizedlist>
            <listitem><para>std::istream &amp; <link linkend="_classnlohmann_1_1basic__json_1a60ca396028b8d9714c6e10efbf475af6">operator&lt;&lt;</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, std::istream &amp;i)</para>

<para>deserialize from stream </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8">operator&gt;&gt;</link> (std::istream &amp;i, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>deserialize from stream </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, const <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> cb=nullptr, const bool allow_exceptions=true)</para>

<para>deserialize from a compatible input </para>
</listitem>
            <listitem><para>static bool <link linkend="_classnlohmann_1_1basic__json_1a2292a18355f7095fbfdbc98ba79d345b">accept</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i)</para>
</listitem>
            <listitem><para>template&lt;typename SAX &gt; </para><para>static bool <link linkend="_classnlohmann_1_1basic__json_1ada69b327dbaf7a7a221d3b3ee8d1cb1c">sax_parse</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, SAX *sax, <link linkend="_namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40">input_format_t</link> format=<link linkend="_mainwindow_8h_1ab701e3ac61a85b337ec5c1abaad6742d">input_format_t::json</link>, const bool strict=true)</para>

<para>generate SAX events </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </para><para>static <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a0837217bb8415b37a13233da239c0005">parse</link> (IteratorType first, IteratorType last, const <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> cb=nullptr, const bool allow_exceptions=true)</para>

<para>deserialize from an iterator range with contiguous storage </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </para><para>static bool <link linkend="_classnlohmann_1_1basic__json_1a1eeba1043ffc896a27a242b7de2a58d5">accept</link> (IteratorType first, IteratorType last)</para>
</listitem>
            <listitem><para>template&lt;class IteratorType , class SAX , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </para><para>static bool <link linkend="_classnlohmann_1_1basic__json_1a100dd0ecc7dfe3a8c2e1726c73ff3b63">sax_parse</link> (IteratorType first, IteratorType last, SAX *sax)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>binary serialization/deserialization support    </title>
        <itemizedlist>
            <listitem><para>static std::vector&lt; uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>create a CBOR serialization of a given JSON value </para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1af803f43acdb465ead25e65aa53acbcb8">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)</para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1a356ef3e5eed7946f7ff1e20501054aea">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)</para>
</listitem>
            <listitem><para>static std::vector&lt; uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>create a MessagePack serialization of a given JSON value </para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1ac258abcc5ccb6f5d46c12d5e66fadf98">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)</para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1a28c815e898071099c3c9326174e01749">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)</para>
</listitem>
            <listitem><para>static std::vector&lt; uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, const bool use_size=false, const bool use_type=false)</para>

<para>create a UBJSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1a52df3c307adc4224c4be2723d6a73e4e">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1ac427addfb0fb31b0c482d304557e4461">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</para>
</listitem>
            <listitem><para>static std::vector&lt; uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and returns a vector containing the corresponding BSON-representation. </para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1a0e352827765f76b007725d2b2b890d45">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)</para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>
</listitem>
            <listitem><para>static void <link linkend="_classnlohmann_1_1basic__json_1a09ed82d52ba52eae2dfaf7a338893fb8">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)</para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in CBOR format </para>
</listitem>
            <listitem><para>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a35a70ee14be3fab32b0976df41569fe8">from_cbor</link> (A1 &amp;&amp;a1, A2 &amp;&amp;a2, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in CBOR format </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in MessagePack format </para>
</listitem>
            <listitem><para>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a18f5f50cbdebc6a35fa1fe25a5107aa9">from_msgpack</link> (A1 &amp;&amp;a1, A2 &amp;&amp;a2, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in MessagePack format </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in UBJSON format </para>
</listitem>
            <listitem><para>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a7512b977f291271615ef6ad1e5baeee6">from_ubjson</link> (A1 &amp;&amp;a1, A2 &amp;&amp;a2, const bool strict=true, const bool allow_exceptions=true)</para>

<para>create a JSON value from an input in UBJSON format </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson</link> (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</para>

<para>Create a JSON value from an input in BSON format. </para>
</listitem>
            <listitem><para>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ac63e3b10cee79ec1581bd83a75927dae">from_bson</link> (A1 &amp;&amp;a1, A2 &amp;&amp;a2, const bool strict=true, const bool allow_exceptions=true)</para>

<para>Create a JSON value from an input in BSON format. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Pointer functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a0d26844b03de9067a47752b138e28236">operator[]</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr)</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1ac240ab334bd660975e601b0809c3f1bc">operator[]</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr) const</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ac07f0518ba7a3af394d37d86753a9845">at</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr)</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a92a2e5bde3f9a1a548b367114e4794f1">at</link> (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp;ptr) const</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ae91348b027208339c94dbbc6fd769929">flatten</link> () const</para>

<para>return flattened JSON value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten</link> () const</para>

<para>unflatten a previously flattened JSON value </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Patch functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ac8305b8912441b11af77564542e6d93e">diff</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;source, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;target, const std::string &amp;path=&quot;&quot;)</para>

<para>creates a diff as a JSON patch </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;json_patch) const</para>

<para>applies a JSON patch </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Merge Patch functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classnlohmann_1_1basic__json_1ab68414151f2f3347a71c7a9984f1d72d">merge_patch</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;apply_patch)</para>

<para>applies a JSON Merge Patch </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>a class to store JSON values </para>



<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ObjectType</entry>
                                <entry>
<para>type for JSON objects (<computeroutput>std::map</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>ArrayType</entry>
                                <entry>
<para>type for JSON arrays (<computeroutput>std::vector</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>StringType</entry>
                                <entry>
<para>type for JSON strings and object keys (<computeroutput>std::string</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>BooleanType</entry>
                                <entry>
<para>type for JSON booleans (<computeroutput>bool</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>NumberIntegerType</entry>
                                <entry>
<para>type for JSON integer numbers (<computeroutput>int64_t</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>NumberUnsignedType</entry>
                                <entry>
<para>type for JSON unsigned integer numbers (<computeroutput><computeroutput>uint64_t</computeroutput></computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>NumberFloatType</entry>
                                <entry>
<para>type for JSON floating-point numbers (<computeroutput>double</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>BinaryType</entry>
                                <entry>
<para>type for packed binary data for compatibility with binary serialization formats (<computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput> by default; will be used in <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>AllocatorType</entry>
                                <entry>
<para>type of the allocator to use (<computeroutput>std::allocator</computeroutput> by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>JSONSerializer</entry>
                                <entry>
<para>the serializer to resolve internal calls to <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> and <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> (<link linkend="_structnlohmann_1_1adl__serializer">adl_serializer</link> by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @requirement The class satisfies the following concept requirements:<itemizedlist>
<listitem>
<para>Basic<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</link>: JSON values can be default constructed. The result will be a JSON null value.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/MoveConstructible">MoveConstructible</link>: A JSON value can be constructed from an rvalue argument.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</link>: A JSON value can be copy-constructed from an lvalue expression.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/MoveAssignable">MoveAssignable</link>: A JSON value van be assigned from an rvalue argument.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/CopyAssignable">CopyAssignable</link>: A JSON value can be copy-assigned from an lvalue expression.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/Destructible">Destructible</link>: JSON values can be destructed.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Layout<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/StandardLayoutType">StandardLayoutType</link>: JSON values have <link xlink:href="https://en.cppreference.com/w/cpp/language/data_members#Standard_layout">standard layout</link>: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Library-wide<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/EqualityComparable">EqualityComparable</link>: JSON values can be compared with <computeroutput>==</computeroutput>, see <link linkend="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e">operator==(const_reference,const_reference)</link>.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/LessThanComparable">LessThanComparable</link>: JSON values can be compared with <computeroutput>&lt;</computeroutput>, see <link linkend="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;(const_reference,const_reference)</link>.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/Swappable">Swappable</link>: Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call <link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link>.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/NullablePointer">NullablePointer</link>: JSON values can be compared against <computeroutput>std::nullptr_t</computeroutput> objects which are used to model the <computeroutput>null</computeroutput> value.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Container<itemizedlist>
<listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link>: JSON values can be used like STL containers and provide iterator access.</para>
</listitem><listitem>
<para><link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link>; JSON values can be used like STL containers and provide reverse iterator access.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Invariant</title>

<para>The member variables <emphasis>m_value</emphasis> and <emphasis>m_type</emphasis> have the following relationship:<itemizedlist>
<listitem>
<para>If <computeroutput>m_type == <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link></computeroutput>, then <computeroutput>m_value.object != nullptr</computeroutput>.</para>
</listitem><listitem>
<para>If <computeroutput>m_type == <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link></computeroutput>, then <computeroutput>m_value.array != nullptr</computeroutput>.</para>
</listitem><listitem>
<para>If <computeroutput>m_type == <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link></computeroutput>, then <computeroutput>m_value.string != nullptr</computeroutput>. The invariants are checked by member function <link linkend="_classnlohmann_1_1basic__json_1aebf93a806247231640c785fbc6985d10">assert_invariant()</link>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 2739 of file json.hpp.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f"/>    <section>
    <title>allocator_type</title>
<indexterm><primary>allocator_type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>allocator_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">nlohmann::basic_json::allocator_type</link> =  AllocatorType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>the allocator type </para>
</para>
<para>
Definition at line 15758 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034"/>    <section>
    <title>array_t</title>
<indexterm><primary>array_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>array_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">nlohmann::basic_json::array_t</link> =  ArrayType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>, AllocatorType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;</computeroutput></para><para>

<para>a type for an array </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes JSON arrays as follows: <blockquote>
<para>An array is an ordered sequence of zero or more values. </para>
</blockquote></para>

<para>To store objects in C++, a type is defined by the template parameters explained below.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ArrayType</entry>
                                <entry>
<para>container type to store arrays (e.g., <computeroutput>std::vector</computeroutput> or <computeroutput>std::list</computeroutput>) </para>
</entry>
                            </row>
                            <row>
                                <entry>AllocatorType</entry>
                                <entry>
<para>allocator to use for arrays (e.g., <computeroutput>std::allocator</computeroutput>)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md4">
<title>Default type</title>

<para>With the default values for <emphasis>ArrayType</emphasis> (<computeroutput>std::vector</computeroutput>) and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>array_t</emphasis> is:</para>

<para><literallayout><computeroutput>std::vector&lt;
&#32;&#32;basic_json,&#32;//&#32;value_type
&#32;&#32;std::allocator&lt;basic_json&gt;&#32;//&#32;allocator_type
&gt;
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md5">
<title>Limits</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> specifies: <blockquote>
<para>An implementation may set limits on the maximum depth of nesting. </para>
</blockquote></para>

<para>In this class, the array&apos;s limit of nesting is not explicitly constrained. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size</link> function of a JSON array.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md6">
<title>Storage</title>

<para>Arrays are stored as pointers in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type. That is, for any access to array values, a pointer of type <computeroutput>array_t*</computeroutput> must be dereferenced.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16018 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee"/>    <section>
    <title>basic_json_t</title>
<indexterm><primary>basic_json_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">nlohmann::basic_json::basic_json_t</link> =  <link linkend="_json_8hpp_1a80b7254e63f199a1f656f07ae551f632">NLOHMANN_BASIC_JSON_TPL</link><computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>workaround type for MSVC </para>
</para>
<para>
Definition at line 15673 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adc04ef0052bc11c778d2084b67073b6d"/>    <section>
    <title>binary_reader</title>
<indexterm><primary>binary_reader</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>binary_reader</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1adc04ef0052bc11c778d2084b67073b6d">nlohmann::basic_json::binary_reader</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1binary__reader">nlohmann::detail::binary_reader</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15691 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1"/>    <section>
    <title>binary_t</title>
<indexterm><primary>binary_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>binary_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">nlohmann::basic_json::binary_t</link> =  BinaryType</computeroutput></para><para>

<para>a type for a packed binary type </para>
</para>

<para>This type is a type designed to carry binary data that appears in various serialized formats, such as CBOR&apos;s Major Type 2, MessagePack&apos;s bin, and BSON&apos;s generic binary subtype. This type is NOT a part of standard JSON and exists solely for compatibility with these binary types. As such, it is simply defined as an ordered sequence of zero or more byte values.</para>

<para>Additionally, as an implementation detail, the subtype of the binary data is carried around as a <computeroutput>unint8_t</computeroutput>, which is compatible with both of the binary data formats that use binary subtyping, (though the specific numbering is incompatible with each other, and it is up to the user to translate between them).</para>

<para><link xlink:href="https://tools.ietf.org/html/rfc7049">CBOR&apos;s RFC 7049</link> describes this type as: <blockquote>
<para>Major type 2: a byte string. The string&apos;s length in bytes is represented following the rules for positive integers (major type 0). </para>
</blockquote></para>

<para><link xlink:href="https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family">MessagePack&apos;s documentation on the bin type family</link> describes this type as: <blockquote>
<para>Bin format family stores an byte array in 2, 3, or 5 bytes of extra bytes in addition to the size of the byte array. </para>
</blockquote></para>

<para><link xlink:href="http://bsonspec.org/spec.html">BSON&apos;s specifications</link> describe several binary types; however, this type is intended to represent the generic binary type which has the description: <blockquote>
<para>Generic binary subtype - This is the most commonly used binary subtype and should be the &apos;default&apos; for drivers and tools. </para>
</blockquote></para>

<para>None of these impose any limitations on the internal representation other than the basic unit of storage be some type of array whose parts are decomposible into bytes.</para>

<para>The default representation of this binary format is a <computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput>, which is a very common way to represent a byte array in modern C++.</para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md25">
<title>Default type</title>

<para>The default values for <emphasis>BinaryType</emphasis> is <computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md26">
<title>Storage</title>

<para>Binary Arrays are stored as pointers in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type. That is, for any access to array values, a pointer of the type <computeroutput>binary_t*</computeroutput> must be dereferenced.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16366 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa68060aae4c6abde125789021fd737f6"/>    <section>
    <title>binary_writer</title>
<indexterm><primary>binary_writer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>binary_writer</secondary></indexterm>
<computeroutput>template&lt;typename CharType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1aa68060aae4c6abde125789021fd737f6">nlohmann::basic_json::binary_writer</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1binary__writer">nlohmann::detail::binary_writer</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>, CharType&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15692 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2"/>    <section>
    <title>boolean_t</title>
<indexterm><primary>boolean_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>boolean_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">nlohmann::basic_json::boolean_t</link> =  BooleanType</computeroutput></para><para>

<para>a type for a boolean </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> implicitly describes a boolean as a type which differentiates the two literals <computeroutput>true</computeroutput> and <computeroutput>false</computeroutput>.</para>

<para>To store objects in C++, a type is defined by the template parameter <emphasis>BooleanType</emphasis> which chooses the type to use.</para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md11">
<title>Default type</title>

<para>With the default values for <emphasis>BooleanType</emphasis> (<computeroutput>bool</computeroutput>), the default value for <emphasis>boolean_t</emphasis> is:</para>

<para><literallayout><computeroutput>bool
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md12">
<title>Storage</title>

<para>Boolean values are stored directly inside a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type.</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16097 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba"/>    <section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">nlohmann::basic_json::const_iterator</link> =  <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">iter_impl</link>&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>a const iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
<para>
Definition at line 15768 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a2c77adc1436dd4c62960d2679e4befee"/>    <section>
    <title>const_pointer</title>
<indexterm><primary>const_pointer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>const_pointer</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a2c77adc1436dd4c62960d2679e4befee">nlohmann::basic_json::const_pointer</link> =  typename std::allocator_traits&lt;<link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link>&gt;::<link linkend="_classnlohmann_1_1basic__json_1a2c77adc1436dd4c62960d2679e4befee">const_pointer</link></computeroutput></para><para>

<para>the type of an element const pointer </para>
</para>
<para>
Definition at line 15763 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9"/>    <section>
    <title>const_reference</title>
<indexterm><primary>const_reference</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>const_reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">nlohmann::basic_json::const_reference</link> =  const <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">value_type</link>&amp;</computeroutput></para><para>

<para>the type of an element const reference </para>
</para>
<para>
Definition at line 15750 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91"/>    <section>
    <title>const_reverse_iterator</title>
<indexterm><primary>const_reverse_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>const_reverse_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">nlohmann::basic_json::const_reverse_iterator</link> =  <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">json_reverse_iterator</link>&lt;typename <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">basic_json::const_iterator</link>&gt;</computeroutput></para><para>

<para>a const reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
<para>
Definition at line 15772 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9b7596a400a85e2dd7ab22f62df8a340"/>    <section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>difference_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a9b7596a400a85e2dd7ab22f62df8a340">nlohmann::basic_json::difference_type</link> =  std::ptrdiff_t</computeroutput></para><para>

<para>a type to represent differences between iterators </para>
</para>
<para>
Definition at line 15753 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a05b1719e15d24c47f4fce69888967d1e"/>    <section>
    <title>error_handler_t</title>
<indexterm><primary>error_handler_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>error_handler_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">nlohmann::basic_json::error_handler_t</link> =  <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">detail::error_handler_t</link></computeroutput></para><para>

<para>how to treat decoding errors </para>
</para>
<para>
Definition at line 15703 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d"/>    <section>
    <title>exception</title>
<indexterm><primary>exception</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>exception</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">nlohmann::basic_json::exception</link> =  <link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link></computeroutput></para><para>

<para>general exception of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class </para>
</para>

<para>This class is an extension of <computeroutput>std::exception</computeroutput> objects with a member <emphasis>id</emphasis> for exception ids. It is used as the base class for all exceptions thrown by the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. This class can hence be used as &quot;wildcard&quot; to catch exceptions.</para>

<para>Subclasses:<itemizedlist>
<listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> for exceptions indicating a parse error</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> for exceptions indicating errors with iterators</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> for exceptions indicating executing a member function with a wrong type</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> for exceptions indicating access out of the defined range</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> for exceptions indicating other library errors</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows how arbitrary library exceptions can be caught.,exception}</para>

<para><formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15720 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839"/>    <section>
    <title>initializer_list_t</title>
<indexterm><primary>initializer_list_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>initializer_list_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">nlohmann::basic_json::initializer_list_t</link> =  std::initializer_list&lt;<link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;</computeroutput></para><para>

<para>helper type for initializer lists of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> values </para>
</para>
<para>
Definition at line 15705 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6cefa2384f912265e090f7a34c99703d"/>    <section>
    <title>input_format_t</title>
<indexterm><primary>input_format_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>input_format_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40">nlohmann::basic_json::input_format_t</link> =  <link linkend="_namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40">detail::input_format_t</link></computeroutput></para><para>
Definition at line 15707 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adde2de3a20dd50b61b9509d777bbe434"/>    <section>
    <title>internal_iterator</title>
<indexterm><primary>internal_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>internal_iterator</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1adde2de3a20dd50b61b9509d777bbe434">nlohmann::basic_json::internal_iterator</link> =  ::<link linkend="_structnlohmann_1_1detail_1_1internal__iterator">nlohmann::detail::internal_iterator</link>&lt;BasicJsonType&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15681 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0"/>    <section>
    <title>invalid_iterator</title>
<indexterm><primary>invalid_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>invalid_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">nlohmann::basic_json::invalid_iterator</link> =  <link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">detail::invalid_iterator</link></computeroutput></para><para>

<para>exception indicating errors with iterators </para>
</para>

<para>This exception is thrown if iterators passed to a library function do not match the expected semantics.</para>

<para>Exceptions have ids 2xx.</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>name / id </para>
</entry><entry>
<para>example message </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>json.exception.invalid_iterator.201 </para>
</entry><entry>
<para>iterators are not compatible </para>
</entry><entry>
<para>The iterators passed to constructor <link linkend="_classnlohmann_1_1basic__json_1a3fb693444043639e08ff7be62410b137">basic_json(InputIT first, InputIT last)</link> are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.202 </para>
</entry><entry>
<para>iterator does not fit current value </para>
</entry><entry>
<para>In an erase or insert function, the passed iterator <emphasis>pos</emphasis> does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.203 </para>
</entry><entry>
<para>iterators do not fit current value </para>
</entry><entry>
<para>Either iterator passed to function <link linkend="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9">erase(IteratorType first, IteratorType last)</link> does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.204 </para>
</entry><entry>
<para>iterators out of range </para>
</entry><entry>
<para>When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link>, <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>), because this is the only way the single stored value is expressed. All other ranges are invalid.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.205 </para>
</entry><entry>
<para>iterator out of range </para>
</entry><entry>
<para>When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the <link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> iterator, because it is the only way to address the stored value. All other iterators are invalid.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.206 </para>
</entry><entry>
<para>cannot construct with iterators from null </para>
</entry><entry>
<para>The iterators passed to constructor <link linkend="_classnlohmann_1_1basic__json_1a3fb693444043639e08ff7be62410b137">basic_json(InputIT first, InputIT last)</link> belong to a JSON null value and hence to not define a valid range.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.207 </para>
</entry><entry>
<para>cannot use key() for non-object iterators </para>
</entry><entry>
<para>The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.208 </para>
</entry><entry>
<para>cannot use operator[] for object iterators </para>
</entry><entry>
<para>The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.209 </para>
</entry><entry>
<para>cannot use offsets with object iterators </para>
</entry><entry>
<para>The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.210 </para>
</entry><entry>
<para>iterators do not fit </para>
</entry><entry>
<para>The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.211 </para>
</entry><entry>
<para>passed iterators may not belong to container </para>
</entry><entry>
<para>The iterator range passed to the insert function must not be a subrange of the container to insert to.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.212 </para>
</entry><entry>
<para>cannot compare iterators of different containers </para>
</entry><entry>
<para>When two iterators are compared, they must belong to the same container.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.213 </para>
</entry><entry>
<para>cannot compare order of object iterators </para>
</entry><entry>
<para>The order of object iterators cannot be compared, because JSON objects are unordered.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.invalid_iterator.214 </para>
</entry><entry>
<para>cannot get value </para>
</entry><entry>
<para>Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to <link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link>.  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>@liveexample{The following code shows how an <computeroutput>invalid_iterator</computeroutput> exception can be caught.,invalid_iterator}</para>

<para><formalpara><title>See also</title>

<para>- <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> for the base class of the library exceptions </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> for exceptions indicating a <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> error </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> for exceptions indicating executing a member function with a wrong <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> for exceptions indicating access out of the defined range </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> for exceptions indicating other library errors</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15724 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5"/>    <section>
    <title>iter_impl</title>
<indexterm><primary>iter_impl</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">nlohmann::basic_json::iter_impl</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link>&lt;BasicJsonType&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15683 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62"/>    <section>
    <title>iteration_proxy</title>
<indexterm><primary>iteration_proxy</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>iteration_proxy</secondary></indexterm>
<computeroutput>template&lt;typename Iterator &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">nlohmann::basic_json::iteration_proxy</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy">nlohmann::detail::iteration_proxy</link>&lt;Iterator&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15685 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d"/>    <section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">nlohmann::basic_json::iterator</link> =  <link linkend="_classnlohmann_1_1basic__json_1aed2cfa5fe53bdb2ea709e634044bc2b5">iter_impl</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>an iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
<para>
Definition at line 15766 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208"/>    <section>
    <title>json_pointer</title>
<indexterm><primary>json_pointer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>json_pointer</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">nlohmann::basic_json::json_pointer</link> =  ::<link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>JSON Pointer, see <link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>. </para>
</para>
<para>
Definition at line 15699 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56"/>    <section>
    <title>json_reverse_iterator</title>
<indexterm><primary>json_reverse_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>json_reverse_iterator</secondary></indexterm>
<computeroutput>template&lt;typename Base &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">nlohmann::basic_json::json_reverse_iterator</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">nlohmann::detail::json_reverse_iterator</link>&lt;Base&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15686 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af229d341abc5e2525a8ca4dc247533e1"/>    <section>
    <title>json_sax_t</title>
<indexterm><primary>json_sax_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>json_sax_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1af229d341abc5e2525a8ca4dc247533e1">nlohmann::basic_json::json_sax_t</link> =  <link linkend="_structnlohmann_1_1json__sax">json_sax</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>SAX interface type, see <link linkend="_structnlohmann_1_1json__sax">nlohmann::json_sax</link>. </para>
</para>
<para>
Definition at line 15709 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a"/>    <section>
    <title>json_serializer</title>
<indexterm><primary>json_serializer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>json_serializer</secondary></indexterm>
<computeroutput>template&lt;typename T , typename SFINAE &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">nlohmann::basic_json::json_serializer</link> =  JSONSerializer&lt;T, SFINAE&gt;</computeroutput></para><para>
Definition at line 15701 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad168ab3cb5b376e851d997143b6ae0ed"/>    <section>
    <title>lexer</title>
<indexterm><primary>lexer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>lexer</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ad168ab3cb5b376e851d997143b6ae0ed">nlohmann::basic_json::lexer</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15676 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d"/>    <section>
    <title>number_float_t</title>
<indexterm><primary>number_float_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>number_float_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">nlohmann::basic_json::number_float_t</link> =  NumberFloatType</computeroutput></para><para>

<para>a type for a number (floating-point) </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes numbers as follows: <blockquote>
<para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para>
</blockquote></para>

<para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> and <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> are used.</para>

<para>To store floating-point numbers in C++, a type is defined by the template parameter <emphasis>NumberFloatType</emphasis> which chooses the type to use.</para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md21">
<title>Default type</title>

<para>With the default values for <emphasis>NumberFloatType</emphasis> (<computeroutput>double</computeroutput>), the default value for <emphasis>number_float_t</emphasis> is:</para>

<para><literallayout><computeroutput>double
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md22">
<title>Default behavior</title>

<para><itemizedlist>
<listitem>
<para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in floating-point literals will be ignored. Internally, the value will be stored as decimal number. For instance, the C++ floating-point literal <computeroutput>01.2</computeroutput> will be serialized to <computeroutput>1.2</computeroutput>. During deserialization, leading zeros yield an error.</para>
</listitem><listitem>
<para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md23">
<title>Limits</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> states: <blockquote>
<para>This specification allows implementations to set limits on the range and precision of numbers accepted. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision. </para>
</blockquote></para>

<para>This implementation does exactly follow this approach, as it uses double precision floating-point numbers. Note values smaller than <computeroutput>-1.79769313486232e+308</computeroutput> and values greater than <computeroutput>1.79769313486232e+308</computeroutput> will be stored as NaN internally and be serialized to <computeroutput>null</computeroutput>.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md24">
<title>Storage</title>

<para>Floating-point number values are stored directly inside a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (integer)</para>

<para><link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (unsigned integer)</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16308 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d"/>    <section>
    <title>number_integer_t</title>
<indexterm><primary>number_integer_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>number_integer_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">nlohmann::basic_json::number_integer_t</link> =  NumberIntegerType</computeroutput></para><para>

<para>a type for a number (integer) </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes numbers as follows: <blockquote>
<para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para>
</blockquote></para>

<para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> and <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> are used.</para>

<para>To store integer numbers in C++, a type is defined by the template parameter <emphasis>NumberIntegerType</emphasis> which chooses the type to use.</para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md13">
<title>Default type</title>

<para>With the default values for <emphasis>NumberIntegerType</emphasis> (<computeroutput>int64_t</computeroutput>), the default value for <emphasis>number_integer_t</emphasis> is:</para>

<para><literallayout><computeroutput>int64_t
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md14">
<title>Default behavior</title>

<para><itemizedlist>
<listitem>
<para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para>
</listitem><listitem>
<para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md15">
<title>Limits</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> specifies: <blockquote>
<para>An implementation may set limits on the range and precision of numbers. </para>
</blockquote></para>

<para>When the default type is used, the maximal integer number that can be stored is <computeroutput>9223372036854775807</computeroutput> (INT64_MAX) and the minimal integer number that can be stored is <computeroutput>-9223372036854775808</computeroutput> (INT64_MIN). Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>.</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> further states: <blockquote>
<para>Note that when such software is used, numbers that are integers and are in the range <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_0.png"/>
            </imageobject>
</inlinemediaobject>
 are interoperable in the sense that implementations will agree exactly on their numeric values. </para>
</blockquote></para>

<para>As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class&apos;s integer type is interoperable.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md16">
<title>Storage</title>

<para>Integer number values are stored directly inside a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (floating-point)</para>

<para><link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (unsigned integer)</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16169 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70"/>    <section>
    <title>number_unsigned_t</title>
<indexterm><primary>number_unsigned_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>number_unsigned_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">nlohmann::basic_json::number_unsigned_t</link> =  NumberUnsignedType</computeroutput></para><para>

<para>a type for a number (unsigned) </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes numbers as follows: <blockquote>
<para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para>
</blockquote></para>

<para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> and <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> are used.</para>

<para>To store unsigned integer numbers in C++, a type is defined by the template parameter <emphasis>NumberUnsignedType</emphasis> which chooses the type to use.</para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md17">
<title>Default type</title>

<para>With the default values for <emphasis>NumberUnsignedType</emphasis> (<computeroutput>uint64_t</computeroutput>), the default value for <emphasis>number_unsigned_t</emphasis> is:</para>

<para><literallayout><computeroutput>uint64_t
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md18">
<title>Default behavior</title>

<para><itemizedlist>
<listitem>
<para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para>
</listitem><listitem>
<para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md19">
<title>Limits</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> specifies: <blockquote>
<para>An implementation may set limits on the range and precision of numbers. </para>
</blockquote></para>

<para>When the default type is used, the maximal integer number that can be stored is <computeroutput>18446744073709551615</computeroutput> (UINT64_MAX) and the minimal integer number that can be stored is <computeroutput>0</computeroutput>. Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>.</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> further states: <blockquote>
<para>Note that when such software is used, numbers that are integers and are in the range <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_0.png"/>
            </imageobject>
</inlinemediaobject>
 are interoperable in the sense that implementations will agree exactly on their numeric values. </para>
</blockquote></para>

<para>As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class&apos;s integer type is interoperable.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md20">
<title>Storage</title>

<para>Integer number values are stored directly inside a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (floating-point) </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for number values (integer)</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16240 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af17b737bac7ddaa05c1b6205b1e025c6"/>    <section>
    <title>object_comparator_t</title>
<indexterm><primary>object_comparator_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>object_comparator_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1af17b737bac7ddaa05c1b6205b1e025c6">nlohmann::basic_json::object_comparator_t</link> =  std::less&lt;StringType&gt;</computeroutput></para><para>
Definition at line 15882 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3"/>    <section>
    <title>object_t</title>
<indexterm><primary>object_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>object_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">nlohmann::basic_json::object_t</link> =  ObjectType&lt;StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, <link linkend="_classnlohmann_1_1basic__json_1af17b737bac7ddaa05c1b6205b1e025c6">object_comparator_t</link>, AllocatorType&lt;std::pair&lt;const StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;&gt;</computeroutput></para><para>

<para>a type for an object </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes JSON objects as follows: <blockquote>
<para>An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array. </para>
</blockquote></para>

<para>To store objects in C++, a type is defined by the template parameters described below.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ObjectType</entry>
                                <entry>
<para>the container to store objects (e.g., <computeroutput>std::map</computeroutput> or <computeroutput>std::unordered_map</computeroutput>) </para>
</entry>
                            </row>
                            <row>
                                <entry>StringType</entry>
                                <entry>
<para>the type of the keys or names (e.g., <computeroutput>std::string</computeroutput>). The comparison function <computeroutput>std::less&lt;StringType&gt;</computeroutput> is used to order elements inside the container. </para>
</entry>
                            </row>
                            <row>
                                <entry>AllocatorType</entry>
                                <entry>
<para>the allocator to use for objects (e.g., <computeroutput>std::allocator</computeroutput>)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md0">
<title>Default type</title>

<para>With the default values for <emphasis>ObjectType</emphasis> (<computeroutput>std::map</computeroutput>), <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>object_t</emphasis> is:</para>

<para><literallayout><computeroutput>std::map&lt;
&#32;&#32;std::string,&#32;//&#32;key_type
&#32;&#32;basic_json,&#32;//&#32;value_type
&#32;&#32;std::less&lt;std::string&gt;,&#32;//&#32;key_compare
&#32;&#32;std::allocator&lt;std::pair&lt;const&#32;std::string,&#32;basic_json&gt;&gt;&#32;//&#32;allocator_type
&gt;
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md1">
<title>Behavior</title>

<para>The choice of <emphasis>object_t</emphasis> influences the behavior of the JSON class. With the default type, objects have the following behavior:</para>

<para><itemizedlist>
<listitem>
<para>When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.</para>
</listitem><listitem>
<para>When the names within an object are not unique, it is unspecified which one of the values for a given key will be chosen. For instance, <computeroutput>{&quot;key&quot;: 2, &quot;key&quot;: 1}</computeroutput> could be equal to either <computeroutput>{&quot;key&quot;: 1}</computeroutput> or <computeroutput>{&quot;key&quot;: 2}</computeroutput>.</para>
</listitem><listitem>
<para>Internally, name/value pairs are stored in lexicographical order of the names. Objects will also be serialized (see <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump</link>) in this order. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be stored and serialized as <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput>.</para>
</listitem><listitem>
<para>When comparing objects, the order of the name/value pairs is irrelevant. This makes objects interoperable in the sense that they will not be affected by these differences. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be treated as equal.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md2">
<title>Limits</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> specifies: <blockquote>
<para>An implementation may set limits on the maximum depth of nesting. </para>
</blockquote></para>

<para>In this class, the object&apos;s limit of nesting is not explicitly constrained. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size</link> function of a JSON object.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md3">
<title>Storage</title>

<para>Objects are stored as pointers in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type. That is, for any access to object values, a pointer of type <computeroutput>object_t*</computeroutput> must be dereferenced.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> for an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
<note><title>Note</title>

<para>The order name/value pairs are added to the object is <emphasis>not</emphasis> preserved by the library. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored. In fact, keys will be traversed in alphabetical order as <computeroutput>std::map</computeroutput> with <computeroutput>std::less</computeroutput> is used by default. Please note this behavior conforms to <link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link>, because any order implements the specified &quot;unordered&quot; nature of JSON objects. </para>
</note>
</para>
</section>
<para>
Definition at line 15972 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893"/>    <section>
    <title>other_error</title>
<indexterm><primary>other_error</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>other_error</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">nlohmann::basic_json::other_error</link> =  <link linkend="_classnlohmann_1_1detail_1_1other__error">detail::other_error</link></computeroutput></para><para>

<para>exception indicating other library errors </para>
</para>

<para>This exception is thrown in case of errors that cannot be classified with the other exception types.</para>

<para>Exceptions have ids 5xx.</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>name / id </para>
</entry><entry>
<para>example message </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>json.exception.other_error.501 </para>
</entry><entry>
<para>unsuccessful: {&quot;op&quot;:&quot;test&quot;,&quot;path&quot;:&quot;/baz&quot;, &quot;value&quot;:&quot;bar&quot;} </para>
</entry><entry>
<para>A JSON Patch operation &apos;test&apos; failed. The unsuccessful operation is also printed.  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><formalpara><title>See also</title>

<para>- <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> for the base class of the library exceptions </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> for exceptions indicating a <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> error </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> for exceptions indicating errors with iterators </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> for exceptions indicating executing a member function with a wrong <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> for exceptions indicating access out of the defined range</para>
</formalpara>
@liveexample{The following code shows how an <computeroutput>other_error</computeroutput> exception can be caught.,other_error}</para>

<para><formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15730 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383"/>    <section>
    <title>out_of_range</title>
<indexterm><primary>out_of_range</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>out_of_range</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">nlohmann::basic_json::out_of_range</link> =  <link linkend="_classnlohmann_1_1detail_1_1out__of__range">detail::out_of_range</link></computeroutput></para><para>

<para>exception indicating access out of the defined range </para>
</para>

<para>This exception is thrown in case a library function is called on an input parameter that exceeds the expected range, for instance in case of array indices or nonexisting object keys.</para>

<para>Exceptions have ids 4xx.</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>name / id </para>
</entry><entry>
<para>example message </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>json.exception.out_of_range.401 </para>
</entry><entry>
<para>array index 3 is out of range </para>
</entry><entry>
<para>The provided array index <emphasis>i</emphasis> is larger than <emphasis>size-1</emphasis>.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.402 </para>
</entry><entry>
<para>array index &apos;-&apos; (3) is out of range </para>
</entry><entry>
<para>The special array index <computeroutput>-</computeroutput> in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.403 </para>
</entry><entry>
<para>key &apos;foo&apos; not found </para>
</entry><entry>
<para>The provided key was not found in the JSON object.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.404 </para>
</entry><entry>
<para>unresolved reference token &apos;foo&apos; </para>
</entry><entry>
<para>A reference token in a JSON Pointer could not be resolved.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.405 </para>
</entry><entry>
<para>JSON pointer has no parent </para>
</entry><entry>
<para>The JSON Patch operations &apos;remove&apos; and &apos;add&apos; can not be applied to the root element of the JSON value.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.406 </para>
</entry><entry>
<para>number overflow parsing &apos;10E1000&apos; </para>
</entry><entry>
<para>A parsed number could not be stored as without changing it to NaN or INF.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.407 </para>
</entry><entry>
<para>number overflow serializing &apos;9223372036854775808&apos; </para>
</entry><entry>
<para>UBJSON and BSON only support integer numbers up to 9223372036854775807.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.408 </para>
</entry><entry>
<para>excessive array size: 8658170730974374167 </para>
</entry><entry>
<para>The size (following <computeroutput>#</computeroutput>) of an UBJSON array or object exceeds the maximal capacity.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.out_of_range.409 </para>
</entry><entry>
<para>BSON key cannot contain code point U+0000 (at byte 2) </para>
</entry><entry>
<para>Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>@liveexample{The following code shows how an <computeroutput>out_of_range</computeroutput> exception can be caught.,out_of_range}</para>

<para><formalpara><title>See also</title>

<para>- <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> for the base class of the library exceptions </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> for exceptions indicating a <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> error </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> for exceptions indicating errors with iterators </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> for exceptions indicating executing a member function with a wrong <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> for exceptions indicating other library errors</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15728 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a1d73e1ec6468bb28ba8dbe7d586574cf"/>    <section>
    <title>output_adapter_t</title>
<indexterm><primary>output_adapter_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>output_adapter_t</secondary></indexterm>
<computeroutput>template&lt;typename CharType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a1d73e1ec6468bb28ba8dbe7d586574cf">nlohmann::basic_json::output_adapter_t</link> =  ::<link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">nlohmann::detail::output_adapter_t</link>&lt;CharType&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15689 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59"/>    <section>
    <title>parse_error</title>
<indexterm><primary>parse_error</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parse_error</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">nlohmann::basic_json::parse_error</link> =  <link linkend="_classnlohmann_1_1detail_1_1parse__error">detail::parse_error</link></computeroutput></para><para>

<para>exception indicating a parse error </para>
</para>

<para>This exception is thrown by the library when a parse error occurs. Parse errors can occur during the deserialization of JSON text, CBOR, MessagePack, as well as when using JSON Patch.</para>

<para>Member <emphasis>byte</emphasis> holds the byte index of the last read character in the input file.</para>

<para>Exceptions have ids 1xx.</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>name / id </para>
</entry><entry>
<para>example message </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>json.exception.parse_error.101 </para>
</entry><entry>
<para>parse error at 2: unexpected end of input; expected string literal </para>
</entry><entry>
<para>This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member <emphasis>byte</emphasis> indicates the error position.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.102 </para>
</entry><entry>
<para>parse error at 14: missing or wrong low surrogate </para>
</entry><entry>
<para>JSON uses the <computeroutput>\uxxxx</computeroutput> format to describe Unicode characters. Code points above above 0xFFFF are split into two <computeroutput>\uxxxx</computeroutput> entries (&quot;surrogate pairs&quot;). This error indicates that the surrogate pair is incomplete or contains an invalid code point.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.103 </para>
</entry><entry>
<para>parse error: code points above 0x10FFFF are invalid </para>
</entry><entry>
<para>Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.104 </para>
</entry><entry>
<para>parse error: JSON patch must be an array of objects </para>
</entry><entry>
<para><link xlink:href="https://tools.ietf.org/html/rfc6902">RFC 6902</link> requires a JSON Patch document to be a JSON document that represents an array of objects.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.105 </para>
</entry><entry>
<para>parse error: operation must have string member &apos;op&apos; </para>
</entry><entry>
<para>An operation of a JSON Patch document must contain exactly one &quot;op&quot; member, whose value indicates the operation to perform. Its value must be one of &quot;add&quot;, &quot;remove&quot;, &quot;replace&quot;, &quot;move&quot;, &quot;copy&quot;, or &quot;test&quot;; other values are errors.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.106 </para>
</entry><entry>
<para>parse error: array index &apos;01&apos; must not begin with &apos;0&apos; </para>
</entry><entry>
<para>An array index in a JSON Pointer (<link xlink:href="https://tools.ietf.org/html/rfc6901">RFC 6901</link>) may be <computeroutput>0</computeroutput> or any number without a leading <computeroutput>0</computeroutput>.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.107 </para>
</entry><entry>
<para>parse error: JSON pointer must be empty or begin with &apos;/&apos; - was: &apos;foo&apos; </para>
</entry><entry>
<para>A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a <computeroutput>/</computeroutput> character.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.108 </para>
</entry><entry>
<para>parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos; </para>
</entry><entry>
<para>In a JSON Pointer, only <computeroutput>~0</computeroutput> and <computeroutput>~1</computeroutput> are valid escape sequences.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.109 </para>
</entry><entry>
<para>parse error: array index &apos;one&apos; is not a number </para>
</entry><entry>
<para>A JSON Pointer array index must be a number.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.110 </para>
</entry><entry>
<para>parse error at 1: cannot read 2 bytes from vector </para>
</entry><entry>
<para>When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.112 </para>
</entry><entry>
<para>parse error at 1: error reading CBOR; last byte: 0xF8 </para>
</entry><entry>
<para>Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.113 </para>
</entry><entry>
<para>parse error at 2: expected a CBOR string; last byte: 0x98 </para>
</entry><entry>
<para>While parsing a map key, a value that is not a string has been read.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.parse_error.114 </para>
</entry><entry>
<para>parse error: Unsupported BSON record type 0x0F </para>
</entry><entry>
<para>The parsing of the corresponding BSON record type is not implemented (yet).  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack).</para>
</note>
@liveexample{The following code shows how a <computeroutput>parse_error</computeroutput> exception can be caught.,parse_error}</para>

<para><formalpara><title>See also</title>

<para>- <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> for the base class of the library exceptions </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> for exceptions indicating errors with iterators </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">type_error</link> for exceptions indicating executing a member function with a wrong <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> for exceptions indicating access out of the defined range </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> for exceptions indicating other library errors</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15722 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4a4d5958eb47ab75530a3d5c68f6b88f"/>    <section>
    <title>parse_event_t</title>
<indexterm><primary>parse_event_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parse_event_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a4a4d5958eb47ab75530a3d5c68f6b88f">nlohmann::basic_json::parse_event_t</link> =  typename <link linkend="_classnlohmann_1_1detail_1_1parser_1a37ac88c864dda495f72cb62776b0bebe">parser::parse_event_t</link></computeroutput></para><para>

<para>parser event types </para>
</para>

<para>The parser callback distinguishes the following events:<itemizedlist>
<listitem>
<para><computeroutput>object_start</computeroutput>: the parser read <computeroutput>{</computeroutput> and started to process a JSON object</para>
</listitem><listitem>
<para><computeroutput>key</computeroutput>: the parser read a key of a value in an object</para>
</listitem><listitem>
<para><computeroutput>object_end</computeroutput>: the parser read <computeroutput>}</computeroutput> and finished processing a JSON object</para>
</listitem><listitem>
<para><computeroutput>array_start</computeroutput>: the parser read <computeroutput>[</computeroutput> and started to process a JSON array</para>
</listitem><listitem>
<para><computeroutput>array_end</computeroutput>: the parser read <computeroutput>]</computeroutput> and finished processing a JSON array</para>
</listitem><listitem>
<para><computeroutput>value</computeroutput>: the parser finished reading a JSON value</para>
</listitem></itemizedlist>
</para>

<para></para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> for more information and examples </para>
</formalpara>
</para>
<para>
Definition at line 16715 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adf6340d9881839847d6b7423c5a85e50"/>    <section>
    <title>parser</title>
<indexterm><primary>parser</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parser</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1adf6340d9881839847d6b7423c5a85e50">nlohmann::basic_json::parser</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1parser">nlohmann::detail::parser</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15677 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999"/>    <section>
    <title>parser_callback_t</title>
<indexterm><primary>parser_callback_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parser_callback_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">nlohmann::basic_json::parser_callback_t</link> =  typename <link linkend="_classnlohmann_1_1detail_1_1parser_1ad250ad4f2b4af4a497e727c963162ff1">parser::parser_callback_t</link></computeroutput></para><para>

<para>per-element parser callback type </para>
</para>

<para>With a parser callback function, the result of parsing a JSON text can be influenced. When passed to <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link>, it is called on certain events (passed as <link linkend="_classnlohmann_1_1basic__json_1a4a4d5958eb47ab75530a3d5c68f6b88f">parse_event_t</link> via parameter <emphasis>event</emphasis>) with a set recursion depth <emphasis>depth</emphasis> and context JSON value <emphasis>parsed</emphasis>. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not.</para>

<para>We distinguish six scenarios (determined by the event type) in which the callback function can be called. The following table describes the values of the parameters <emphasis>depth</emphasis>, <emphasis>event</emphasis>, and <emphasis>parsed</emphasis>.</para>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>parameter <emphasis>event</emphasis>  </para>
</entry><entry>
<para>description </para>
</entry><entry>
<para>parameter <emphasis>depth</emphasis>  </para>
</entry><entry>
<para>parameter <emphasis>parsed</emphasis>   </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>parse_event_t::object_start </para>
</entry><entry>
<para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para>
</entry><entry>
<para>depth of the parent of the JSON object </para>
</entry><entry>
<para>a JSON value with type discarded  </para>
</entry></row>
      <row >
<entry>
<para>parse_event_t::key </para>
</entry><entry>
<para>the parser read a key of a value in an object </para>
</entry><entry>
<para>depth of the currently parsed JSON object </para>
</entry><entry>
<para>a JSON string containing the key  </para>
</entry></row>
      <row >
<entry>
<para>parse_event_t::object_end </para>
</entry><entry>
<para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para>
</entry><entry>
<para>depth of the parent of the JSON object </para>
</entry><entry>
<para>the parsed JSON object  </para>
</entry></row>
      <row >
<entry>
<para>parse_event_t::array_start </para>
</entry><entry>
<para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para>
</entry><entry>
<para>depth of the parent of the JSON array </para>
</entry><entry>
<para>a JSON value with type discarded  </para>
</entry></row>
      <row >
<entry>
<para>parse_event_t::array_end </para>
</entry><entry>
<para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para>
</entry><entry>
<para>depth of the parent of the JSON array </para>
</entry><entry>
<para>the parsed JSON array  </para>
</entry></row>
      <row >
<entry>
<para>parse_event_t::value </para>
</entry><entry>
<para>the parser finished reading a JSON value </para>
</entry><entry>
<para>depth of the value </para>
</entry><entry>
<para>the parsed JSON value  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para></para>

<para>Discarding a value (i.e., returning <computeroutput>false</computeroutput>) has different effects depending on the context in which function was called:</para>

<para><itemizedlist>
<listitem>
<para>Discarded values in structured types are skipped. That is, the parser will behave as if the discarded value was never read.</para>
</listitem><listitem>
<para>In case a value outside a structured type is skipped, it is replaced with <computeroutput>null</computeroutput>. This case happens if the top-level element is skipped.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>depth</entry>
                                <entry>
<para>the depth of the recursion during parsing</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>event</entry>
                                <entry>
<para>an event of type parse_event_t indicating the context in the callback function has been called</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>parsed</entry>
                                <entry>
<para>the current intermediate parse result; note that writing to this value has no effect for parse_event_t::key events</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Whether the JSON value which called the function during parsing should be kept (<computeroutput>true</computeroutput>) or not (<computeroutput>false</computeroutput>). In the latter case, it is either skipped completely or replaced by an empty discarded object.</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> for examples</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 16766 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb"/>    <section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>pointer</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb">nlohmann::basic_json::pointer</link> =  typename std::allocator_traits&lt;<link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link>&gt;::<link linkend="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb">pointer</link></computeroutput></para><para>

<para>the type of an element pointer </para>
</para>
<para>
Definition at line 15761 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa30cf01ce3b9e56bb1fc968b742c7f7d"/>    <section>
    <title>primitive_iterator_t</title>
<indexterm><primary>primitive_iterator_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>primitive_iterator_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1aa30cf01ce3b9e56bb1fc968b742c7f7d">nlohmann::basic_json::primitive_iterator_t</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1primitive__iterator__t">nlohmann::detail::primitive_iterator_t</link><computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15679 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831"/>    <section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>reference</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">nlohmann::basic_json::reference</link> =  <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">value_type</link>&amp;</computeroutput></para><para>

<para>the type of an element reference </para>
</para>
<para>
Definition at line 15748 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40"/>    <section>
    <title>reverse_iterator</title>
<indexterm><primary>reverse_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>reverse_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">nlohmann::basic_json::reverse_iterator</link> =  <link linkend="_classnlohmann_1_1basic__json_1a5fdcb32a5e3044728a46d6d270457f56">json_reverse_iterator</link>&lt;typename <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">basic_json::iterator</link>&gt;</computeroutput></para><para>

<para>a reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
<para>
Definition at line 15770 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4ace22e6a5e43b978768013612e6f0c5"/>    <section>
    <title>serializer</title>
<indexterm><primary>serializer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>serializer</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a4ace22e6a5e43b978768013612e6f0c5">nlohmann::basic_json::serializer</link> =  ::<link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15694 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b"/>    <section>
    <title>size_type</title>
<indexterm><primary>size_type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>size_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">nlohmann::basic_json::size_type</link> =  std::size_t</computeroutput></para><para>

<para>a type to represent container sizes </para>
</para>
<para>
Definition at line 15755 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7"/>    <section>
    <title>string_t</title>
<indexterm><primary>string_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>string_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">nlohmann::basic_json::string_t</link> =  StringType</computeroutput></para><para>

<para>a type for a string </para>
</para>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> describes JSON strings as follows: <blockquote>
<para>A string is a sequence of zero or more Unicode characters. </para>
</blockquote></para>

<para>To store objects in C++, a type is defined by the template parameter described below. Unicode values are split by the JSON class into byte-sized characters during deserialization.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>StringType</entry>
                                <entry>
<para>the container to store strings (e.g., <computeroutput>std::string</computeroutput>). Note this container is used for keys/names in objects, see <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md7">
<title>Default type</title>

<para>With the default values for <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), the default value for <emphasis>string_t</emphasis> is:</para>

<para><literallayout><computeroutput>std::string
</computeroutput></literallayout></para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md8">
<title>Encoding</title>

<para>Strings are stored in UTF-8 encoding. Therefore, functions like <computeroutput>std::string::size()</computeroutput> or <computeroutput>std::string::length()</computeroutput> return the number of bytes in the string rather than the number of characters or glyphs.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md9">
<title>String comparison</title>

<para><link xlink:href="http://rfc7159.net/rfc7159">RFC 7159</link> states: <blockquote>
<para>Software implementations are typically required to test names of object members for equality. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that <computeroutput>&quot;a\\b&quot;</computeroutput> and <computeroutput>&quot;a\u005Cb&quot;</computeroutput> are not equal. </para>
</blockquote></para>

<para>This implementation is interoperable as it does compare strings code unit by code unit.</para>
</section>
<section xml:id="_classnlohmann_1_1basic__json_1autotoc_md10">
<title>Storage</title>

<para>String values are stored as pointers in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type. That is, for any access to string values, a pointer of type <computeroutput>string_t*</computeroutput> must be dereferenced.</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<para>
Definition at line 16071 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52"/>    <section>
    <title>type_error</title>
<indexterm><primary>type_error</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>type_error</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a79473de577bb3f28ef0aa6e9f1571b52">nlohmann::basic_json::type_error</link> =  <link linkend="_classnlohmann_1_1detail_1_1type__error">detail::type_error</link></computeroutput></para><para>

<para>exception indicating executing a member function with a wrong type </para>
</para>

<para>This exception is thrown in case of a type error; that is, a library function is executed on a JSON value whose type does not match the expected semantics.</para>

<para>Exceptions have ids 3xx.</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>name / id </para>
</entry><entry>
<para>example message </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>json.exception.type_error.301 </para>
</entry><entry>
<para>cannot create object from initializer list </para>
</entry><entry>
<para>To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.302 </para>
</entry><entry>
<para>type must be object, but is array </para>
</entry><entry>
<para>During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.303 </para>
</entry><entry>
<para>incompatible ReferenceType for get_ref, actual type is object </para>
</entry><entry>
<para>To retrieve a reference to a value stored in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> object with <link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref</link>, the type of the reference must match the value type. For instance, for a JSON array, the <emphasis>ReferenceType</emphasis> must be <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> &amp;.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.304 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.305 </para>
</entry><entry>
<para>cannot use operator[] with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a05c86efa156004b090258c1469eab3fd">operator[]</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.306 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.307 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.308 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link> and <link linkend="_classnlohmann_1_1basic__json_1afe3c79845dc1dd2243724558859d7e4b">operator+=</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.309 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link> with </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.310 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link> with number </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.311 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1a58837bac1c40038dcb07f437a02735da">emplace_back()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a58837bac1c40038dcb07f437a02735da">emplace_back()</link> member function can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.312 </para>
</entry><entry>
<para>cannot use <link linkend="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85">update()</link> with string </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85">update()</link> member functions can only be executed for certain JSON types.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.313 </para>
</entry><entry>
<para>invalid value to unflatten </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten</link> function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.314 </para>
</entry><entry>
<para>only objects can be unflattened </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten</link> function only works for an object whose keys are JSON Pointers.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.315 </para>
</entry><entry>
<para>values in object must be primitive </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten</link> function only works for an object whose keys are JSON Pointers and whose values are primitive.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.316 </para>
</entry><entry>
<para>invalid UTF-8 byte at index 10: 0x7E </para>
</entry><entry>
<para>The <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump</link> function only works with UTF-8 encoded strings; that is, if you assign a <computeroutput>std::string</computeroutput> to a JSON value, make sure it is UTF-8 encoded.  </para>
</entry></row>
      <row >
<entry>
<para>json.exception.type_error.317 </para>
</entry><entry>
<para>JSON value cannot be serialized to requested format </para>
</entry><entry>
<para>The dynamic type of the object cannot be represented in the requested serialization format (e.g. a raw <computeroutput>true</computeroutput> or <computeroutput>null</computeroutput> JSON object cannot be serialized to BSON)  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>@liveexample{The following code shows how a <computeroutput>type_error</computeroutput> exception can be caught.,type_error}</para>

<para><formalpara><title>See also</title>

<para>- <link linkend="_classnlohmann_1_1basic__json_1ac00185487a16455dfdd53884f678040d">exception</link> for the base class of the library exceptions </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a3b1a24eaf07f81ee9cbf01e29cf8fb59">parse_error</link> for exceptions indicating a <link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse</link> error </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a5e6b5db267db5a283e770296f9e410a0">invalid_iterator</link> for exceptions indicating errors with iterators </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a2e8fc803a09152f3174470ea2375b383">out_of_range</link> for exceptions indicating access out of the defined range </para>

<para>- <link linkend="_classnlohmann_1_1basic__json_1a48d5c5750a7f3164653bd8d3e1e8c893">other_error</link> for exceptions indicating other library errors</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 15726 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1"/>    <section>
    <title>value_t</title>
<indexterm><primary>value_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value_t</secondary></indexterm>
<para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">nlohmann::basic_json::value_t</link> =  <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link></computeroutput></para><para>
Definition at line 15697 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf"/>    <section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json_1a3913219f58349e9be2cb8cc6ddfb3abf">nlohmann::basic_json::value_type</link> =  <link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput></para><para>

<para>the type of elements in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
<para>
Definition at line 15745 of file json.hpp.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad886f4baa2efb7ac6b0ca70dc72f3d18"/>    <section>
    <title>basic_json()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create an empty value with a given type </para>
</para>

<para>Create an empty JSON value with a given type. The value will be default initialized with an empty value which depends on the type:</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>initial value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>&quot;&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>0</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><computeroutput>{}</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><computeroutput>[]</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para>empty array  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>v</entry>
                                <entry>
<para>the type of the value to create</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The following code shows the constructor for different <link linkend="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1">value_t</link> values,basic_json__value_t}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a680c6cbaca83984fd7a5dd7496f86594">clear()</link> &#8211; restores the postcondition of this constructor</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 16807 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9126e2860908bc6aa34da0063863070e"/>    <section>
    <title>basic_json()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (std::nullptr_t  = <computeroutput>nullptr</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>create a null object </para>
</para>

<para>Create a <computeroutput>null</computeroutput> JSON value. It either takes a null pointer as parameter (explicitly creating <computeroutput>null</computeroutput>) or no parameter (implicitly creating <computeroutput>null</computeroutput>). The passed null pointer itself is not read &#8211; it is only used to choose the right constructor.</para>

<para>@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this constructor never throws exceptions.</para>

<para>@liveexample{The following code shows the constructor with and without a null pointer parameter.,basic_json__nullptr_t}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 16831 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6365d9b23fd9c554d9fc89121c4df4d0"/>    <section>
    <title>basic_json()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, detail::enable_if_t&lt; not detail::is_basic_json&lt; U &gt;::value and detail::is_compatible_type&lt; basic_json_t, U &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>nlohmann::basic_json::basic_json (CompatibleType &amp;&amp; val)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>create a JSON value </para>
</para>

<para>This is a &quot;catch all&quot; constructor for all compatible JSON types; that is, types for which a <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> method exists. The constructor forwards the parameter <emphasis>val</emphasis> to that method (to <computeroutput>json_serializer&lt;U&gt;::to_json</computeroutput> method with <computeroutput>U = uncvref_t&lt;CompatibleType&gt;</computeroutput>, to be exact).</para>

<para>Template type <emphasis>CompatibleType</emphasis> includes, but is not limited to, the following types:<itemizedlist>
<listitem>
<para><emphasis role="bold">arrays</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> and all kinds of compatible containers such as <computeroutput>std::vector</computeroutput>, <computeroutput>std::deque</computeroutput>, <computeroutput>std::list</computeroutput>, <computeroutput>std::forward_list</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, <computeroutput>std::set</computeroutput>, <computeroutput>std::unordered_set</computeroutput>, <computeroutput>std::multiset</computeroutput>, and <computeroutput>std::unordered_multiset</computeroutput> with a <computeroutput>value_type</computeroutput> from which a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> value can be constructed.</para>
</listitem><listitem>
<para><emphasis role="bold">objects</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> and all kinds of compatible associative containers such as <computeroutput>std::map</computeroutput>, <computeroutput>std::unordered_map</computeroutput>, <computeroutput>std::multimap</computeroutput>, and <computeroutput>std::unordered_multimap</computeroutput> with a <computeroutput>key_type</computeroutput> compatible to <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> and a <computeroutput>value_type</computeroutput> from which a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> value can be constructed.</para>
</listitem><listitem>
<para><emphasis role="bold">strings</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, string literals, and all compatible string containers can be used.</para>
</listitem><listitem>
<para><emphasis role="bold">numbers</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>, and all convertible number types such as <computeroutput>int</computeroutput>, <computeroutput>size_t</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>float</computeroutput> or <computeroutput>double</computeroutput> can be used.</para>
</listitem><listitem>
<para><emphasis role="bold">boolean</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> / <computeroutput>bool</computeroutput> can be used.</para>
</listitem><listitem>
<para><emphasis role="bold">binary</emphasis>: <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> / <computeroutput>std::vector&lt;uint8_t&gt;</computeroutput> may be used, unfortunately because string literals cannot be distinguished from binary character arrays by the C++ type system, all types compatible with <computeroutput>const char*</computeroutput> will be directed to the string constructor instead. This is both for backwards compatibility, and due to the fact that a binary type is not a standard JSON type.</para>
</listitem></itemizedlist>
</para>

<para>See the examples below.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>CompatibleType</entry>
                                <entry>
<para>a type such that:<itemizedlist>
<listitem>
<para><emphasis>CompatibleType</emphasis> is not derived from <computeroutput>std::istream</computeroutput>,</para>
</listitem><listitem>
<para><emphasis>CompatibleType</emphasis> is not <link linkend="_classnlohmann_1_1basic__json">basic_json</link> (to avoid hijacking copy/move constructors),</para>
</listitem><listitem>
<para><emphasis>CompatibleType</emphasis> is not a different <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type (i.e. with different template arguments)</para>
</listitem><listitem>
<para><emphasis>CompatibleType</emphasis> is not a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nested type (e.g., <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>, <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link>, etc ...)</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer</link> has a <computeroutput>to_json(basic_json_t&amp;, CompatibleType&amp;&amp;)</computeroutput> method</para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                            <row>
                                <entry>U</entry>
                                <entry>
<para>= <computeroutput>uncvref_t&lt;CompatibleType&gt;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to be forwarded to the respective constructor</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Usually linear in the size of the passed <emphasis>val</emphasis>, also depending on the implementation of the called <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> method.</para>

<para>@exceptionsafety Depends on the called constructor. For types directly supported by the library (i.e., all types for which no <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The following code shows the constructor with several compatible types.,basic_json__CompatibleType}</para>

<para><formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 16904 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad0cf7682c00f137bec6a5a680a80dc6e"/>    <section>
    <title>basic_json()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , detail::enable_if_t&lt; detail::is_basic_json&lt; BasicJsonType &gt;::value and not std::is_same&lt; basic_json, BasicJsonType &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>nlohmann::basic_json::basic_json (const BasicJsonType &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an existing one </para>
</para>

<para>This is a constructor for existing <link linkend="_classnlohmann_1_1basic__json">basic_json</link> types. It does not hijack copy/move constructors, since the parameter has different template arguments than the current ones.</para>

<para>The constructor tries to convert the internal <link linkend="_classnlohmann_1_1basic__json_1a19622cd7064559888959fe0ef3882bea">m_value</link> of the parameter.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>BasicJsonType</entry>
                                <entry>
<para>a type such that:<itemizedlist>
<listitem>
<para><emphasis>BasicJsonType</emphasis> is a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type.</para>
</listitem><listitem>
<para><emphasis>BasicJsonType</emphasis> has different template arguments than <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link>.</para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> value to be converted.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Usually linear in the size of the passed <emphasis>val</emphasis>, also depending on the implementation of the called <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> method.</para>

<para>@exceptionsafety Depends on the called constructor. For types directly supported by the library (i.e., all types for which no <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json()</link></computeroutput> function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value.</para>

<para><formalpara><title>Since</title>

<para>version 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 16941 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9"/>    <section>
    <title>basic_json()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init, bool type_deduction = <computeroutput>true</computeroutput>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> manual_type = <computeroutput><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create a container (array or object) from an initializer list </para>
</para>

<para>Creates a JSON value of type array or object from the passed initializer list <emphasis>init</emphasis>. In case <emphasis>type_deduction</emphasis> is <computeroutput>true</computeroutput> (default), the type of the JSON value to be created is deducted from the initializer list <emphasis>init</emphasis> according to the following rules:</para>

<para><orderedlist>
<listitem>
<para>If the list is empty, an empty JSON object value <computeroutput>{}</computeroutput> is created.</para>
</listitem><listitem>
<para>If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values.</para>
</listitem><listitem>
<para>In all other cases, an array is created.</para>
</listitem></orderedlist>
</para>

<para>The rules aim to create the best fit between a C++ initializer list and JSON values. The rationale is as follows:</para>

<para><orderedlist>
<listitem>
<para>The empty initializer list is written as <computeroutput>{}</computeroutput> which is exactly an empty JSON object.</para>
</listitem><listitem>
<para>C++ has no way of describing mapped types other than to list a list of pairs. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object.</para>
</listitem><listitem>
<para>In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe.</para>
</listitem></orderedlist>
</para>

<para>With the rules described above, the following JSON values cannot be expressed by an initializer list:</para>

<para><itemizedlist>
<listitem>
<para>the empty array (<computeroutput>[]</computeroutput>): use <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link> with an empty initializer list in this case</para>
</listitem><listitem>
<para>arrays whose elements satisfy rule 2: use <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link> with the same initializer list in this case</para>
</listitem></itemizedlist>
</para>

<para><note><title>Note</title>

<para>When used without parentheses around an empty initializer list, <link linkend="_classnlohmann_1_1basic__json_1ad886f4baa2efb7ac6b0ca70dc72f3d18">basic_json()</link> is called instead of this function, yielding the JSON null value.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para>initializer list with JSON values</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>type_deduction</entry>
                                <entry>
<para>internal parameter; when set to <computeroutput>true</computeroutput>, the type of the JSON value is deducted from the initializer list <emphasis>init</emphasis>; when set to <computeroutput>false</computeroutput>, the type provided via <emphasis>manual_type</emphasis> is forced. This mode is used by the functions <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link> and <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object(initializer_list_t)</link>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>manual_type</entry>
                                <entry>
<para>internal parameter; when <emphasis>type_deduction</emphasis> is set to <computeroutput>false</computeroutput>, the created JSON value will use the provided type (only <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link> and <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link> are valid); when <emphasis>type_deduction</emphasis> is set to <computeroutput>true</computeroutput>, this parameter has no effect</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.301</entry>
                                <entry>
<para>if <emphasis>type_deduction</emphasis> is <computeroutput>false</computeroutput>, <emphasis>manual_type</emphasis> is <computeroutput><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link></computeroutput>, but <emphasis>init</emphasis> contains an element which is not a pair whose first element is a string. In this case, the constructor could not create an object. If <emphasis>type_deduction</emphasis> would have be <computeroutput>true</computeroutput>, an array would have been created. See <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object(initializer_list_t)</link> for an example.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the initializer list <emphasis>init</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The example below shows how JSON values are created from initializer lists.,basic_json__list_init_t}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object(initializer_list_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17064 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aacff7cb1f9097fcb1f8f97d401220ac0"/>    <section>
    <title>basic_json()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>construct an array with count copies of given value </para>
</para>

<para>Constructs a JSON array value by creating <emphasis>cnt</emphasis> copies of a passed value. In case <emphasis>cnt</emphasis> is <computeroutput>0</computeroutput>, an empty array is created.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>cnt</entry>
                                <entry>
<para>the number of JSON copies of <emphasis>val</emphasis> to create </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the JSON value to copy</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Postcondition</title>

<para><computeroutput>std::distance(<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link>,<link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>) == cnt</computeroutput> holds.</para>
</formalpara>
@complexity Linear in <emphasis>cnt</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The following code shows examples for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link>(size_type\, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;) constructor.,basic_json__size_type_basic_json}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17297 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3fb693444043639e08ff7be62410b137"/>    <section>
    <title>basic_json()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::value or std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>nlohmann::basic_json::basic_json (InputIT first, InputIT last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>construct a JSON container given an iterator range </para>
</para>

<para>Constructs the JSON value with the contents of the range <computeroutput>[first, last)</computeroutput>. The semantics depends on the different types a JSON value can have:<itemizedlist>
<listitem>
<para>In case of a null type, invalid_iterator.206 is thrown.</para>
</listitem><listitem>
<para>In case of other primitive types (number, boolean, or string), <emphasis>first</emphasis> must be <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput> and <emphasis>last</emphasis> must be <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>. In this case, the value is copied. Otherwise, invalid_iterator.204 is thrown.</para>
</listitem><listitem>
<para>In case of structured types (array, object), the constructor behaves as similar versions for <computeroutput>std::vector</computeroutput> or <computeroutput>std::map</computeroutput>; that is, a JSON array or object is constructed from the values in the range.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>InputIT</entry>
                                <entry>
<para>an input iterator type (<link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> or <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link>)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>begin of the range to copy from (included) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>end of the range to copy from (excluded)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>Iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> must be initialized. <emphasis role="bold">This precondition is enforced with an assertion (see warning).</emphasis> If assertions are switched off, a violation of this precondition yields undefined behavior.</para>

<para>Range <computeroutput>[first, last)</computeroutput> is valid. Usually, this precondition cannot be checked efficiently. Only certain edge cases are detected; see the description of the exceptions below. A violation of this precondition yields undefined behavior.</para>
</formalpara>
<warning><title>Warning</title>

<para>A precondition is enforced with a runtime assertion that will result in calling <computeroutput>std::abort</computeroutput> if this precondition is not met. Assertions can be disabled by defining <computeroutput>NDEBUG</computeroutput> at compile time. See <link xlink:href="https://en.cppreference.com/w/cpp/error/assert">https://en.cppreference.com/w/cpp/error/assert</link> for more information.</para>
</warning>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>invalid_iterator.201</entry>
                                <entry>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> are not compatible (i.e., do not belong to the same JSON value). In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.204</entry>
                                <entry>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a primitive type (number, boolean, or string), but <emphasis>first</emphasis> does not point to the first element any more. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. See example code below. </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.206</entry>
                                <entry>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a null value. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The example below shows several ways to create JSON values by specifying a subrange with iterators.,basic_json__InputIt_InputIt}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17362 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9b3c3c9ea1a0530f515d5be9ae77022c"/>    <section>
    <title>basic_json()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;typename JsonRef , detail::enable_if_t&lt; detail::conjunction&lt; detail::is_json_ref&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, basic_json &gt;&gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>nlohmann::basic_json::basic_json (const JsonRef &amp; ref)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line 17466 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af21eb13ca205fb51e267e6f7ee269229"/>    <section>
    <title>basic_json()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>copy constructor </para>
</para>

<para>Creates a copy of a given JSON value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>the JSON value to copy</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Postcondition</title>

<para><computeroutput>*this == other</computeroutput></para>
</formalpara>
@complexity Linear in the size of <emphasis>other</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is linear.</para>
</listitem><listitem>
<para>As postcondition, it holds: <computeroutput>other == basic_json(other)</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for the copy constructor.,basic_json__basic_json}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17493 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a758a9350d03d6eb90a9cb0bf4653d286"/>    <section>
    <title>basic_json()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::basic_json (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>move constructor </para>
</para>

<para>Move constructor. Constructs a JSON value with the contents of the given value <emphasis>other</emphasis> using move semantics. It &quot;steals&quot; the resources from <emphasis>other</emphasis> and leaves it as JSON null value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>other</entry>
                                <entry>
<para>value to move to this object</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Postcondition</title>

<para><computeroutput>*this</computeroutput> has the same value as <emphasis>other</emphasis> before the call. </para>

<para><emphasis>other</emphasis> is a JSON null value.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this constructor never throws exceptions.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/MoveConstructible">MoveConstructible</link> requirements.</para>

<para>@liveexample{The code below shows the move constructor explicitly called via std::move.,basic_json__moveconstructor}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17582 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7d35fcb7c72f755a30ae433e58083eca"/>    <section>
    <title>~basic_json()</title>
<indexterm><primary>~basic_json</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>~basic_json</secondary></indexterm>
<para><computeroutput>nlohmann::basic_json::~basic_json ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>destructor </para>
</para>

<para>Destroys the JSON value and frees all allocated memory.</para>

<para>@complexity Linear.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is linear.</para>
</listitem><listitem>
<para>All stored elements are destroyed and all memory is freed.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17652 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2292a18355f7095fbfdbc98ba79d345b"/>    <section>
    <title>accept()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>accept</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>accept</secondary></indexterm>
<para><computeroutput>static bool nlohmann::basic_json::accept (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22103 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a1eeba1043ffc896a27a242b7de2a58d5"/>    <section>
    <title>accept()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>accept</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>accept</secondary></indexterm>
<computeroutput>template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>static bool nlohmann::basic_json::accept (IteratorType first, IteratorType last)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22238 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9"/>    <section>
    <title>array()</title>
<indexterm><primary>array</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>array</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::array (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create an array from an initializer list </para>
</para>

<para>Creates a JSON array value from a given initializer list. That is, given a list of values <computeroutput>a, b, c</computeroutput>, creates the JSON value <computeroutput>[a, b, c]</computeroutput>. If the initializer list is empty, the empty array <computeroutput>[]</computeroutput> is created.</para>

<para><note><title>Note</title>

<para>This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (<link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json(initializer_list_t, bool, value_t)</link>). These cases are:<orderedlist>
<listitem>
<para>creating an array whose elements are all pairs whose first element is a string &#8211; in this case, the initializer list constructor would create an object, taking the first elements as keys</para>
</listitem><listitem>
<para>creating an empty array &#8211; passing the empty initializer list to the initializer list constructor yields an empty object</para>
</listitem></orderedlist>
</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para>initializer list with JSON values to create an array from (optional)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>JSON array value</para>
</formalpara>
@complexity Linear in the size of <emphasis>init</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The following code shows an example for the <computeroutput>array</computeroutput> function.,array}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json(initializer_list_t, bool, value_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object(initializer_list_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17226 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aebf93a806247231640c785fbc6985d10"/>    <section>
    <title>assert_invariant()</title>
<indexterm><primary>assert_invariant</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>assert_invariant</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::assert_invariant ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>checks the class invariants </para>
</para>

<para>This function asserts the class invariants. It needs to be called at the end of every constructor to make sure that created objects respect the invariant. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between <emphasis>m_type</emphasis> and <emphasis>m_value</emphasis>. </para>
<para>
Definition at line 16688 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac07f0518ba7a3af394d37d86753a9845"/>    <section>
    <title>at()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::at (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para>Returns a reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>JSON pointer to the desired element</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element pointed to by <emphasis>ptr</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.106</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.109</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.402</entry>
                                <entry>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.403</entry>
                                <entry>
<para>if the JSON pointer describes a key of an object which cannot be found. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.404</entry>
                                <entry>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 2.0.0</para>
</formalpara>
@liveexample{The behavior is shown in the example.,at_json_pointer} </para>
<para>
Definition at line 23313 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a92a2e5bde3f9a1a548b367114e4794f1"/>    <section>
    <title>at()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::at (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para>Returns a const reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>JSON pointer to the desired element</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element pointed to by <emphasis>ptr</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.106</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.109</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.402</entry>
                                <entry>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.403</entry>
                                <entry>
<para>if the JSON pointer describes a key of an object which cannot be found. See example below.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.404</entry>
                                <entry>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 2.0.0</para>
</formalpara>
@liveexample{The behavior is shown in the example.,at_json_pointer_const} </para>
<para>
Definition at line 23356 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57"/>    <section>
    <title>at()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::at (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.304</entry>
                                <entry>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.403</entry>
                                <entry>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Logarithmic in the size of the container.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp;)</link> for unchecked access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
@liveexample{The example below shows how object elements can be read and written using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link></computeroutput>. It also demonstrates the different exceptions that can be thrown.,at__object_t_key_type} </para>
<para>
Definition at line 18806 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5ca85574718e7fde0a3113775c3023c8"/>    <section>
    <title>at()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::at (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.304</entry>
                                <entry>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.403</entry>
                                <entry>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Logarithmic in the size of the container.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp;)</link> for unchecked access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
@liveexample{The example below shows how object elements can be read using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link></computeroutput>. It also demonstrates the different exceptions that can be thrown., at__object_t_key_type_const} </para>
<para>
Definition at line 18857 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2"/>    <section>
    <title>at()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::at (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element with bounds checking </para>
</para>

<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>index of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element at index <emphasis>idx</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.304</entry>
                                <entry>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
@liveexample{The example below shows how array elements can be read and written using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link></computeroutput>. It also demonstrates the different exceptions that can be thrown.,at__size_type} </para>
<para>
Definition at line 18708 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a2204de84d420ad31b29488641815f90e"/>    <section>
    <title>at()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::at (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element with bounds checking </para>
</para>

<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>index of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element at index <emphasis>idx</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.304</entry>
                                <entry>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
@liveexample{The example below shows how array elements can be read using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at()</link></computeroutput>. It also demonstrates the different exceptions that can be thrown., at__size_type_const} </para>
<para>
Definition at line 18755 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830"/>    <section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::back ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the last element </para>
</para>

<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <literallayout><computeroutput>auto&#32;tmp&#32;=&#32;c.end();
--tmp;
return&#32;*tmp;
</computeroutput></literallayout></para>

<para><formalpara><title>Returns</title>

<para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para>
</formalpara>
@complexity Constant.</para>

<para><formalpara><title>Precondition</title>

<para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <emphasis role="bold">guarded by assertions</emphasis>). </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The JSON value remains unchanged.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>invalid_iterator.214</entry>
                                <entry>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830">back()</link></computeroutput>.,back}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c">front()</link> &#8211; access the first element</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19476 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3b1077520ab6c8682a9039fcc2a50b5d"/>    <section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>back</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::back ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the last element </para>
</para>

<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <literallayout><computeroutput>auto&#32;tmp&#32;=&#32;c.end();
--tmp;
return&#32;*tmp;
</computeroutput></literallayout></para>

<para><formalpara><title>Returns</title>

<para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para>
</formalpara>
@complexity Constant.</para>

<para><formalpara><title>Precondition</title>

<para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <emphasis role="bold">guarded by assertions</emphasis>). </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The JSON value remains unchanged.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>invalid_iterator.214</entry>
                                <entry>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830">back()</link></computeroutput>.,back}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c">front()</link> &#8211; access the first element</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19486 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aeb76c192095f808283822c8401d2a3a1"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> nlohmann::basic_json::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const iterator to the first element </para>
</para>

<para>Returns a const iterator to the first element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>const iterator to the first element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link></computeroutput>.,cbegin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20003 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the first element </para>
</para>

<para>Returns an iterator to the first element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>iterator to the first element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>.,begin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19993 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a53b49467488b240d28fc33e454129d86"/>    <section>
    <title>binary_array()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>binary_array</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>binary_array</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::binary_array (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> &amp;&amp; init)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array from an already constructed rvalue copy of its base type </para>
</para>

<para>Creates a JSON binary array value from a given <computeroutput>binary_t</computeroutput>. Binary values are part of various binary formats, such as CBOR, MsgPack, and BSON. And this constructor is used to create a value for serialization to those formats.</para>

<para><note><title>Note</title>

<para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it doesn&apos;t happen on accident.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para><computeroutput>binary_t</computeroutput> with JSON values to create a binary array from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>JSON binary array value</para>
</formalpara>
@complexity Linear in the size of <emphasis>init</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para><formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 17180 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a92f3b05fee32f8f7a98fd1434086aaf7"/>    <section>
    <title>binary_array()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>binary_array</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>binary_array</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::binary_array (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> const &amp; init)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array from an already constructed copy of its base type </para>
</para>

<para>Creates a JSON binary array value from a given <computeroutput>binary_t</computeroutput>. Binary values are part of various binary formats, such as CBOR, MsgPack, and BSON. And this constructor is used to create a value for serialization to those formats.</para>

<para><note><title>Note</title>

<para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it does not happen on accident.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para><computeroutput>binary_t</computeroutput> with JSON values to create a binary array from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>JSON binary array value</para>
</formalpara>
@complexity Linear in the size of <emphasis>init</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para><formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 17144 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090"/>    <section>
    <title>cbegin()</title>
<indexterm><primary>cbegin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> nlohmann::basic_json::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const iterator to the first element </para>
</para>

<para>Returns a const iterator to the first element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>const iterator to the first element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link></computeroutput>.,cbegin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20033 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f"/>    <section>
    <title>cend()</title>
<indexterm><primary>cend</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> nlohmann::basic_json::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const iterator to one past the last element </para>
</para>

<para>Returns a const iterator to one past the last element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>const iterator one past the last element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link></computeroutput>.,cend}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20104 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a680c6cbaca83984fd7a5dd7496f86594"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::clear ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>clears the contents </para>
</para>

<para>Clears the content of a JSON value and resets it to the default value as if <link linkend="_classnlohmann_1_1basic__json_1ad886f4baa2efb7ac6b0ca70dc72f3d18">basic_json(value_t)</link> would have been called with the current value type from <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type()</link>:</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>initial value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>&quot;&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>0</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para>An empty byte vector  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><computeroutput>{}</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><computeroutput>[]</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><formalpara><title>Postcondition</title>

<para>Has the same effect as calling <literallayout><computeroutput>*this&#32;=&#32;basic_json(type());
</computeroutput></literallayout></para>
</formalpara>
@liveexample{The example below shows the effect of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a680c6cbaca83984fd7a5dd7496f86594">clear()</link></computeroutput> to different JSON types.,clear}</para>

<para>@complexity Linear in the size of the JSON value.</para>

<para>@iterators All iterators, pointers and references related to this container are invalidated.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ad886f4baa2efb7ac6b0ca70dc72f3d18">basic_json(value_t)</link> &#8211; constructor that creates an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> with the same <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> than calling <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a680c6cbaca83984fd7a5dd7496f86594">clear()</link></computeroutput></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20658 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa2bb73931f8cdc113b1cec81412ee89d"/>    <section>
    <title>clear_subtype()</title>
<indexterm><primary>clear_subtype</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>clear_subtype</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::clear_subtype ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>clears the binary subtype </para>
</para>

<para>Clears the binary subtype of the JSON value, also flags a binary JSON value as not having a subtype, which has implications for serialization to msgpack (will prefer bin file formats over ext). If the JSON value is not a binary value, this function does nothing.</para>

<para>@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a76e6ed5e2b067e8fc0f50fbc1fce0c52">get_subtype()</link> &#8211; return the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa59cc57a1ea36eb2d24d16308a2baba2">set_subtype()</link> &#8211; sets the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a002aa4e75d86a8beef332cf3a1c84d92">has_subtype()</link> &#8211; returns whether or not the binary <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> has a subtype</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 19375 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af700bb8239390cf462126f0c96606fae"/>    <section>
    <title>contains()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>contains</secondary></indexterm>
<para><computeroutput>bool nlohmann::basic_json::contains (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>check the existence of an element in a JSON object given a JSON pointer </para>
</para>

<para>Check whether the given JSON pointer <emphasis>ptr</emphasis> can be resolved in the current JSON value.</para>

<para><note><title>Note</title>

<para>This method can be executed on any JSON value type.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>JSON pointer to check its existence.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the JSON pointer can be resolved to a stored value, false otherwise.</para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>If <computeroutput>j.contains(ptr)</computeroutput> returns true, it is safe to call <computeroutput>j[ptr]</computeroutput>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.106</entry>
                                <entry>
<para>if an array index begins with &apos;0&apos; </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.109</entry>
                                <entry>
<para>if an array index was not a number</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the JSON object.</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains()</link></computeroutput>.,contains_json_pointer}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains(KeyT &amp;&amp;) const</link> &#8211; checks the existence of a key</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.7.0 </para>
</formalpara>
</para>
<para>
Definition at line 19954 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766"/>    <section>
    <title>contains()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;typename KeyT , typename std::enable_if&lt; not std::is_same&lt; typename std::decay&lt; KeyT &gt;::type, json_pointer &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool nlohmann::basic_json::contains (KeyT &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>check the existence of an element in a JSON object </para>
</para>

<para>Check whether an element exists in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, false is returned.</para>

<para><note><title>Note</title>

<para>This method always returns false when executed on a JSON type that is not an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key value to check its existence.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if an element with specified <emphasis>key</emphasis> exists. If no such element with such key is found or the JSON value is not an object, false is returned.</para>
</formalpara>
@complexity Logarithmic in the size of the JSON object.</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains()</link></computeroutput>.,contains}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1af4167275baa0b2da76cdc89b1117c300">find(KeyT&amp;&amp;)</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> element </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af700bb8239390cf462126f0c96606fae">contains(const json_pointer&amp;) const</link> &#8211; checks the existence for a JSON <link linkend="_classnlohmann_1_1basic__json_1a4ac83a20750a2bfacbf9d30f3e51c3bb">pointer</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.6.0 </para>
</formalpara>
</para>
<para>
Definition at line 19923 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a369cf24de07945494df32e8b61e47917"/>    <section>
    <title>count()</title>
<indexterm><primary>count</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;typename KeyT &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> nlohmann::basic_json::count (KeyT &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the number of occurrences of a key in a JSON object </para>
</para>

<para>Returns the number of elements with key <emphasis>key</emphasis>. If ObjectType is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para>

<para><note><title>Note</title>

<para>This method always returns <computeroutput>0</computeroutput> when executed on a JSON type that is not an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key value of the element to count</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements with key <emphasis>key</emphasis>. If the JSON value is not an object, the return value will be <computeroutput>0</computeroutput>.</para>
</formalpara>
@complexity Logarithmic in the size of the JSON object.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a369cf24de07945494df32e8b61e47917">count()</link></computeroutput> is used.,count}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19890 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5"/>    <section>
    <title>crbegin()</title>
<indexterm><primary>crbegin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>crbegin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> nlohmann::basic_json::crbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to the last element </para>
</para>

<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link></computeroutput>.,crbegin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20208 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1"/>    <section>
    <title>create()</title>
<indexterm><primary>create</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>create</secondary></indexterm>
<computeroutput>template&lt;typename T , typename... Args&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> T* nlohmann::basic_json::create (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>helper for exception-safe object creation </para>
</para>
<para>
Definition at line 16396 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6"/>    <section>
    <title>crend()</title>
<indexterm><primary>crend</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>crend</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> nlohmann::basic_json::crend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to one before the first </para>
</para>

<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link></computeroutput>.,crend}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20237 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac8305b8912441b11af77564542e6d93e"/>    <section>
    <title>diff()</title>
<indexterm><primary>diff</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>diff</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::diff (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; source, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; target, const std::string &amp; path = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>creates a diff as a JSON patch </para>
</para>

<para>Creates a <link xlink:href="http://jsonpatch.com">JSON Patch</link> so that value <emphasis>source</emphasis> can be changed into the value <emphasis>target</emphasis> by calling <link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> function.</para>

<para><formalpara><title>Invariant</title>

<para>For two JSON values <emphasis>source</emphasis> and <emphasis>target</emphasis>, the following code yields always <computeroutput>true</computeroutput>: <literallayout><computeroutput>source.patch(diff(source,&#32;target))&#32;==&#32;target;
</computeroutput></literallayout></para>
</formalpara>
<note><title>Note</title>

<para>Currently, only <computeroutput>remove</computeroutput>, <computeroutput>add</computeroutput>, and <computeroutput>replace</computeroutput> operations are generated.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>source</entry>
                                <entry>
<para>JSON value to compare from </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>target</entry>
                                <entry>
<para>JSON value to compare against </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>path</entry>
                                <entry>
<para>helper value to create JSON pointers</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a JSON patch to convert the <emphasis>source</emphasis> to <emphasis>target</emphasis> </para>
</formalpara>
@complexity Linear in the lengths of <emphasis>source</emphasis> and <emphasis>target</emphasis>.</para>

<para>@liveexample{The following code shows how a JSON patch is created as a diff for two JSON values.,diff}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> &#8211; apply a JSON <link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab68414151f2f3347a71c7a9984f1d72d">merge_patch</link> &#8211; apply a JSON Merge Patch</para>

<para><link xlink:href="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23777 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>dump</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> nlohmann::basic_json::dump (const int indent = <computeroutput>-1</computeroutput>
, const char indent_char = <computeroutput>&apos; &apos;</computeroutput>
, const bool ensure_ascii = <computeroutput>false</computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler = <computeroutput>error_handler_t::strict</computeroutput>
, const bool serialize_binary = <computeroutput>false</computeroutput>
) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>serialization </para>
</para>

<para>Serialization function for JSON values. The function tries to mimic Python&apos;s <computeroutput>json.dumps()</computeroutput> function, and currently supports its <emphasis>indent</emphasis> and <emphasis>ensure_ascii</emphasis> parameters.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>indent</entry>
                                <entry>
<para>If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level. An indent level of <computeroutput>0</computeroutput> will only insert newlines. <computeroutput>-1</computeroutput> (the default) selects the most compact representation. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>indent_char</entry>
                                <entry>
<para>The character to use for indentation if <emphasis>indent</emphasis> is greater than <computeroutput>0</computeroutput>. The default is (space). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ensure_ascii</entry>
                                <entry>
<para>If <emphasis>ensure_ascii</emphasis> is true, all non-ASCII characters in the output are escaped with <computeroutput>\uXXXX</computeroutput> sequences, and the result consists of ASCII characters only. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>error_handler</entry>
                                <entry>
<para>how to react on decoding errors; there are three possible values: <computeroutput>strict</computeroutput> (throws and exception in case a decoding error occurs; default), <computeroutput>replace</computeroutput> (replace invalid UTF-8 sequences with U+FFFD), and <computeroutput>ignore</computeroutput> (ignore invalid UTF-8 sequences during serialization). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>serialize_binary</entry>
                                <entry>
<para>Whether or not to allow serialization of binary types to JSON. Because binary types are non-standard, this will produce non-conformant JSON, and is disabled by default. This flag is primarily useful for debugging. Will output the binary value as a list of 8-bit numbers prefixed by &quot;b&quot; (e.g. &quot;bindata&quot; = b[3, 0, 42, 255]).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>string containing the serialization of the JSON value</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.316</entry>
                                <entry>
<para>if a string stored inside the JSON value is not UTF-8 encoded</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@liveexample{The following example shows the effect of different <emphasis>indent\</emphasis>, <emphasis>indent_char\</emphasis>, and <emphasis>ensure_ascii</emphasis> parameters to the result of the serialization.,dump}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://docs.python.org/2/library/json.html#json.dump">https://docs.python.org/2/library/json.html#json.dump</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0; indentation character <emphasis>indent_char</emphasis>, option <emphasis>ensure_ascii</emphasis> and exceptions added in version 3.0.0; error handlers added in version 3.4.0. </para>
</formalpara>
</para>
<para>
Definition at line 17715 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae3866ccade11e7b73902169714363f21"/>    <section>
    <title>emplace()</title>
<indexterm><primary>emplace</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>emplace</secondary></indexterm>
<computeroutput>template&lt;class... Args&gt; </computeroutput><para><computeroutput>std::pair&lt;<link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link>, bool&gt; nlohmann::basic_json::emplace (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object if key does not exist </para>
</para>

<para>Inserts a new element into a JSON object constructed in-place with the given <emphasis>args</emphasis> if there is no element with the key in the container. If the function is called on a JSON null value, an empty object is created before appending the value created from <emphasis>args</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>args</entry>
                                <entry>
<para>arguments to forward to a constructor of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>Args</entry>
                                <entry>
<para>compatible types to create a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> object</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.311</entry>
                                <entry>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use emplace() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container, O(log(<computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)).</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae3866ccade11e7b73902169714363f21">emplace()</link></computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object. Further note how no value is added if there was already one value stored with the same key.,emplace}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.8 </para>
</formalpara>
</para>
<para>
Definition at line 20976 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a58837bac1c40038dcb07f437a02735da"/>    <section>
    <title>emplace_back()</title>
<indexterm><primary>emplace_back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>emplace_back</secondary></indexterm>
<computeroutput>template&lt;class... Args&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::emplace_back (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para>Creates a JSON value from the passed parameters <emphasis>args</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending the value created from <emphasis>args</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>args</entry>
                                <entry>
<para>arguments to forward to a constructor of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>Args</entry>
                                <entry>
<para>compatible types to create a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> object</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the inserted element</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.311</entry>
                                <entry>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use emplace_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Amortized constant.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,emplace_back}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.8, returns reference since 3.7.0 </para>
</formalpara>
</para>
<para>
Definition at line 20923 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae"/>    <section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>empty</secondary></indexterm>
<para><computeroutput>bool nlohmann::basic_json::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>checks whether the container is empty. </para>
</para>

<para>Checks if a JSON value has no elements (i.e. whether its <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size</link> is <computeroutput>0</computeroutput>).</para>

<para><formalpara><title>Returns</title>

<para>The return value depends on the different types and is defined as follows: <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>return value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>true</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><computeroutput>false</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para>result of function <computeroutput>object_t::empty()</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>result of function <computeroutput>array_t::empty()</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@liveexample{The following code uses <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae">empty()</link></computeroutput> to check if a JSON object contains any elements.,empty}</para>

<para>@complexity Constant, as long as <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> and <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> satisfy the Container concept; that is, their <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae">empty()</link></computeroutput> functions have constant complexity.</para>

<para>@iterators No changes.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para><note><title>Note</title>

<para>This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string.</para>
</note>
@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> == <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> &#8211; returns the number of elements</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20443 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a94522e3b348ef50d9c212121b3478ee1"/>    <section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> nlohmann::basic_json::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const iterator to one past the last element </para>
</para>

<para>Returns a const iterator to one past the last element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>const iterator one past the last element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link></computeroutput>.,cend}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20074 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8"/>    <section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to one past the last element </para>
</para>

<para>Returns an iterator to one past the last element.</para>

<para></para>

<para><formalpara><title>Returns</title>

<para>iterator one past the last element</para>
</formalpara>
@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>.,end}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1aab2588e4f8767b792656e5ebcf922a9f">cend()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link> &#8211; returns an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae1e7bbc736b7e9d1155f9ee6c95b2090">cbegin()</link> &#8211; returns a const <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20064 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a49a7ac46583c77094f96a7717597ff5f"/>    <section>
    <title>erase()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>erase</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::erase (const <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element from a JSON array given an index </para>
</para>

<para>Removes element from a JSON array at the index <emphasis>idx</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>index of the element to remove</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.307</entry>
                                <entry>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>when <computeroutput>idx &gt;= <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>; example: <computeroutput>&quot;array index 17
is out of range&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in distance between <emphasis>idx</emphasis> and the end of the container.</para>

<para>@liveexample{The example shows the effect of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link></computeroutput>.,erase__size_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase(IteratorType)</link> &#8211; removes the element <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> a given position </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9">erase(IteratorType, IteratorType)</link> &#8211; removes the elements in the given range </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a022404d92eb877a7ad5bfce198ef067a">erase(const typename object_t::key_type&amp;)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given key</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19786 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a022404d92eb877a7ad5bfce198ef067a"/>    <section>
    <title>erase()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> nlohmann::basic_json::erase (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element from a JSON object given a key </para>
</para>

<para>Removes elements from a JSON object with the key value <emphasis>key</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>value of the elements to remove</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements removed. If <emphasis>ObjectType</emphasis> is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.307</entry>
                                <entry>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity <computeroutput>log(size()) + count(key)</computeroutput></para>

<para>@liveexample{The example shows the effect of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link></computeroutput>.,erase__key_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase(IteratorType)</link> &#8211; removes the element <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> a given position </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9">erase(IteratorType, IteratorType)</link> &#8211; removes the elements in the given range </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a49a7ac46583c77094f96a7717597ff5f">erase(const size_type)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given index</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19751 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9"/>    <section>
    <title>erase()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>IteratorType nlohmann::basic_json::erase (IteratorType first, IteratorType last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove elements given an iterator range </para>
</para>

<para>Removes the element specified by the range <computeroutput>[first; last)</computeroutput>. The iterator <emphasis>first</emphasis> does not need to be dereferenceable if <computeroutput>first == last</computeroutput>: erasing an empty range is a no-op.</para>

<para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>iterator to the beginning of the range to remove </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>iterator past the end of the range to remove </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator following the last removed element. If the iterator <emphasis>second</emphasis> refers to the last element, the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput> iterator is returned.</para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>IteratorType</entry>
                                <entry>
<para>an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> or <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Postcondition</title>

<para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput> iterator.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.307</entry>
                                <entry>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.203</entry>
                                <entry>
<para>if called on iterators which does not belong to the current JSON value; example: <computeroutput>&quot;iterators do not fit current value&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.204</entry>
                                <entry>
<para>if called on a primitive type with invalid iterators (i.e., if <computeroutput>first != <link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput> and <computeroutput>last != <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput>); example: <computeroutput>&quot;iterators out of range&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity The complexity depends on the type:<itemizedlist>
<listitem>
<para>objects: <computeroutput>log(size()) + std::distance(first, last)</computeroutput></para>
</listitem><listitem>
<para>arrays: linear in the distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>, plus linear in the distance between <emphasis>last</emphasis> and end of the container</para>
</listitem><listitem>
<para>strings and binary: linear in the length of the member</para>
</listitem><listitem>
<para>other types: constant</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The example shows the result of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link></computeroutput> for different JSON types.,erase__IteratorType_IteratorType}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase(IteratorType)</link> &#8211; removes the element <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> a given position </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a022404d92eb877a7ad5bfce198ef067a">erase(const typename object_t::key_type&amp;)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given key </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a49a7ac46583c77094f96a7717597ff5f">erase(const size_type)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given index</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19656 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f"/>    <section>
    <title>erase()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>IteratorType nlohmann::basic_json::erase (IteratorType pos)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element given an iterator </para>
</para>

<para>Removes the element specified by iterator <emphasis>pos</emphasis>. The iterator <emphasis>pos</emphasis> must be valid and dereferenceable. Thus the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput> iterator (which is valid, but is not dereferenceable) cannot be used as a value for <emphasis>pos</emphasis>.</para>

<para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator to the element to remove </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator following the last removed element. If the iterator <emphasis>pos</emphasis> refers to the last element, the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput> iterator is returned.</para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>IteratorType</entry>
                                <entry>
<para>an <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> or <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Postcondition</title>

<para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link></computeroutput> iterator.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.307</entry>
                                <entry>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if called on an iterator which does not belong to the current JSON value; example: <computeroutput>&quot;iterator does not fit current
value&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.205</entry>
                                <entry>
<para>if called on a primitive type with invalid iterator (i.e., any iterator which is not <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>); example: <computeroutput>&quot;iterator
out of range&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity The complexity depends on the type:<itemizedlist>
<listitem>
<para>objects: amortized constant</para>
</listitem><listitem>
<para>arrays: linear in distance between <emphasis>pos</emphasis> and the end of the container</para>
</listitem><listitem>
<para>strings and binary: linear in the length of the member</para>
</listitem><listitem>
<para>other types: constant</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The example shows the result of <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d0f5fb6f22126f7e3803dd7cdf7030f">erase()</link></computeroutput> for different JSON types.,erase__IteratorType}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a24c397c38ce6984594a87c64b2378dc9">erase(IteratorType, IteratorType)</link> &#8211; removes the elements in the given range </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a022404d92eb877a7ad5bfce198ef067a">erase(const typename object_t::key_type&amp;)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given key </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a49a7ac46583c77094f96a7717597ff5f">erase(const size_type)</link> &#8211; removes the element from an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1a5805a2f5a4f94bdff25423e7ba833ad2">at</link> the given index</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19543 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af4167275baa0b2da76cdc89b1117c300"/>    <section>
    <title>find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;typename KeyT &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::find (KeyT &amp;&amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para>Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> is returned.</para>

<para><note><title>Note</title>

<para>This method always returns <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> when executed on a JSON type that is not an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key value of the element to search for.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>) iterator is returned.</para>
</formalpara>
@complexity Logarithmic in the size of the JSON object.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1af4167275baa0b2da76cdc89b1117c300">find()</link></computeroutput> is used.,find__key_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains(KeyT&amp;&amp;) const</link> &#8211; checks whether a key exists</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19839 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a581684a08bf3fa341f9fcec34d3885a3"/>    <section>
    <title>find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;typename KeyT &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> nlohmann::basic_json::find (KeyT &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para>find an element in a JSON object Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> is returned.</para>

<para><note><title>Note</title>

<para>This method always returns <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> when executed on a JSON type that is not an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key value of the element to search for.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>) iterator is returned.</para>
</formalpara>
@complexity Logarithmic in the size of the JSON object.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1af4167275baa0b2da76cdc89b1117c300">find()</link></computeroutput> is used.,find__key_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a29333078b6e6cb76f2b5d12590bbf766">contains(KeyT&amp;&amp;) const</link> &#8211; checks whether a key exists</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19856 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae91348b027208339c94dbbc6fd769929"/>    <section>
    <title>flatten()</title>
<indexterm><primary>flatten</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>flatten</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::flatten ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return flattened JSON value </para>
</para>

<para>The function creates a JSON object whose keys are JSON pointers (see <link xlink:href="https://tools.ietf.org/html/rfc6901">RFC 6901</link>) and whose values are all primitive. The original JSON value can be restored using the <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten()</link> function.</para>

<para><formalpara><title>Returns</title>

<para>an object that maps JSON pointers to primitive values</para>
</formalpara>
<note><title>Note</title>

<para>Empty objects and arrays are flattened to <computeroutput>null</computeroutput> and will not be reconstructed correctly by the <link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten()</link> function.</para>
</note>
@complexity Linear in the size the JSON value.</para>

<para>@liveexample{The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers.,flatten}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten()</link> for the reverse function</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23383 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac63e3b10cee79ec1581bd83a75927dae"/>    <section>
    <title>from_bson()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_bson</secondary></indexterm>
<computeroutput>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_bson (A1 &amp;&amp; a1, A2 &amp;&amp; a2, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Create a JSON value from an input in BSON format. </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the BSON (Binary JSON) serialization format.</para>

<para>The library maps BSON record types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>BSON type </para>
</entry><entry>
<para>BSON marker byte </para>
</entry><entry>
<para>JSON value type  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>double </para>
</entry><entry>
<para>0x01 </para>
</entry><entry>
<para>number_float  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para>0x02 </para>
</entry><entry>
<para>string  </para>
</entry></row>
      <row >
<entry>
<para>document </para>
</entry><entry>
<para>0x03 </para>
</entry><entry>
<para>object  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>0x04 </para>
</entry><entry>
<para>array  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para>0x05 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>undefined </para>
</entry><entry>
<para>0x06 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>ObjectId </para>
</entry><entry>
<para>0x07 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para>0x08 </para>
</entry><entry>
<para>boolean  </para>
</entry></row>
      <row >
<entry>
<para>UTC Date-Time </para>
</entry><entry>
<para>0x09 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para>0x0A </para>
</entry><entry>
<para>null  </para>
</entry></row>
      <row >
<entry>
<para>Regular Expr. </para>
</entry><entry>
<para>0x0B </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>DB Pointer </para>
</entry><entry>
<para>0x0C </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>JavaScript Code </para>
</entry><entry>
<para>0x0D </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Symbol </para>
</entry><entry>
<para>0x0E </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>JavaScript Code </para>
</entry><entry>
<para>0x0F </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>int32 </para>
</entry><entry>
<para>0x10 </para>
</entry><entry>
<para>number_integer  </para>
</entry></row>
      <row >
<entry>
<para>Timestamp </para>
</entry><entry>
<para>0x11 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>128-bit decimal float </para>
</entry><entry>
<para>0x13 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Max Key </para>
</entry><entry>
<para>0x7F </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Min Key </para>
</entry><entry>
<para>0xFF </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><warning><title>Warning</title>

<para>The mapping is <emphasis role="bold">incomplete</emphasis>. The unsupported mappings are indicated in the table above.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in BSON format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.114</entry>
                                <entry>
<para>if an unsupported BSON record type is encountered</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in BSON format to a JSON value.,from_bson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format </para>
</formalpara>
</para>
<para>
Definition at line 23188 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d"/>    <section>
    <title>from_bson()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_bson</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_bson (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Create a JSON value from an input in BSON format. </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the BSON (Binary JSON) serialization format.</para>

<para>The library maps BSON record types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>BSON type </para>
</entry><entry>
<para>BSON marker byte </para>
</entry><entry>
<para>JSON value type  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>double </para>
</entry><entry>
<para>0x01 </para>
</entry><entry>
<para>number_float  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para>0x02 </para>
</entry><entry>
<para>string  </para>
</entry></row>
      <row >
<entry>
<para>document </para>
</entry><entry>
<para>0x03 </para>
</entry><entry>
<para>object  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>0x04 </para>
</entry><entry>
<para>array  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para>0x05 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>undefined </para>
</entry><entry>
<para>0x06 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>ObjectId </para>
</entry><entry>
<para>0x07 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para>0x08 </para>
</entry><entry>
<para>boolean  </para>
</entry></row>
      <row >
<entry>
<para>UTC Date-Time </para>
</entry><entry>
<para>0x09 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para>0x0A </para>
</entry><entry>
<para>null  </para>
</entry></row>
      <row >
<entry>
<para>Regular Expr. </para>
</entry><entry>
<para>0x0B </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>DB Pointer </para>
</entry><entry>
<para>0x0C </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>JavaScript Code </para>
</entry><entry>
<para>0x0D </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Symbol </para>
</entry><entry>
<para>0x0E </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>JavaScript Code </para>
</entry><entry>
<para>0x0F </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>int32 </para>
</entry><entry>
<para>0x10 </para>
</entry><entry>
<para>number_integer  </para>
</entry></row>
      <row >
<entry>
<para>Timestamp </para>
</entry><entry>
<para>0x11 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>128-bit decimal float </para>
</entry><entry>
<para>0x13 </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Max Key </para>
</entry><entry>
<para>0x7F </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
      <row >
<entry>
<para>Min Key </para>
</entry><entry>
<para>0xFF </para>
</entry><entry>
<para>still unsupported  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><warning><title>Warning</title>

<para>The mapping is <emphasis role="bold">incomplete</emphasis>. The unsupported mappings are indicated in the table above.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in BSON format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.114</entry>
                                <entry>
<para>if an unsupported BSON record type is encountered</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in BSON format to a JSON value.,from_bson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format </para>
</formalpara>
</para>
<para>
Definition at line 23172 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a35a70ee14be3fab32b0976df41569fe8"/>    <section>
    <title>from_cbor()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_cbor</secondary></indexterm>
<computeroutput>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_cbor (A1 &amp;&amp; a1, A2 &amp;&amp; a2, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in CBOR format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</para>

<para>The library maps CBOR types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>CBOR type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>Integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x00..0x17  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x18  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x19  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x1A  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x1B  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x20..0x37  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x38  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x39  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x3A  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x3B  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x40..0x57  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x58  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x59  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x5A  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x5B  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x60..0x77  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x78  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x79  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7A  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7B  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7F  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x80..0x97  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x98  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x99  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9A  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9B  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9F  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xA0..0xB7  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xB8  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xB9  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBA  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBB  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBF  </para>
</entry></row>
      <row >
<entry>
<para>False </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>0xF4  </para>
</entry></row>
      <row >
<entry>
<para>True </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>0xF5  </para>
</entry></row>
      <row >
<entry>
<para>Null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>0xF6  </para>
</entry></row>
      <row >
<entry>
<para>Half-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xF9  </para>
</entry></row>
      <row >
<entry>
<para>Single-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xFA  </para>
</entry></row>
      <row >
<entry>
<para>Double-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xFB  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><warning><title>Warning</title>

<para>The mapping is <emphasis role="bold">incomplete</emphasis> in the sense that not all CBOR types can be converted to a JSON value. The following CBOR types are not supported and will yield parse errors (parse_error.112):<itemizedlist>
<listitem>
<para>date/time (0xC0..0xC1)</para>
</listitem><listitem>
<para>bignum (0xC2..0xC3)</para>
</listitem><listitem>
<para>decimal fraction (0xC4)</para>
</listitem><listitem>
<para>bigfloat (0xC5)</para>
</listitem><listitem>
<para>tagged items (0xC6..0xD4, 0xD8..0xDB)</para>
</listitem><listitem>
<para>expected conversions (0xD5..0xD7)</para>
</listitem><listitem>
<para>simple values (0xE0..0xF3, 0xF8)</para>
</listitem><listitem>
<para>undefined (0xF7)</para>
</listitem></itemizedlist>
</para>

<para>CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error.113).</para>
</warning>
<note><title>Note</title>

<para>Any CBOR output created <link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in CBOR format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if unsupported features from CBOR were used in the given input <emphasis>v</emphasis> or if the input is not valid CBOR </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string was expected as map key, but not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in CBOR format to a JSON value.,from_cbor}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://cbor.io">http://cbor.io</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 22900 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0"/>    <section>
    <title>from_cbor()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_cbor</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_cbor (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in CBOR format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</para>

<para>The library maps CBOR types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>CBOR type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>Integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x00..0x17  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x18  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x19  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x1A  </para>
</entry></row>
      <row >
<entry>
<para>Unsigned integer </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x1B  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x20..0x37  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x38  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x39  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x3A  </para>
</entry></row>
      <row >
<entry>
<para>Negative integer </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0x3B  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x40..0x57  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x58  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x59  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x5A  </para>
</entry></row>
      <row >
<entry>
<para>Byte string </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x5B  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x60..0x77  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x78  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x79  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7A  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7B  </para>
</entry></row>
      <row >
<entry>
<para>UTF-8 string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x7F  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x80..0x97  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x98  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x99  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9A  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9B  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x9F  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xA0..0xB7  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xB8  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xB9  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBA  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBB  </para>
</entry></row>
      <row >
<entry>
<para>map </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xBF  </para>
</entry></row>
      <row >
<entry>
<para>False </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>0xF4  </para>
</entry></row>
      <row >
<entry>
<para>True </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>0xF5  </para>
</entry></row>
      <row >
<entry>
<para>Null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>0xF6  </para>
</entry></row>
      <row >
<entry>
<para>Half-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xF9  </para>
</entry></row>
      <row >
<entry>
<para>Single-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xFA  </para>
</entry></row>
      <row >
<entry>
<para>Double-Precision Float </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xFB  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><warning><title>Warning</title>

<para>The mapping is <emphasis role="bold">incomplete</emphasis> in the sense that not all CBOR types can be converted to a JSON value. The following CBOR types are not supported and will yield parse errors (parse_error.112):<itemizedlist>
<listitem>
<para>date/time (0xC0..0xC1)</para>
</listitem><listitem>
<para>bignum (0xC2..0xC3)</para>
</listitem><listitem>
<para>decimal fraction (0xC4)</para>
</listitem><listitem>
<para>bigfloat (0xC5)</para>
</listitem><listitem>
<para>tagged items (0xC6..0xD4, 0xD8..0xDB)</para>
</listitem><listitem>
<para>expected conversions (0xD5..0xD7)</para>
</listitem><listitem>
<para>simple values (0xE0..0xF3, 0xF8)</para>
</listitem><listitem>
<para>undefined (0xF7)</para>
</listitem></itemizedlist>
</para>

<para>CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error.113).</para>
</warning>
<note><title>Note</title>

<para>Any CBOR output created <link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in CBOR format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if unsupported features from CBOR were used in the given input <emphasis>v</emphasis> or if the input is not valid CBOR </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string was expected as map key, but not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in CBOR format to a JSON value.,from_cbor}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://cbor.io">http://cbor.io</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 22884 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a18f5f50cbdebc6a35fa1fe25a5107aa9"/>    <section>
    <title>from_msgpack()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_msgpack</secondary></indexterm>
<computeroutput>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_msgpack (A1 &amp;&amp; a1, A2 &amp;&amp; a2, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in MessagePack format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the MessagePack serialization format.</para>

<para>The library maps MessagePack types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>MessagePack type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>positive fixint </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x00..0x7F  </para>
</entry></row>
      <row >
<entry>
<para>fixmap </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0x80..0x8F  </para>
</entry></row>
      <row >
<entry>
<para>fixarray </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x90..0x9F  </para>
</entry></row>
      <row >
<entry>
<para>fixstr </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xA0..0xBF  </para>
</entry></row>
      <row >
<entry>
<para>nil </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>0xC0  </para>
</entry></row>
      <row >
<entry>
<para>false </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>0xC2  </para>
</entry></row>
      <row >
<entry>
<para>true </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>0xC3  </para>
</entry></row>
      <row >
<entry>
<para>float 32 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xCA  </para>
</entry></row>
      <row >
<entry>
<para>float 64 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xCB  </para>
</entry></row>
      <row >
<entry>
<para>uint 8 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCC  </para>
</entry></row>
      <row >
<entry>
<para>uint 16 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCD  </para>
</entry></row>
      <row >
<entry>
<para>uint 32 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCE  </para>
</entry></row>
      <row >
<entry>
<para>uint 64 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCF  </para>
</entry></row>
      <row >
<entry>
<para>int 8 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD0  </para>
</entry></row>
      <row >
<entry>
<para>int 16 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD1  </para>
</entry></row>
      <row >
<entry>
<para>int 32 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD2  </para>
</entry></row>
      <row >
<entry>
<para>int 64 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD3  </para>
</entry></row>
      <row >
<entry>
<para>str 8 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xD9  </para>
</entry></row>
      <row >
<entry>
<para>str 16 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xDA  </para>
</entry></row>
      <row >
<entry>
<para>str 32 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xDB  </para>
</entry></row>
      <row >
<entry>
<para>array 16 </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0xDC  </para>
</entry></row>
      <row >
<entry>
<para>array 32 </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0xDD  </para>
</entry></row>
      <row >
<entry>
<para>map 16 </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xDE  </para>
</entry></row>
      <row >
<entry>
<para>map 32 </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xDF  </para>
</entry></row>
      <row >
<entry>
<para>bin 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC4  </para>
</entry></row>
      <row >
<entry>
<para>bin 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC5  </para>
</entry></row>
      <row >
<entry>
<para>bin 32 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC6  </para>
</entry></row>
      <row >
<entry>
<para>ext 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC7  </para>
</entry></row>
      <row >
<entry>
<para>ext 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC8  </para>
</entry></row>
      <row >
<entry>
<para>ext 32 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC9  </para>
</entry></row>
      <row >
<entry>
<para>fixext 1 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD4  </para>
</entry></row>
      <row >
<entry>
<para>fixext 2 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD5  </para>
</entry></row>
      <row >
<entry>
<para>fixext 4 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD6  </para>
</entry></row>
      <row >
<entry>
<para>fixext 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD7  </para>
</entry></row>
      <row >
<entry>
<para>fixext 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD8  </para>
</entry></row>
      <row >
<entry>
<para>negative fixint </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xE0-0xFF  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>Any MessagePack output created <link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in MessagePack format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if unsupported features from MessagePack were used in the given input <emphasis>i</emphasis> or if the input is not valid MessagePack </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string was expected as map key, but not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in MessagePack format to a JSON value.,from_msgpack}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://msgpack.org">http://msgpack.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related BSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 23013 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f"/>    <section>
    <title>from_msgpack()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_msgpack</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_msgpack (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in MessagePack format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the MessagePack serialization format.</para>

<para>The library maps MessagePack types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>MessagePack type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>positive fixint </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0x00..0x7F  </para>
</entry></row>
      <row >
<entry>
<para>fixmap </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0x80..0x8F  </para>
</entry></row>
      <row >
<entry>
<para>fixarray </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x90..0x9F  </para>
</entry></row>
      <row >
<entry>
<para>fixstr </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xA0..0xBF  </para>
</entry></row>
      <row >
<entry>
<para>nil </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>0xC0  </para>
</entry></row>
      <row >
<entry>
<para>false </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>0xC2  </para>
</entry></row>
      <row >
<entry>
<para>true </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>0xC3  </para>
</entry></row>
      <row >
<entry>
<para>float 32 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xCA  </para>
</entry></row>
      <row >
<entry>
<para>float 64 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para>0xCB  </para>
</entry></row>
      <row >
<entry>
<para>uint 8 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCC  </para>
</entry></row>
      <row >
<entry>
<para>uint 16 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCD  </para>
</entry></row>
      <row >
<entry>
<para>uint 32 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCE  </para>
</entry></row>
      <row >
<entry>
<para>uint 64 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para>0xCF  </para>
</entry></row>
      <row >
<entry>
<para>int 8 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD0  </para>
</entry></row>
      <row >
<entry>
<para>int 16 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD1  </para>
</entry></row>
      <row >
<entry>
<para>int 32 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD2  </para>
</entry></row>
      <row >
<entry>
<para>int 64 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xD3  </para>
</entry></row>
      <row >
<entry>
<para>str 8 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xD9  </para>
</entry></row>
      <row >
<entry>
<para>str 16 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xDA  </para>
</entry></row>
      <row >
<entry>
<para>str 32 </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0xDB  </para>
</entry></row>
      <row >
<entry>
<para>array 16 </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0xDC  </para>
</entry></row>
      <row >
<entry>
<para>array 32 </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0xDD  </para>
</entry></row>
      <row >
<entry>
<para>map 16 </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xDE  </para>
</entry></row>
      <row >
<entry>
<para>map 32 </para>
</entry><entry>
<para>object </para>
</entry><entry>
<para>0xDF  </para>
</entry></row>
      <row >
<entry>
<para>bin 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC4  </para>
</entry></row>
      <row >
<entry>
<para>bin 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC5  </para>
</entry></row>
      <row >
<entry>
<para>bin 32 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC6  </para>
</entry></row>
      <row >
<entry>
<para>ext 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC7  </para>
</entry></row>
      <row >
<entry>
<para>ext 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC8  </para>
</entry></row>
      <row >
<entry>
<para>ext 32 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xC9  </para>
</entry></row>
      <row >
<entry>
<para>fixext 1 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD4  </para>
</entry></row>
      <row >
<entry>
<para>fixext 2 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD5  </para>
</entry></row>
      <row >
<entry>
<para>fixext 4 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD6  </para>
</entry></row>
      <row >
<entry>
<para>fixext 8 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD7  </para>
</entry></row>
      <row >
<entry>
<para>fixext 16 </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0xD8  </para>
</entry></row>
      <row >
<entry>
<para>negative fixint </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para>0xE0-0xFF  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>Any MessagePack output created <link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in MessagePack format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if unsupported features from MessagePack were used in the given input <emphasis>i</emphasis> or if the input is not valid MessagePack </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string was expected as map key, but not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in MessagePack format to a JSON value.,from_msgpack}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://msgpack.org">http://msgpack.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack(const basic_json&amp;)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related UBJSON format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related BSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 22997 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7512b977f291271615ef6ad1e5baeee6"/>    <section>
    <title>from_ubjson()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_ubjson</secondary></indexterm>
<computeroutput>template&lt;typename A1 , typename A2 , detail::enable_if_t&lt; std::is_constructible&lt; detail::input_adapter, A1, A2 &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_ubjson (A1 &amp;&amp; a1, A2 &amp;&amp; a2, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in UBJSON format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the UBJSON (Universal Binary JSON) serialization format.</para>

<para>The library maps UBJSON types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>UBJSON type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>marker  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>no-op </para>
</entry><entry>
<para><emphasis>no value, next value is read</emphasis> </para>
</entry><entry>
<para><computeroutput>N</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para><computeroutput>Z</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>false </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para><computeroutput>F</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>true </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para><computeroutput>T</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>float32 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para><computeroutput>d</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>float64 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para><computeroutput>D</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>uint8 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para><computeroutput>U</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int8 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>i</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int16 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>I</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int32 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>l</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int64 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>L</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para><computeroutput>S</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>char </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para><computeroutput>C</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array (optimized values are supported) </para>
</entry><entry>
<para><computeroutput>[</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para>object (optimized values are supported) </para>
</entry><entry>
<para><computeroutput>{</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>The mapping is <emphasis role="bold">complete</emphasis> in the sense that any UBJSON value can be converted to a JSON value.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in UBJSON format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if a parse error occurs </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string could not be parsed successfully</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in UBJSON format to a JSON value.,from_ubjson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://ubjson.org">http://ubjson.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson(const basic_json&amp;, const bool, const bool)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related BSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.1.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 23101 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a"/>    <section>
    <title>from_ubjson()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>from_ubjson</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::from_ubjson (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, const bool strict = <computeroutput>true</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in UBJSON format </para>
</para>

<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the UBJSON (Universal Binary JSON) serialization format.</para>

<para>The library maps UBJSON types to JSON value types as follows:</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row >
<entry>
<para>UBJSON type </para>
</entry><entry>
<para>JSON value type </para>
</entry><entry>
<para>marker  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>no-op </para>
</entry><entry>
<para><emphasis>no value, next value is read</emphasis> </para>
</entry><entry>
<para><computeroutput>N</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para><computeroutput>Z</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>false </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para><computeroutput>F</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>true </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para><computeroutput>T</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>float32 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para><computeroutput>d</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>float64 </para>
</entry><entry>
<para>number_float </para>
</entry><entry>
<para><computeroutput>D</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>uint8 </para>
</entry><entry>
<para>number_unsigned </para>
</entry><entry>
<para><computeroutput>U</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int8 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>i</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int16 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>I</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int32 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>l</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>int64 </para>
</entry><entry>
<para>number_integer </para>
</entry><entry>
<para><computeroutput>L</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para><computeroutput>S</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>char </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para><computeroutput>C</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>array (optimized values are supported) </para>
</entry><entry>
<para><computeroutput>[</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para>object (optimized values are supported) </para>
</entry><entry>
<para><computeroutput>{</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>The mapping is <emphasis role="bold">complete</emphasis> in the sense that any UBJSON value can be converted to a JSON value.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>an input in UBJSON format convertible to an input adapter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether to expect the input to be consumed until EOF (true by default) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.110</entry>
                                <entry>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.112</entry>
                                <entry>
<para>if a parse error occurs </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.113</entry>
                                <entry>
<para>if a string could not be parsed successfully</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the input <emphasis>i</emphasis>.</para>

<para>@liveexample{The example shows the deserialization of a byte vector in UBJSON format to a JSON value.,from_ubjson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://ubjson.org">http://ubjson.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson(const basic_json&amp;, const bool, const bool)</link> for the analogous serialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the related BSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.1.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 23085 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c"/>    <section>
    <title>front()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::front ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the first element </para>
</para>

<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>.</para>

<para><formalpara><title>Returns</title>

<para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para>
</formalpara>
@complexity Constant.</para>

<para><formalpara><title>Precondition</title>

<para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <emphasis role="bold">guarded by assertions</emphasis>). </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The JSON value remains unchanged.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>invalid_iterator.214</entry>
                                <entry>
<para>when called on <computeroutput>null</computeroutput> value</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c">front()</link></computeroutput>.,front}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830">back()</link> &#8211; access the last element</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19432 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a135d1239f3189866baaede36ec0701c8"/>    <section>
    <title>front()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>front</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::front ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the first element </para>
</para>

<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link></computeroutput>.</para>

<para><formalpara><title>Returns</title>

<para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para>
</formalpara>
@complexity Constant.</para>

<para><formalpara><title>Precondition</title>

<para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <emphasis role="bold">guarded by assertions</emphasis>). </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>The JSON value remains unchanged.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>invalid_iterator.214</entry>
                                <entry>
<para>when called on <computeroutput>null</computeroutput> value</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ad1702349b3aeca0e518921336faa570c">front()</link></computeroutput>.,front}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ab87589ef6b14a6e6881109e04d414830">back()</link> &#8211; access the last element</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19440 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adc6408fbeaf9545882dc62bc20db7d42"/>    <section>
    <title>get()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , detail::enable_if_t&lt; std::is_same&lt; typename std::remove_const&lt; BasicJsonType &gt;::type, basic_json_t &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get special-case overload </para>
</para>

<para>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>BasicJsonType</entry>
                                <entry>
<para>== <link linkend="_classnlohmann_1_1basic__json">basic_json</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a copy of *this</para>
</formalpara>
@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 18293 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad6d521a14fe494fb08bea79cfaaa9b46"/>    <section>
    <title>get()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , detail::enable_if_t&lt; not std::is_same&lt; BasicJsonType, basic_json &gt;::value and detail::is_basic_json&lt; BasicJsonType &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>BasicJsonType nlohmann::basic_json::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get special-case overload </para>
</para>

<para>This overloads converts the current <link linkend="_classnlohmann_1_1basic__json">basic_json</link> in a different <link linkend="_classnlohmann_1_1basic__json">basic_json</link> type</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>BasicJsonType</entry>
                                <entry>
<para>== <link linkend="_classnlohmann_1_1basic__json">basic_json</link></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>a copy of *this, converted into </para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>BasicJsonType</entry>
                                <entry>
<para>@complexity Depending on the implementation of the called <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>version 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 18316 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a37a6d7eaf9d736a890adb6e9f1444fde"/>    <section>
    <title>get()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>constexpr auto nlohmann::basic_json::get ( ) const -&gt; decltype(std::declval&lt;const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link>&amp;&gt;().template <link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr</link>&lt;PointerType&gt;())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (explicit) </para>
</para>

<para>get a pointer value (explicit) Explicit pointer access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>The pointer becomes invalid if the underlying JSON object changes.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>PointerType</entry>
                                <entry>
<para>pointer type; must be a pointer to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</formalpara>
@complexity Constant.</para>

<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr()</link> for explicit pointer-member access</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18572 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0ac973fb8b3bf1fb60d1b8df880060c3"/>    <section>
    <title>get()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType nlohmann::basic_json::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a value (explicit); special case </para>
</para>

<para>Explicit type conversion between the JSON value and a compatible value which is <emphasis role="bold">not</emphasis> <link xlink:href="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</link> and <emphasis role="bold">not</emphasis> <link xlink:href="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</link>. The value is converted by calling the <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method.</para>

<para>The function is equivalent to executing <literallayout><computeroutput>return&#32;JSONSerializer&lt;ValueTypeCV&gt;::from_json(*this);
</computeroutput></literallayout></para>

<para>This overloads is chosen if:<itemizedlist>
<listitem>
<para><emphasis>ValueType</emphasis> is not <link linkend="_classnlohmann_1_1basic__json">basic_json</link> and</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> has a <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><note><title>Note</title>

<para>If <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> has both overloads of <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput>, this one is chosen.</para>
</note>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueTypeCV</entry>
                                <entry>
<para>the provided value type </para>
</entry>
                            </row>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>the returned value type</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>what</entry>
                                <entry>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method throws</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 18417 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0e3fba99f98f8b7c54b7e657f02162c9"/>    <section>
    <title>get()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not detail::is_basic_json&lt; ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value and not detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType nlohmann::basic_json::get ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a value (explicit) </para>
</para>

<para>Explicit type conversion between the JSON value and a compatible value which is <link xlink:href="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</link> and <link xlink:href="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</link>. The value is converted by calling the <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method.</para>

<para>The function is equivalent to executing <literallayout><computeroutput>ValueType&#32;ret;
JSONSerializer&lt;ValueType&gt;::from_json(*this,&#32;ret);
return&#32;ret;
</computeroutput></literallayout></para>

<para>This overloads is chosen if:<itemizedlist>
<listitem>
<para><emphasis>ValueType</emphasis> is not <link linkend="_classnlohmann_1_1basic__json">basic_json</link>,</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> has a <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method of the form <computeroutput>void from_json(const basic_json&amp;, ValueType&amp;)</computeroutput>, and</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> does not have a <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueTypeCV</entry>
                                <entry>
<para>the provided value type </para>
</entry>
                            </row>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>the returned value type</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>what</entry>
                                <entry>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method throws</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get__ValueType_const}</para>

<para><formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 18366 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a19e7e8e1811dcbfb35d1855a24abd8aa"/>    <section>
    <title>get()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>auto nlohmann::basic_json::get ( ) -&gt; decltype(std::declval&lt;<link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link>&amp;&gt;().template <link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr</link>&lt;PointerType&gt;())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (explicit) </para>
</para>

<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>The pointer becomes invalid if the underlying JSON object changes.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>PointerType</entry>
                                <entry>
<para>pointer type; must be a pointer to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</formalpara>
@complexity Constant.</para>

<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95">get_ptr()</link> for explicit pointer-member access</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18560 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af07877930c21c861d75a34cb32993fd0"/>    <section>
    <title>get_allocator()</title>
<indexterm><primary>get_allocator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_allocator</secondary></indexterm>
<para><computeroutput>static <link linkend="_classnlohmann_1_1basic__json_1a69388a77648e83007af1295aaf350c0f">allocator_type</link> nlohmann::basic_json::get_allocator ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>returns the allocator associated with the container </para>
</para>
<para>
Definition at line 15780 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a11bc366554be56ed9832dc25e009acaf"/>    <section>
    <title>get_impl()</title>
<indexterm><primary>get_impl</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> nlohmann::basic_json::get_impl (<link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>get a boolean (explicit) </para>
</para>
<para>
Definition at line 18140 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5560b65c43ebfa52fd81363f628f0fd6"/>    <section>
    <title>get_impl_ptr()<computeroutput>[1/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (array) </para>
</para>
<para>
Definition at line 18163 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a1395936ee3b5bf12a44b583ce4c42c9c"/>    <section>
    <title>get_impl_ptr()<computeroutput>[2/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (binary) </para>
</para>
<para>
Definition at line 18235 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa9fc99ec3a40c1e1ee086d797e2f4eec"/>    <section>
    <title>get_impl_ptr()<computeroutput>[3/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (boolean) </para>
</para>
<para>
Definition at line 18187 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab882c22809696716a55d6572527709fa"/>    <section>
    <title>get_impl_ptr()<computeroutput>[4/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (array) </para>
</para>
<para>
Definition at line 18169 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab71294705ef1df01447c423aac909cc7"/>    <section>
    <title>get_impl_ptr()<computeroutput>[5/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a6d9574e10ab63f4a4f48edde42e739d1">binary_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (binary) </para>
</para>
<para>
Definition at line 18241 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7e5c49156b170062c176e520fb6e0002"/>    <section>
    <title>get_impl_ptr()<computeroutput>[6/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (boolean) </para>
</para>
<para>
Definition at line 18193 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a135cc1f0f25c4ad2ceed7132fc83d8ce"/>    <section>
    <title>get_impl_ptr()<computeroutput>[7/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (floating-point number) </para>
</para>
<para>
Definition at line 18229 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae48280c854cad4ff1b466310511d4815"/>    <section>
    <title>get_impl_ptr()<computeroutput>[8/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (integer number) </para>
</para>
<para>
Definition at line 18205 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4800ba3349c81c61206add73e2b2e434"/>    <section>
    <title>get_impl_ptr()<computeroutput>[9/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (unsigned number) </para>
</para>
<para>
Definition at line 18217 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1afcaf35277a772216232f82c2ecbe51df"/>    <section>
    <title>get_impl_ptr()<computeroutput>[10/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (object) </para>
</para>
<para>
Definition at line 18157 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a759e15ae107daa9ca50916aeb5070a18"/>    <section>
    <title>get_impl_ptr()<computeroutput>[11/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput>constexpr const <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>* nlohmann::basic_json::get_impl_ptr (const <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> * ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (string) </para>
</para>
<para>
Definition at line 18181 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a2fabcdab83c0a3de7fb7d753d75ce2bb"/>    <section>
    <title>get_impl_ptr()<computeroutput>[12/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (floating-point number) </para>
</para>
<para>
Definition at line 18223 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0c6ae57643e00da7bf6e4d1c29be6db7"/>    <section>
    <title>get_impl_ptr()<computeroutput>[13/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (integer number) </para>
</para>
<para>
Definition at line 18199 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a835557fd75998eb3a83254d051498b30"/>    <section>
    <title>get_impl_ptr()<computeroutput>[14/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (unsigned number) </para>
</para>
<para>
Definition at line 18211 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61"/>    <section>
    <title>get_impl_ptr()<computeroutput>[15/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (object) </para>
</para>
<para>
Definition at line 18151 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a00601649a4242a528f60b9e0c7b89bd6"/>    <section>
    <title>get_impl_ptr()<computeroutput>[16/16]</computeroutput></title>
<indexterm><primary>get_impl_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_impl_ptr</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>* nlohmann::basic_json::get_impl_ptr (<link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> * )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer to the value (string) </para>
</para>
<para>
Definition at line 18175 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1abad0f48fa4535a8820e90509b733f16b"/>    <section>
    <title>get_ptr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_ptr</secondary></indexterm>
<computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value and std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>constexpr auto nlohmann::basic_json::get_ptr ( ) const -&gt; decltype(std::declval&lt;const <link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link>&amp;&gt;().<link linkend="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61">get_impl_ptr</link>(std::declval&lt;PointerType&gt;()))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (implicit) </para>
</para>

<para>get a pointer value (implicit) Implicit pointer access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>Writing data to the pointee of the result yields an undefined state.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>PointerType</entry>
                                <entry>
<para>pointer type; must be a pointer to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>. Enforced by a static assertion.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</formalpara>
@complexity Constant.</para>

<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get_ptr}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18525 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9e639075f5b3f1733fcb5f04aea3da95"/>    <section>
    <title>get_ptr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_ptr</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_ptr</secondary></indexterm>
<computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>auto nlohmann::basic_json::get_ptr ( ) -&gt; decltype(std::declval&lt;<link linkend="_classnlohmann_1_1basic__json_1ae76659f8c2fbeab628a6c618e0817dee">basic_json_t</link>&amp;&gt;().<link linkend="_classnlohmann_1_1basic__json_1a364997745e8a4db417d1c1bfd252ee61">get_impl_ptr</link>(std::declval&lt;PointerType&gt;()))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (implicit) </para>
</para>

<para>Implicit pointer access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>Writing data to the pointee of the result yields an undefined state.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>PointerType</entry>
                                <entry>
<para>pointer type; must be a pointer to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a440094de5ef4e119b2771b549b33da70">number_unsigned_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>. Enforced by a static assertion.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</formalpara>
@complexity Constant.</para>

<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get_ptr}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18512 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d"/>    <section>
    <title>get_ref()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_ref</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_ref</secondary></indexterm>
<computeroutput>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>ReferenceType nlohmann::basic_json::get_ref ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a reference value (implicit) </para>
</para>

<para>Implicit reference access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>Writing data to the referee of the result yields an undefined state.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ReferenceType</entry>
                                <entry>
<para>reference type; must be a reference to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>. Enforced by static assertion.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.303</entry>
                                <entry>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example shows several calls to <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref()</link></computeroutput>.,get_ref}</para>

<para><formalpara><title>Since</title>

<para>version 1.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 18606 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a71ff2578d0655d983f2934a907b0f960"/>    <section>
    <title>get_ref()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_ref</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_ref</secondary></indexterm>
<computeroutput>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value and std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>ReferenceType nlohmann::basic_json::get_ref ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a reference value (implicit) </para>
</para>

<para>get a reference value (implicit) Implicit reference access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>Writing data to the referee of the result yields an undefined state.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ReferenceType</entry>
                                <entry>
<para>reference type; must be a reference to <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a8cc04e22d7ef18efd2d34bc04eb6a1b2">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ab227d71ad47b6ed6a3acae52dedbb49d">number_integer_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1ade1eb06e9fc3ff2ba1efd709b94b401d">number_float_t</link>. Enforced by static assertion.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.303</entry>
                                <entry>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example shows several calls to <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref()</link></computeroutput>.,get_ref}</para>

<para><formalpara><title>Since</title>

<para>version 1.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 18619 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3999548d7bbac0fdc30960fe38996d2c"/>    <section>
    <title>get_ref_impl()</title>
<indexterm><primary>get_ref_impl</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_ref_impl</secondary></indexterm>
<computeroutput>template&lt;typename ReferenceType , typename ThisType &gt; </computeroutput><para><computeroutput>static ReferenceType nlohmann::basic_json::get_ref_impl (ThisType &amp; obj)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>helper function to implement <link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref()</link> </para>
</para>

<para>This function helps to implement <link linkend="_classnlohmann_1_1basic__json_1a838359d25d318852c8204b999e5f375d">get_ref()</link> without code duplication for const and non-const overloads</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ThisType</entry>
                                <entry>
<para>will be deduced as <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> or <computeroutput>const <link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.303</entry>
                                <entry>
<para>if ReferenceType does not match underlying value type of the current JSON </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 18258 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a76e6ed5e2b067e8fc0f50fbc1fce0c52"/>    <section>
    <title>get_subtype()</title>
<indexterm><primary>get_subtype</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_subtype</secondary></indexterm>
<para><computeroutput>std::size_t nlohmann::basic_json::get_subtype ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the binary subtype </para>
</para>

<para>Returns the numerical subtype of the JSON value, if the JSON value is of type &quot;binary&quot;, and it has a subtype. If it does not have a subtype (or the object is not of type binary) this function will return size_t(-1) as a sentinel value.</para>

<para><formalpara><title>Returns</title>

<para>the numerical subtype of the binary JSON value</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1aa59cc57a1ea36eb2d24d16308a2baba2">set_subtype()</link> &#8211; sets the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa2bb73931f8cdc113b1cec81412ee89d">clear_subtype()</link> &#8211; clears the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a002aa4e75d86a8beef332cf3a1c84d92">has_subtype()</link> &#8211; returns whether or not the binary <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> has a subtype</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 19315 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aaca828acdba11b390de87689ac18fd08"/>    <section>
    <title>get_to()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_to</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_to</secondary></indexterm>
<computeroutput>template&lt;typename T , std::size_t N, typename Array  = T (&amp;)[N], detail::enable_if_t&lt; detail::has_from_json&lt; basic_json_t, Array &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>Array nlohmann::basic_json::get_to (T(&amp;) v[N]) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definition at line 18475 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a24f07b19d83414f342b204da5a400363"/>    <section>
    <title>get_to()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_to</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>get_to</secondary></indexterm>
<computeroutput>template&lt;typename ValueType , detail::enable_if_t&lt; not detail::is_basic_json&lt; ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType&amp; nlohmann::basic_json::get_to (ValueType &amp; v) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a value (explicit) </para>
</para>

<para>Explicit type conversion between the JSON value and a compatible value. The value is filled into the input parameter by calling the <link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method.</para>

<para>The function is equivalent to executing <literallayout><computeroutput>ValueType&#32;v;
JSONSerializer&lt;ValueType&gt;::from_json(*this,&#32;v);
</computeroutput></literallayout></para>

<para>This overloads is chosen if:<itemizedlist>
<listitem>
<para><emphasis>ValueType</emphasis> is not <link linkend="_classnlohmann_1_1basic__json">basic_json</link>,</para>
</listitem><listitem>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> has a <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method of the form <computeroutput>void from_json(const basic_json&amp;, ValueType&amp;)</computeroutput>, and</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>the input parameter type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the input parameter, allowing chaining calls.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>what</entry>
                                <entry>
<para><link linkend="_classnlohmann_1_1basic__json_1ac81dd868670cb7d0d895426aacf0e06a">json_serializer&lt;ValueType&gt;</link> <computeroutput><link linkend="_namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de">from_json()</link></computeroutput> method throws</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get_to}</para>

<para><formalpara><title>Since</title>

<para>version 3.3.0 </para>
</formalpara>
</para>
<para>
Definition at line 18463 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a002aa4e75d86a8beef332cf3a1c84d92"/>    <section>
    <title>has_subtype()</title>
<indexterm><primary>has_subtype</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>has_subtype</secondary></indexterm>
<para><computeroutput>bool nlohmann::basic_json::has_subtype ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether or not the binary subtype has a value </para>
</para>

<para>Returns whether or not the binary subtype has a value.</para>

<para><formalpara><title>Returns</title>

<para>whether or not the binary subtype has a value.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a76e6ed5e2b067e8fc0f50fbc1fce0c52">get_subtype()</link> &#8211; return the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa59cc57a1ea36eb2d24d16308a2baba2">set_subtype()</link> &#8211; sets the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa2bb73931f8cdc113b1cec81412ee89d">clear_subtype()</link> &#8211; clears the binary subtype</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 19402 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aab2bc544912cb3954b38ee76772c16d7"/>    <section>
    <title>insert()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts elements </para>
</para>

<para>Inserts elements from range <computeroutput>[first, last)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>begin of the range of elements to insert </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>end of the range of elements to insert</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if iterator <emphasis>first</emphasis> or <emphasis>last</emphasis> does does not point to an object; example: <computeroutput>&quot;iterators first and last must point to
objects&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.210</entry>
                                <entry>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic: <computeroutput>O(N*log(<link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> + N))</computeroutput>, where <computeroutput>N</computeroutput> is the number of elements to insert.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert__range_object}</para>

<para><formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21237 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3b86713def43fb79d40cb344b826033c"/>    <section>
    <title>insert()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts element </para>
</para>

<para>inserts element Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator before which the content will be inserted; may be the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>element to insert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iterator pointing to the inserted <emphasis>val</emphasis>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21066 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62"/>    <section>
    <title>insert()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts element </para>
</para>

<para>Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator before which the content will be inserted; may be the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>element to insert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iterator pointing to the inserted <emphasis>val</emphasis>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21044 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a939390bb7d48b11c64413ec79c7104fa"/>    <section>
    <title>insert()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts elements </para>
</para>

<para>Inserts elements from range <computeroutput>[first, last)</computeroutput> before iterator <emphasis>pos</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator before which the content will be inserted; may be the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>begin of the range of elements to insert </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>end of the range of elements to insert</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.210</entry>
                                <entry>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.211</entry>
                                <entry>
<para>if <emphasis>first</emphasis> or <emphasis>last</emphasis> are iterators into container for which insert is called; example: <computeroutput>&quot;passed iterators may not
belong to container&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>first==last</computeroutput></para>
</formalpara>
@complexity Linear in <computeroutput>std::distance(first, last)</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert__range}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21143 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adaae3e55f4349e53d1526a6da464d34f"/>    <section>
    <title>insert()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> ilist)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts elements </para>
</para>

<para>Inserts elements from initializer list <emphasis>ilist</emphasis> before iterator <emphasis>pos</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator before which the content will be inserted; may be the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ilist</entry>
                                <entry>
<para>initializer list to insert the values from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>ilist</computeroutput> is empty</para>
</formalpara>
@complexity Linear in <computeroutput>ilist.size()</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert__ilist}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21196 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a58e65af3dd9223d8593c6ca1a8477c3f"/>    <section>
    <title>insert()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts elements </para>
</para>

<para>Inserts <emphasis>cnt</emphasis> copies of <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>iterator before which the content will be inserted; may be the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link> iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cnt</entry>
                                <entry>
<para>number of copies of <emphasis>val</emphasis> to insert </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>element to insert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>cnt==0</computeroutput></para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.309</entry>
                                <entry>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in <emphasis>cnt</emphasis> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac6be8bd68e9dffd793846e0f0b239d62">insert()</link></computeroutput> is used.,insert__count}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21095 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab80c4bdc11b40246f668008bae80df25"/>    <section>
    <title>insert_iterator()</title>
<indexterm><primary>insert_iterator</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>insert_iterator</secondary></indexterm>
<computeroutput>template&lt;typename... Args&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> nlohmann::basic_json::insert_iterator (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> pos, Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Helper for insertion of an iterator. </para>
</para>

<para><note><title>Note</title>

<para>: This uses std::distance to support GCC 4.8, see <link xlink:href="https://github.com/nlohmann/json/pull/1257">https://github.com/nlohmann/json/pull/1257</link> </para>
</note>
</para>
<para>
Definition at line 21006 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a1859e0c783a24df797b758e3fc21b966"/>    <section>
    <title>is_array()</title>
<indexterm><primary>is_array</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_array</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an array </para>
</para>

<para>This function returns true if and only if the JSON value is an array.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is array, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a1859e0c783a24df797b758e3fc21b966">is_array()</link></computeroutput> for all JSON types.,is_array}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18030 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af0623f174dc806b5c17b87a485febf68"/>    <section>
    <title>is_binary()</title>
<indexterm><primary>is_binary</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_binary</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_binary ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a binary array </para>
</para>

<para>This function returns true if and only if the JSON value is a binary array.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is binary array, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1af0623f174dc806b5c17b87a485febf68">is_binary()</link></computeroutput> for all JSON types.,is_binary}</para>

<para><formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 18074 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0bd23e6f679145905a78020c07547559"/>    <section>
    <title>is_boolean()</title>
<indexterm><primary>is_boolean</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_boolean</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a boolean </para>
</para>

<para>This function returns true if and only if the JSON value is a boolean.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is boolean, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0bd23e6f679145905a78020c07547559">is_boolean()</link></computeroutput> for all JSON types.,is_boolean}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17871 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4fce66d66c424052b192ba45e08a661d"/>    <section>
    <title>is_discarded()</title>
<indexterm><primary>is_discarded</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_discarded</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_discarded ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is discarded </para>
</para>

<para>This function returns true if and only if the JSON value was discarded during parsing with a callback function (see <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link>).</para>

<para><note><title>Note</title>

<para>This function will always be <computeroutput>false</computeroutput> for JSON values after parsing. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases.</para>
</note>
<formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is discarded, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a4fce66d66c424052b192ba45e08a661d">is_discarded()</link></computeroutput> for all JSON types.,is_discarded}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18101 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1afe9a6fe72337a174cfb117a2081d2cfc"/>    <section>
    <title>is_null()</title>
<indexterm><primary>is_null</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_null</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_null ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is null </para>
</para>

<para>This function returns true if and only if the JSON value is null.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is null, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1afe9a6fe72337a174cfb117a2081d2cfc">is_null()</link></computeroutput> for all JSON types.,is_null}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17849 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3"/>    <section>
    <title>is_number()</title>
<indexterm><primary>is_number</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a number </para>
</para>

<para>This function returns true if and only if the JSON value is a number. This includes both integer (signed and unsigned) and floating-point values.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is number (regardless whether integer, unsigned integer or floating-type), <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number()</link></computeroutput> for all JSON types.,is_number}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad">is_number_integer()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an integer or unsigned integer number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc">is_number_unsigned()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an unsigned integer number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044">is_number_float()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a floating-point number</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17901 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044"/>    <section>
    <title>is_number_float()</title>
<indexterm><primary>is_number_float</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_number_float</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_number_float ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a floating-point number </para>
</para>

<para>This function returns true if and only if the JSON value is a floating-point number. This excludes signed and unsigned integer values.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is a floating-point number, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044">is_number_float()</link></computeroutput> for all JSON types.,is_number_float}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad">is_number_integer()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an integer number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc">is_number_unsigned()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an unsigned integer number</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17986 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad"/>    <section>
    <title>is_number_integer()</title>
<indexterm><primary>is_number_integer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_number_integer</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_number_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an integer number </para>
</para>

<para>This function returns true if and only if the JSON value is a signed or unsigned integer number. This excludes floating-point values.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is an integer or unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad">is_number_integer()</link></computeroutput> for all JSON types.,is_number_integer}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc">is_number_unsigned()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an unsigned integer number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044">is_number_float()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a floating-point number</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17930 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc"/>    <section>
    <title>is_number_unsigned()</title>
<indexterm><primary>is_number_unsigned</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_number_unsigned</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_number_unsigned ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an unsigned integer number </para>
</para>

<para>This function returns true if and only if the JSON value is an unsigned integer number. This excludes floating-point and signed integer values.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is an unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ac45bc02fd5f4f136f522844222012adc">is_number_unsigned()</link></computeroutput> for all JSON types.,is_number_unsigned}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a145005bad4fcab4f8620efec8de019ad">is_number_integer()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an integer or unsigned integer number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a926df0038ca14568f88a92d0caeba044">is_number_float()</link> &#8211; check if <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a floating-point number</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17958 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae3300a95d3bb4a55cb0e04b9f125e42f"/>    <section>
    <title>is_object()</title>
<indexterm><primary>is_object</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_object</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_object ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an object </para>
</para>

<para>This function returns true if and only if the JSON value is an object.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is object, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae3300a95d3bb4a55cb0e04b9f125e42f">is_object()</link></computeroutput> for all JSON types.,is_object}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18008 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a422885c85f603a13c36f8d0ac5d9f278"/>    <section>
    <title>is_primitive()</title>
<indexterm><primary>is_primitive</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_primitive</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_primitive ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether type is primitive </para>
</para>

<para>This function returns true if and only if the JSON type is primitive (string, number, boolean, or null).</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is primitive (string, number, boolean, or null), <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a422885c85f603a13c36f8d0ac5d9f278">is_primitive()</link></computeroutput> for all JSON types.,is_primitive}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a5a53e5a09d9123bfeed6f664b1334f8c">is_structured()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is structured </para>

<para><link linkend="_classnlohmann_1_1basic__json_1afe9a6fe72337a174cfb117a2081d2cfc">is_null()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is <computeroutput>null</computeroutput> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae958b0bc067c82850145299711d8bcd5">is_string()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a string </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a0bd23e6f679145905a78020c07547559">is_boolean()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a boolean </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a5d5f20be10c6f6d263557def2ac504a3">is_number()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a number </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0623f174dc806b5c17b87a485febf68">is_binary()</link> &#8211; returns whether JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is a binary <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17800 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae958b0bc067c82850145299711d8bcd5"/>    <section>
    <title>is_string()</title>
<indexterm><primary>is_string</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_string</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a string </para>
</para>

<para>This function returns true if and only if the JSON value is a string.</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is string, <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae958b0bc067c82850145299711d8bcd5">is_string()</link></computeroutput> for all JSON types.,is_string}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18052 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5a53e5a09d9123bfeed6f664b1334f8c"/>    <section>
    <title>is_structured()</title>
<indexterm><primary>is_structured</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>is_structured</secondary></indexterm>
<para><computeroutput>constexpr bool nlohmann::basic_json::is_structured ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether type is structured </para>
</para>

<para>This function returns true if and only if the JSON type is structured (array or object).</para>

<para><formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if type is structured (array or object), <computeroutput>false</computeroutput> otherwise.</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5a53e5a09d9123bfeed6f664b1334f8c">is_structured()</link></computeroutput> for all JSON types.,is_structured}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a422885c85f603a13c36f8d0ac5d9f278">is_primitive()</link> &#8211; returns whether <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is primitive </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a1859e0c783a24df797b758e3fc21b966">is_array()</link> &#8211; returns whether <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae3300a95d3bb4a55cb0e04b9f125e42f">is_object()</link> &#8211; returns whether <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> is an <link linkend="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709">object</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17827 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a79bac81ac682a6327fbd4e792190dfc6"/>    <section>
    <title>items()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>items</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>items</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt;<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link>&gt; nlohmann::basic_json::items ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>helper to access iterator member functions in range-based for </para>
</para>

<para>This function allows to access <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc">iterator::key()</link> and <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">iterator::value()</link> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para>

<para>For loop without <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;=&#32;j_object.begin();&#32;it&#32;!=&#32;j_object.end();&#32;++it)
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop without <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;j_object)
{
&#32;&#32;&#32;&#32;//&#32;&quot;it&quot;&#32;is&#32;of&#32;type&#32;json::reference&#32;and&#32;has&#32;no&#32;key()&#32;member
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;value:&#32;&quot;&#32;&lt;&lt;&#32;it&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;el&#32;:&#32;j_object.items())
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;el.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;el.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>The <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function also allows to use <link xlink:href="https://en.cppreference.com/w/cpp/language/structured_binding">structured bindings</link> (C++17):</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;[key,&#32;val]&#32;:&#32;j_object.items())
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;key&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;val&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example). For primitive types (e.g., numbers), <computeroutput>key()</computeroutput> returns an empty string.</para>
</note>
<formalpara><title>Returns</title>

<para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para>
</formalpara>
@liveexample{The following code shows how the function is used.,items}</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 3.1.0, structured bindings support since 3.5.0. </para>
</formalpara>
</para>
<para>
Definition at line 20386 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977"/>    <section>
    <title>items()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>items</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>items</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt;<link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link>&gt; nlohmann::basic_json::items ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>helper to access iterator member functions in range-based for </para>
</para>

<para>This function allows to access <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc">iterator::key()</link> and <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">iterator::value()</link> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para>

<para>For loop without <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;=&#32;j_object.begin();&#32;it&#32;!=&#32;j_object.end();&#32;++it)
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop without <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;j_object)
{
&#32;&#32;&#32;&#32;//&#32;&quot;it&quot;&#32;is&#32;of&#32;type&#32;json::reference&#32;and&#32;has&#32;no&#32;key()&#32;member
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;value:&#32;&quot;&#32;&lt;&lt;&#32;it&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;el&#32;:&#32;j_object.items())
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;el.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;el.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>The <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link></computeroutput> function also allows to use <link xlink:href="https://en.cppreference.com/w/cpp/language/structured_binding">structured bindings</link> (C++17):</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;[key,&#32;val]&#32;:&#32;j_object.items())
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;key&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;val&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example). For primitive types (e.g., numbers), <computeroutput>key()</computeroutput> returns an empty string.</para>
</note>
<formalpara><title>Returns</title>

<para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para>
</formalpara>
@liveexample{The following code shows how the function is used.,items}</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>version 3.1.0, structured bindings support since 3.5.0. </para>
</formalpara>
</para>
<para>
Definition at line 20378 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aca63364d2dbbda5b8848cf6987ab13b4"/>    <section>
    <title>iterator_wrapper()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator_wrapper</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>iterator_wrapper</secondary></indexterm>
<para><computeroutput>static <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt;<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link>&gt; nlohmann::basic_json::iterator_wrapper (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> ref)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>wrapper to access iterator member functions in range-based for </para>
</para>

<para>This function allows to access <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc">iterator::key()</link> and <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">iterator::value()</link> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para>

<para>For loop without iterator_wrapper:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;=&#32;j_object.begin();&#32;it&#32;!=&#32;j_object.end();&#32;++it)
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop without iterator proxy:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;j_object)
{
&#32;&#32;&#32;&#32;//&#32;&quot;it&quot;&#32;is&#32;of&#32;type&#32;json::reference&#32;and&#32;has&#32;no&#32;key()&#32;member
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;value:&#32;&quot;&#32;&lt;&lt;&#32;it&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop with iterator proxy:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;json::iterator_wrapper(j_object))
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example).</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ref</entry>
                                <entry>
<para>reference to a JSON value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para>
</formalpara>
@liveexample{The following code shows how the wrapper is used,iterator_wrapper}</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><note><title>Note</title>

<para>The name of this function is not yet final and may change in the future.</para>
</note>
<para><link linkend="_deprecated_1_deprecated000001">Deprecated</link> 
<para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</para></para>
<para>
Definition at line 20310 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0a8051760196ac813fd5eb3c8d5a2976"/>    <section>
    <title>iterator_wrapper()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator_wrapper</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>iterator_wrapper</secondary></indexterm>
<para><computeroutput>static <link linkend="_classnlohmann_1_1basic__json_1a3972a922e57395dd643b60024cedde62">iteration_proxy</link>&lt;<link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link>&gt; nlohmann::basic_json::iterator_wrapper (<link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> ref)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>wrapper to access iterator member functions in range-based for </para>
</para>

<para>This function allows to access <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc">iterator::key()</link> and <link linkend="_classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c">iterator::value()</link> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para>

<para>For loop without iterator_wrapper:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;=&#32;j_object.begin();&#32;it&#32;!=&#32;j_object.end();&#32;++it)
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop without iterator proxy:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;j_object)
{
&#32;&#32;&#32;&#32;//&#32;&quot;it&quot;&#32;is&#32;of&#32;type&#32;json::reference&#32;and&#32;has&#32;no&#32;key()&#32;member
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;value:&#32;&quot;&#32;&lt;&lt;&#32;it&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para>Range-based for loop with iterator proxy:</para>

<para><literallayout><computeroutput>for&#32;(auto&#32;it&#32;:&#32;json::iterator_wrapper(j_object))
{
&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;key:&#32;&quot;&#32;&lt;&lt;&#32;it.key()&#32;&lt;&lt;&#32;&quot;,&#32;value:&quot;&#32;&lt;&lt;&#32;it.value()&#32;&lt;&lt;&#32;&apos;\n&apos;;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example).</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ref</entry>
                                <entry>
<para>reference to a JSON value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para>
</formalpara>
@liveexample{The following code shows how the wrapper is used,iterator_wrapper}</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para>

<para>@complexity Constant.</para>

<para><note><title>Note</title>

<para>The name of this function is not yet final and may change in the future.</para>
</note>
<para><link linkend="_deprecated_1_deprecated000001">Deprecated</link> 
<para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a5961446010dfc494e0c247b4e9026977">items()</link> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</para></para>
<para>
Definition at line 20301 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f"/>    <section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>max_size</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> nlohmann::basic_json::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns the maximum possible number of elements </para>
</para>

<para>Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i.e. <computeroutput>std::distance(<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link>, <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>)</computeroutput> for the JSON value.</para>

<para><formalpara><title>Returns</title>

<para>The return value depends on the different types and is defined as follows: <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>return value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>0</computeroutput> (same as <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>1</computeroutput> (same as <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>1</computeroutput> (same as <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>1</computeroutput> (same as <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><computeroutput>1</computeroutput> (same as <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para>result of function <computeroutput>object_t::max_size()</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>result of function <computeroutput>array_t::max_size()</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@liveexample{The following code calls <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size()</link></computeroutput> on the different value types. Note the output is implementation specific.,max_size}</para>

<para>@complexity Constant, as long as <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> and <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> satisfy the Container concept; that is, their <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size()</link></computeroutput> functions have constant complexity.</para>

<para>@iterators No changes.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of returning <computeroutput>b.size()</computeroutput> where <computeroutput>b</computeroutput> is the largest possible JSON value.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> &#8211; returns the number of elements</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20587 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab68414151f2f3347a71c7a9984f1d72d"/>    <section>
    <title>merge_patch()</title>
<indexterm><primary>merge_patch</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>merge_patch</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::merge_patch (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; apply_patch)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>applies a JSON Merge Patch </para>
</para>

<para>The merge patch format is primarily intended for use with the HTTP PATCH method as a means of describing a set of modifications to a target resource&apos;s content. This function applies a merge patch to the current JSON value.</para>

<para>The function implements the following algorithm from Section 2 of <link xlink:href="https://tools.ietf.org/html/rfc7396">RFC 7396 (JSON Merge Patch)</link>:</para>

<para><literallayout><computeroutput>define&#32;MergePatch(Target,&#32;Patch):
&#32;&#32;if&#32;Patch&#32;is&#32;an&#32;Object:
&#32;&#32;&#32;&#32;if&#32;Target&#32;is&#32;not&#32;an&#32;Object:
&#32;&#32;&#32;&#32;&#32;&#32;Target&#32;=&#32;{}&#32;//&#32;Ignore&#32;the&#32;contents&#32;and&#32;set&#32;it&#32;to&#32;an&#32;empty&#32;Object
&#32;&#32;&#32;&#32;for&#32;each&#32;Name/Value&#32;pair&#32;in&#32;Patch:
&#32;&#32;&#32;&#32;&#32;&#32;if&#32;Value&#32;is&#32;null:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;Name&#32;exists&#32;in&#32;Target:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove&#32;the&#32;Name/Value&#32;pair&#32;from&#32;Target
&#32;&#32;&#32;&#32;&#32;&#32;else:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Target[Name]&#32;=&#32;MergePatch(Target[Name],&#32;Value)
&#32;&#32;&#32;&#32;return&#32;Target
&#32;&#32;else:
&#32;&#32;&#32;&#32;return&#32;Patch
</computeroutput></literallayout></para>

<para>Thereby, <computeroutput>Target</computeroutput> is the current object; that is, the patch is applied to the current value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>apply_patch</entry>
                                <entry>
<para>the patch to apply</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the lengths of <emphasis>patch</emphasis>.</para>

<para>@liveexample{The following code shows how a JSON Merge Patch is applied to a JSON document.,merge_patch}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> &#8211; apply a JSON <link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> </para>

<para><link xlink:href="https://tools.ietf.org/html/rfc7396">RFC 7396 (JSON Merge Patch)</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23952 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a651af45dd9d619a3e7524a95388ddb33"/>    <section>
    <title>meta()</title>
<indexterm><primary>meta</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>meta</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::meta ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>returns version information on the library </para>
</para>

<para>This function returns a JSON object with information about the library, including the version number and information on the platform and compiler.</para>

<para><formalpara><title>Returns</title>

<para>JSON object holding version information <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>key </para>
</entry><entry>
<para>description  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para><computeroutput>compiler</computeroutput> </para>
</entry><entry>
<para>Information on the used compiler. It is an object with the following keys: <computeroutput>c++</computeroutput> (the used C++ standard), <computeroutput>family</computeroutput> (the compiler family; possible values are <computeroutput>clang</computeroutput>, <computeroutput>icc</computeroutput>, <computeroutput>gcc</computeroutput>, <computeroutput>ilecpp</computeroutput>, <computeroutput>msvc</computeroutput>, <computeroutput>pgcpp</computeroutput>, <computeroutput>sunpro</computeroutput>, and <computeroutput>unknown</computeroutput>), and <computeroutput>version</computeroutput> (the compiler version).  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>copyright</computeroutput> </para>
</entry><entry>
<para>The copyright line for the library as string.  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>name</computeroutput> </para>
</entry><entry>
<para>The name of the library as string.  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>platform</computeroutput> </para>
</entry><entry>
<para>The used platform as string. Possible values are <computeroutput>win32</computeroutput>, <computeroutput>linux</computeroutput>, <computeroutput>apple</computeroutput>, <computeroutput>unix</computeroutput>, and <computeroutput>unknown</computeroutput>.  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>url</computeroutput> </para>
</entry><entry>
<para>The URL of the project as string.  </para>
</entry></row>
      <row >
<entry>
<para><computeroutput>version</computeroutput> </para>
</entry><entry>
<para>The version of the library. It is an object with the following keys: <computeroutput>major</computeroutput>, <computeroutput>minor</computeroutput>, and <computeroutput>patch</computeroutput> as defined by <link xlink:href="http://semver.org">Semantic Versioning</link>, and <computeroutput>string</computeroutput> (the version string).  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@liveexample{The following code shows an example output of the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a651af45dd9d619a3e7524a95388ddb33">meta()</link></computeroutput> function.,meta}</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@complexity Constant.</para>

<para><formalpara><title>Since</title>

<para>2.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 15812 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a10c8164cc94feabf095b959633c0d709"/>    <section>
    <title>object()</title>
<indexterm><primary>object</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>object</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::object (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create an object from an initializer list </para>
</para>

<para>Creates a JSON object value from a given initializer list. The initializer lists elements must be pairs, and their first elements must be strings. If the initializer list is empty, the empty object <computeroutput>{}</computeroutput> is created.</para>

<para><note><title>Note</title>

<para>This function is only added for symmetry reasons. In contrast to the related function <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link>, there are no cases which can only be expressed by this function. That is, any initializer list <emphasis>init</emphasis> can also be passed to the initializer list constructor <link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json(initializer_list_t, bool, value_t)</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para>initializer list to create an object from (optional)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>JSON object value</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.301</entry>
                                <entry>
<para>if <emphasis>init</emphasis> is not a list of pairs whose first elements are strings. In this case, no object can be created. When such a value is passed to <link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json(initializer_list_t, bool, value_t)</link>, an array would have been created from the passed initializer list <emphasis>init</emphasis>. See example below.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of <emphasis>init</emphasis>.</para>

<para>@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para>

<para>@liveexample{The following code shows an example for the <computeroutput>object</computeroutput> function.,object}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a6b3135f51d4e240e541af2f9d0b16ad9">basic_json(initializer_list_t, bool, value_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array(initializer_list_t)</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1aea7fc2a66a785e2f68535f63b54150a9">array</link> <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> from an initializer list</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17270 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a568197da17e5f7f9889607a2524497c6"/>    <section>
    <title>operator value_t()</title>
<indexterm><primary>operator value_t</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator value_t</secondary></indexterm>
<para><computeroutput>constexpr nlohmann::basic_json::operator <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type of the JSON value (implicit) </para>
</para>

<para>Implicitly return the type of the JSON value as a value from the <link linkend="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1">value_t</link> enumeration.</para>

<para><formalpara><title>Returns</title>

<para>the type of the JSON value</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies the <link linkend="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1">value_t</link> operator for all JSON types.,operator__value_t}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> of the JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> (explicit) </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a0fb9647ea72df0a3099cf6dd7e3f53e9">type_name()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> as string</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18127 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a3bdbda89fa87b8cd71f0ac0d048b8873"/>    <section>
    <title>operator ValueType()</title>
<indexterm><primary>operator ValueType</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator ValueType</secondary></indexterm>
<computeroutput>template&lt;typename ValueType , typename std::enable_if&lt; not std::is_pointer&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, detail::json_ref&lt; basic_json &gt;&gt;::value and not std::is_same&lt; ValueType, typename string_t::value_type &gt;::value and not detail::is_basic_json&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::value and detail::is_detected&lt; detail::get_template_function, const basic_json_t &amp;, ValueType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>nlohmann::basic_json::operator ValueType ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a value (implicit) </para>
</para>

<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <link linkend="_classnlohmann_1_1basic__json_1adc6408fbeaf9545882dc62bc20db7d42">get() const</link>.</para>

<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.302</entry>
                                <entry>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the JSON value.</para>

<para>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,operator__ValueType}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18665 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1afe3c79845dc1dd2243724558859d7e4b"/>    <section>
    <title>operator+=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator+= (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON array</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Amortized constant.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20760 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4ec964f3346fa981453933901ca39dd1"/>    <section>
    <title>operator+=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator+= (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON array</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Amortized constant.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20794 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1acbfa964cfa7c74f92d48a65eae744cfd"/>    <section>
    <title>operator+=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator+= (const typename object_t::value_type &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para>add an object to an object Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON object</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container, O(log(<computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)).</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object.,push_back__object_t__value}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20844 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad7ca83d8fdd49dae585f9980af5f7a8c"/>    <section>
    <title>operator+=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator+= (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para>add an object to an object This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para>

<para><orderedlist>
<listitem>
<para>the current value is an object,</para>
</listitem><listitem>
<para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para>
</listitem><listitem>
<para>the first element of <emphasis>init</emphasis> is a string,</para>
</listitem></orderedlist>
</para>

<para><emphasis>init</emphasis> is converted into an object element and added using <link linkend="_classnlohmann_1_1basic__json_1affac3bab5efcb26cdcd0942d24ad0ab5">push_back(const typename object_t::value_type&amp;)</link>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back(basic_json&amp;&amp;)</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para>an initializer list</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the initializer list <emphasis>init</emphasis>.</para>

<para><note><title>Note</title>

<para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput>, see <link xlink:href="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</link> for more information.</para>
</note>
@liveexample{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </para>
<para>
Definition at line 20893 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad839b769b960e8911e720e39de2af4e8"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp; nlohmann::basic_json::operator= (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>copy assignment </para>
</para>

<para>Copy assignment operator. Copies a JSON value via the &quot;copy and swap&quot; strategy: It is expressed in terms of the copy constructor, destructor, and the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link></computeroutput> member function.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>other</entry>
                                <entry>
<para>value to copy from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is linear.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The code below shows and example for the copy assignment. It creates a copy of value <computeroutput>a</computeroutput> which is then swapped with <computeroutput>b</computeroutput>. Finally\, the copy of <computeroutput>a</computeroutput> (which is the null value after the swap) is destroyed.,basic_json__copyassignment}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17619 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0d26844b03de9067a47752b138e28236"/>    <section>
    <title>operator[]()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator[] (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. Similar to <link linkend="_classnlohmann_1_1basic__json_1a05c86efa156004b090258c1469eab3fd">operator[]</link>(const typename object_t::key_type&amp;), <computeroutput>null</computeroutput> values are created in arrays and objects if necessary.</para>

<para>In particular:<itemizedlist>
<listitem>
<para>If the JSON pointer points to an object key that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned.</para>
</listitem><listitem>
<para>If the JSON pointer points to an array index that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned. All indices between the current maximum and the given index are also filled with <computeroutput>null</computeroutput>.</para>
</listitem><listitem>
<para>The special value <computeroutput>-</computeroutput> is treated as a synonym for the index past the end.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>a JSON pointer</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element pointed to by <emphasis>ptr</emphasis> </para>
</formalpara>
@complexity Constant.</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.106</entry>
                                <entry>
<para>if an array index begins with &apos;0&apos; </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.109</entry>
                                <entry>
<para>if an array index was not a number </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.404</entry>
                                <entry>
<para>if the JSON pointer can not be resolved</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The behavior is shown in the example.,operatorjson_pointer}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23242 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac240ab334bd660975e601b0809c3f1bc"/>    <section>
    <title>operator[]()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::operator[] (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. The function does not change the JSON value; no <computeroutput>null</computeroutput> values are created. In particular, the special value <computeroutput>-</computeroutput> yields an exception.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>JSON pointer to the desired element</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element pointed to by <emphasis>ptr</emphasis> </para>
</formalpara>
@complexity Constant.</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.106</entry>
                                <entry>
<para>if an array index begins with &apos;0&apos; </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.109</entry>
                                <entry>
<para>if an array index was not a number </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.402</entry>
                                <entry>
<para>if the array index &apos;-&apos; is used </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.404</entry>
                                <entry>
<para>if the JSON pointer can not be resolved</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The behavior is shown in the example.,operatorjson_pointer_const}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23270 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4"/>    <section>
    <title>operator[]()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator[] (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para>

<para><note><title>Note</title>

<para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18987 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7630fcfd1eda4d7de237af90466bffc6"/>    <section>
    <title>operator[]()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::operator[] (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>read-only access specified object element </para>
</para>

<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para>

<para><warning><title>Warning</title>

<para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>
<formalpara><title>Precondition</title>

<para>The element with key <emphasis>key</emphasis> must exist. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis></para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an object; in that case, using the [] operator with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type_const}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19036 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a05c86efa156004b090258c1469eab3fd"/>    <section>
    <title>operator[]()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator[] (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element </para>
</para>

<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>.</para>

<para><note><title>Note</title>

<para>If <emphasis>idx</emphasis> is beyond the range of the array (i.e., <computeroutput>idx &gt;= <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>), then the array is silently filled up with <computeroutput>null</computeroutput> values to make <computeroutput>idx</computeroutput> a valid reference to the last stored element.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>index of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element at index <emphasis>idx</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an array or null; in that cases, using the [] operator with an index makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant if <emphasis>idx</emphasis> is in the range of the array. Otherwise linear in <computeroutput>idx - <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>.</para>

<para>@liveexample{The example below shows how array elements can be read and written using <computeroutput>[]</computeroutput> operator. Note the addition of <computeroutput>null</computeroutput> values.,operatorarray__size_type}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18903 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a9fd9864614513a7191df0bada4880228"/>    <section>
    <title>operator[]()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::operator[] (<link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> idx) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element </para>
</para>

<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>index of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element at index <emphasis>idx</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an array; in that case, using the [] operator with an index makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example below shows how array elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__size_type_const}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 18949 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4ef3a5ec711a8e4b32407a261baee850"/>    <section>
    <title>operator[]()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> nlohmann::basic_json::operator[] (T * key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para>

<para><note><title>Note</title>

<para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 19077 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aadfe340990ea3f4039f8d3c100f254e6"/>    <section>
    <title>operator[]()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> nlohmann::basic_json::operator[] (T * key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>read-only access specified object element </para>
</para>

<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para>

<para><warning><title>Warning</title>

<para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to the element at key <emphasis>key</emphasis> </para>
</formalpara>
<formalpara><title>Precondition</title>

<para>The element with key <emphasis>key</emphasis> must exist. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis></para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.305</entry>
                                <entry>
<para>if the JSON value is not an object; in that case, using the [] operator with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type_const}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link> for access by <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> with a default <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 19128 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d"/>    <section>
    <title>parse()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parse</secondary></indexterm>
<para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::parse (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, const <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> cb = <computeroutput>nullptr</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>deserialize from a compatible input </para>
</para>

<para>This function reads from a compatible input. Examples are:<itemizedlist>
<listitem>
<para>an array of 1-byte values</para>
</listitem><listitem>
<para>strings with character/literal type with size of 1 byte</para>
</listitem><listitem>
<para>input streams</para>
</listitem><listitem>
<para>container with contiguous storage of 1-byte values. Compatible container types include <computeroutput>std::vector</computeroutput>, <computeroutput>std::string</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, and <computeroutput>std::initializer_list</computeroutput>. Furthermore, C-style arrays can be used with <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Precondition</title>

<para>Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with a static assertion.</emphasis></para>

<para>The container storage is contiguous. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis></para>
</formalpara>
<warning><title>Warning</title>

<para>There is no way to enforce all preconditions at compile-time. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>input to read from </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cb</entry>
                                <entry>
<para>a parser callback function of type <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> which is used to control the deserialization by filtering unwanted values (optional) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.101</entry>
                                <entry>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.102</entry>
                                <entry>
<para>if to_unicode fails or surrogate error </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.103</entry>
                                <entry>
<para>if to_unicode fails</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para>

<para><note><title>Note</title>

<para>A UTF-8 byte order mark is silently ignored.</para>
</note>
@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse()</link></computeroutput> function reading from an array.,parse__array__parser_callback_t}</para>

<para>@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse()</link></computeroutput> function with and without callback function.,parse__string__parser_callback_t}</para>

<para>@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse()</link></computeroutput> function with and without callback function.,parse__istream__parser_callback_t}</para>

<para>@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse()</link></computeroutput> function reading from a contiguous container.,parse__contiguouscontainer__parser_callback_t}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.3 (contiguous containers) </para>
</formalpara>
</para>
<para>
Definition at line 22094 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0837217bb8415b37a13233da239c0005"/>    <section>
    <title>parse()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>parse</secondary></indexterm>
<computeroutput>template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::parse (IteratorType first, IteratorType last, const <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> cb = <computeroutput>nullptr</computeroutput>
, const bool allow_exceptions = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>deserialize from an iterator range with contiguous storage </para>
</para>

<para>This function reads from an iterator range of a container with contiguous storage of 1-byte values. Compatible container types include <computeroutput>std::vector</computeroutput>, <computeroutput>std::string</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, and <computeroutput>std::initializer_list</computeroutput>. Furthermore, C-style arrays can be used with <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</para>

<para><formalpara><title>Precondition</title>

<para>The iterator range is contiguous. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis> </para>

<para>Each element in the range has a size of 1 byte. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with a static assertion.</emphasis></para>
</formalpara>
<warning><title>Warning</title>

<para>There is no way to enforce all preconditions at compile-time. If the function is called with noncompliant iterators and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>IteratorType</entry>
                                <entry>
<para>iterator of container with contiguous storage </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>begin of the range to parse (included) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>end of the range to parse (excluded) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cb</entry>
                                <entry>
<para>a parser callback function of type <link linkend="_classnlohmann_1_1basic__json_1a678b77584754c6fe7d957d0c7cfee999">parser_callback_t</link> which is used to control the deserialization by filtering unwanted values (optional) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>allow_exceptions</entry>
                                <entry>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.101</entry>
                                <entry>
<para>in case of an unexpected token </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.102</entry>
                                <entry>
<para>if to_unicode fails or surrogate error </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.103</entry>
                                <entry>
<para>if to_unicode fails</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para>

<para><note><title>Note</title>

<para>A UTF-8 byte order mark is silently ignored.</para>
</note>
@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a90848e6383900786acbf6510ef009d2d">parse()</link></computeroutput> function reading from an iterator range.,parse__iteratortype__parser_callback_t}</para>

<para><formalpara><title>Since</title>

<para>version 2.0.3 </para>
</formalpara>
</para>
<para>
Definition at line 22225 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b"/>    <section>
    <title>patch()</title>
<indexterm><primary>patch</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>patch</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::patch (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; json_patch) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>applies a JSON patch </para>
</para>

<para><link xlink:href="http://jsonpatch.com">JSON Patch</link> defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>json_patch</entry>
                                <entry>
<para>JSON patch document </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>patched document</para>
</formalpara>
<note><title>Note</title>

<para>The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown. In any case, the original value is not changed: the patch is applied to a copy of the value.</para>
</note>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.104</entry>
                                <entry>
<para>if the JSON patch does not consist of an array of objects</para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.105</entry>
                                <entry>
<para>if the JSON patch is malformed (e.g., mandatory attributes are missing); example: <computeroutput>&quot;operation add must have member path&quot;</computeroutput></para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.401</entry>
                                <entry>
<para>if an array index is out of range.</para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.403</entry>
                                <entry>
<para>if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: <computeroutput>&quot;key baz not
found&quot;</computeroutput></para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.405</entry>
                                <entry>
<para>if JSON pointer has no parent (&quot;add&quot;, &quot;remove&quot;, &quot;move&quot;)</para>
</entry>
                            </row>
                            <row>
                                <entry>other_error.501</entry>
                                <entry>
<para>if &quot;test&quot; operation was unsuccessful</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the JSON value and the length of the JSON patch. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected.</para>

<para>@liveexample{The following code shows how a JSON patch is applied to a value.,patch}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ac8305b8912441b11af77564542e6d93e">diff</link> &#8211; <link linkend="_classnlohmann_1_1basic__json_1ae1303d46f7c21d1b6197db5f3f263ea1">create</link> a JSON <link linkend="_classnlohmann_1_1basic__json_1a71a1bdafcb0f849479622e9acc8f825b">patch</link> by comparing two JSON values</para>

<para><link xlink:href="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</link> </para>

<para><link xlink:href="https://tools.ietf.org/html/rfc6901">RFC 6901 (JSON Pointer)</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23481 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6"/>    <section>
    <title>push_back()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>push_back</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::push_back (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para>Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON array</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Amortized constant.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20735 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1abf9a7dcd2b7a3080ccfacf5d0ebf12e5"/>    <section>
    <title>push_back()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>push_back</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::push_back (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON array</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Amortized constant.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20770 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1affac3bab5efcb26cdcd0942d24ad0ab5"/>    <section>
    <title>push_back()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>push_back</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::push_back (const typename object_t::value_type &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para>Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>the value to add to the JSON object</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.308</entry>
                                <entry>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container, O(log(<computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput>)).</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back()</link></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object.,push_back__object_t__value}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20820 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a4f811ef36976a82a8e29cb1ae7c40152"/>    <section>
    <title>push_back()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>push_back</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::push_back (<link linkend="_classnlohmann_1_1basic__json_1ae8b2251872b6a3a9b04147d2ffa5a839">initializer_list_t</link> init)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para>This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para>

<para><orderedlist>
<listitem>
<para>the current value is an object,</para>
</listitem><listitem>
<para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para>
</listitem><listitem>
<para>the first element of <emphasis>init</emphasis> is a string,</para>
</listitem></orderedlist>
</para>

<para><emphasis>init</emphasis> is converted into an object element and added using <link linkend="_classnlohmann_1_1basic__json_1affac3bab5efcb26cdcd0942d24ad0ab5">push_back(const typename object_t::value_type&amp;)</link>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <link linkend="_classnlohmann_1_1basic__json_1a887cd40d16a12596c24cd42c66107ac6">push_back(basic_json&amp;&amp;)</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>init</entry>
                                <entry>
<para>an initializer list</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the initializer list <emphasis>init</emphasis>.</para>

<para><note><title>Note</title>

<para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput>, see <link xlink:href="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</link> for more information.</para>
</note>
@liveexample{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </para>
<para>
Definition at line 20875 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a8d792070799098e6172e82a3865875ee"/>    <section>
    <title>rbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rbegin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>rbegin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> nlohmann::basic_json::rbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to the last element </para>
</para>

<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link></computeroutput>.,crbegin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20142 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6"/>    <section>
    <title>rbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rbegin</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>rbegin</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">reverse_iterator</link> nlohmann::basic_json::rbegin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-beginning </para>
</para>

<para>Returns an iterator to the reverse-beginning; that is, the last element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>reverse_iterator(end())</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link></computeroutput>.,rbegin}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20134 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6adf45af5f550ae31fe3bf0759b9af14"/>    <section>
    <title>rend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rend</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>rend</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a59564ce7bf7dad8be7d4d8184be05d91">const_reverse_iterator</link> nlohmann::basic_json::rend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to one before the first </para>
</para>

<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>const_cast&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp;&gt;(*this).<link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link></computeroutput>.,crend}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20179 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6"/>    <section>
    <title>rend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rend</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>rend</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0d2df32b8689b776dd3b0865f1362f40">reverse_iterator</link> nlohmann::basic_json::rend ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-end </para>
</para>

<para>Returns an iterator to the reverse-end; that is, one before the first element.</para>

<para></para>

<para>@complexity Constant.</para>

<para>@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>reverse_iterator(begin())</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>@liveexample{The following code shows an example for <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a27d668c5b974f4b3bded760f5553b5c6">rend()</link></computeroutput>.,rend}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ae54982c31d6c21e140980ce502425cf6">crend()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a32674498f617591fff4002ad0934a4f6">rbegin()</link> &#8211; returns a reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning </para>

<para><link linkend="_classnlohmann_1_1basic__json_1abe4ea2bbb97eba3baad6c4286366e7c5">crbegin()</link> &#8211; returns a const reverse <link linkend="_classnlohmann_1_1basic__json_1aa3ab6c99db6584c47624c29037f9f14d">iterator</link> to the beginning</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20171 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ada69b327dbaf7a7a221d3b3ee8d1cb1c"/>    <section>
    <title>sax_parse()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sax_parse</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>sax_parse</secondary></indexterm>
<computeroutput>template&lt;typename SAX &gt; </computeroutput><para><computeroutput>static bool nlohmann::basic_json::sax_parse (<link linkend="_classnlohmann_1_1detail_1_1input__adapter">detail::input_adapter</link> &amp;&amp; i, SAX * sax, <link linkend="_namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40">input_format_t</link> format = <computeroutput><link linkend="_mainwindow_8h_1ab701e3ac61a85b337ec5c1abaad6742d">input_format_t::json</link></computeroutput>
, const bool strict = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>generate SAX events </para>
</para>

<para>The SAX event lister must follow the interface of <link linkend="_structnlohmann_1_1json__sax">json_sax</link>.</para>

<para>This function reads from a compatible input. Examples are:<itemizedlist>
<listitem>
<para>an array of 1-byte values</para>
</listitem><listitem>
<para>strings with character/literal type with size of 1 byte</para>
</listitem><listitem>
<para>input streams</para>
</listitem><listitem>
<para>container with contiguous storage of 1-byte values. Compatible container types include <computeroutput>std::vector</computeroutput>, <computeroutput>std::string</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, and <computeroutput>std::initializer_list</computeroutput>. Furthermore, C-style arrays can be used with <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Precondition</title>

<para>Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with a static assertion.</emphasis></para>

<para>The container storage is contiguous. Violating this precondition yields undefined behavior. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis></para>
</formalpara>
<warning><title>Warning</title>

<para>There is no way to enforce all preconditions at compile-time. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</para>
</warning>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>i</entry>
                                <entry>
<para>input to read from </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>sax</entry>
                                <entry>
<para>SAX event listener </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>format</entry>
                                <entry>
<para>the format to parse (JSON, CBOR, MessagePack, or UBJSON) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strict</entry>
                                <entry>
<para>whether the input has to be consumed completely</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>return value of the last processed SAX event</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.101</entry>
                                <entry>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.102</entry>
                                <entry>
<para>if to_unicode fails or surrogate error </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.103</entry>
                                <entry>
<para>if to_unicode fails</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the SAX consumer <emphasis>sax</emphasis> has a super-linear complexity.</para>

<para><note><title>Note</title>

<para>A UTF-8 byte order mark is silently ignored.</para>
</note>
@liveexample{The example below demonstrates the <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ada69b327dbaf7a7a221d3b3ee8d1cb1c">sax_parse()</link></computeroutput> function reading from string and processing the events with a user-defined SAX event consumer.,sax_parse}</para>

<para><formalpara><title>Since</title>

<para>version 3.2.0 </para>
</formalpara>
</para>
<para>
Definition at line 22163 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a100dd0ecc7dfe3a8c2e1726c73ff3b63"/>    <section>
    <title>sax_parse()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sax_parse</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>sax_parse</secondary></indexterm>
<computeroutput>template&lt;class IteratorType , class SAX , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>static bool nlohmann::basic_json::sax_parse (IteratorType first, IteratorType last, SAX * sax)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22248 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa59cc57a1ea36eb2d24d16308a2baba2"/>    <section>
    <title>set_subtype()</title>
<indexterm><primary>set_subtype</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>set_subtype</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::set_subtype (std::uint8_t subtype)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>sets the binary subtype </para>
</para>

<para>Sets the binary subtype of the JSON value, also flags a binary JSON value as having a subtype, which has implications for serialization to msgpack (will prefer ext file formats over bin). If the JSON value is not a binary value, this function does nothing.</para>

<para>@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a76e6ed5e2b067e8fc0f50fbc1fce0c52">get_subtype()</link> &#8211; return the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa2bb73931f8cdc113b1cec81412ee89d">clear_subtype()</link> &#8211; clears the binary subtype </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a002aa4e75d86a8beef332cf3a1c84d92">has_subtype()</link> &#8211; returns whether or not the binary <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> has a subtype</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.8.0 </para>
</formalpara>
</para>
<para>
Definition at line 19346 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a9eaf1dcc25d6e7bd204f72877cef254b">size_type</link> nlohmann::basic_json::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns the number of elements </para>
</para>

<para>Returns the number of elements in a JSON value.</para>

<para><formalpara><title>Returns</title>

<para>The return value depends on the different types and is defined as follows: <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>return value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>0</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>1</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>1</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>1</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><computeroutput>1</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para>result of function object_t::size()  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para>result of function array_t::size()  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@liveexample{The following code calls <computeroutput><link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link></computeroutput> on the different value types.,size}</para>

<para>@complexity Constant, as long as <link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> and <link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> satisfy the Container concept; that is, their <link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> functions have constant complexity.</para>

<para>@iterators No changes.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para><note><title>Note</title>

<para>This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string.</para>
</note>
@requirement This function helps <computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput> satisfying the <link xlink:href="https://en.cppreference.com/w/cpp/named_req/Container">Container</link> requirements:<itemizedlist>
<listitem>
<para>The complexity is constant.</para>
</listitem><listitem>
<para>Has the semantics of <computeroutput>std::distance(<link linkend="_classnlohmann_1_1basic__json_1a7eae0427fb22e147d9c2ed1d532ed2aa">begin()</link>, <link linkend="_classnlohmann_1_1basic__json_1a4db895fabb72f717b2c641a5c338d5a8">end()</link>)</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae">empty()</link> &#8211; checks whether the container is <link linkend="_classnlohmann_1_1basic__json_1a54599e2a109faaebfb50df824567e5ae">empty</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a502e4020141ed42d55e5d1fd88b3e80f">max_size()</link> &#8211; returns the maximal number of elements</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 20516 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1adbb8131d4eaea460e8329bc0dfff1f6e"/>    <section>
    <title>swap()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>swap</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::swap (<link linkend="_classnlohmann_1_1basic__json_1a69524b1f8f42c0a81b86cee3fc54e034">array_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para>Exchanges the contents of a JSON array with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>other</entry>
                                <entry>
<para>array to exchange the contents with</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.310</entry>
                                <entry>
<para>when JSON value is not an array; example: <computeroutput>&quot;cannot
use swap() with string&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example below shows how arrays can be swapped with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link></computeroutput>.,swap__array_t}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21413 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a02f73d65a38b3f0450c992e8c337d522"/>    <section>
    <title>swap()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>swap</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::swap (<link linkend="_classnlohmann_1_1basic__json_1a949272bf6af5eb8eab9675505422f5b3">object_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para>Exchanges the contents of a JSON object with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>other</entry>
                                <entry>
<para>object to exchange the contents with</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.310</entry>
                                <entry>
<para>when JSON value is not an object; example: <computeroutput>&quot;cannot use swap() with string&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example below shows how objects can be swapped with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link></computeroutput>.,swap__object_t}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21446 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9"/>    <section>
    <title>swap()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>swap</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::swap (<link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para>Exchanges the contents of the JSON value with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>other</entry>
                                <entry>
<para>JSON value to exchange the contents with</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example below shows how JSON values can be swapped with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link></computeroutput>.,swap__reference}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21381 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a1c597d3cfa8aeec2ab4492306201851e"/>    <section>
    <title>swap()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>swap</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::swap (<link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para>Exchanges the contents of a JSON string with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>other</entry>
                                <entry>
<para>string to exchange the contents with</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.310</entry>
                                <entry>
<para>when JSON value is not a string; example: <computeroutput>&quot;cannot
use swap() with boolean&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Constant.</para>

<para>@liveexample{The example below shows how strings can be swapped with <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ae97dc3e7ce9ce6fcef641eed160628f9">swap()</link></computeroutput>.,swap__string_t}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21479 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a"/>    <section>
    <title>to_bson()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_bson</secondary></indexterm>
<para><computeroutput>static std::vector&lt;uint8_t&gt; nlohmann::basic_json::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and returns a vector containing the corresponding BSON-representation. </para>
</para>

<para>BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are stored as a single entity (a so-called document).</para>

<para>The library uses the following mapping from JSON values types to BSON types:</para>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>JSON value type </para>
</entry><entry>
<para>value/range </para>
</entry><entry>
<para>BSON type </para>
</entry><entry>
<para>marker  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>null </para>
</entry><entry>
<para>0x0A  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>true</computeroutput>, <computeroutput>false</computeroutput> </para>
</entry><entry>
<para>boolean </para>
</entry><entry>
<para>0x08  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-9223372036854775808..-2147483649 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para>0x12  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-2147483648..2147483647 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para>0x10  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>2147483648..9223372036854775807 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para>0x12  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>0..2147483647 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para>0x10  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>2147483648..9223372036854775807 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para>0x12  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>9223372036854775808..18446744073709551615 </para>
</entry><entry>
<para>&#8211; </para>
</entry><entry>
<para>&#8211;  </para>
</entry></row>
      <row >
<entry>
<para>number_float </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>double </para>
</entry><entry>
<para>0x01  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para>0x02  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>document </para>
</entry><entry>
<para>0x04  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>document </para>
</entry><entry>
<para>0x03  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>binary </para>
</entry><entry>
<para>0x05  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><warning><title>Warning</title>

<para>The mapping is <emphasis role="bold">incomplete</emphasis>, since only JSON-objects (and things contained therein) can be serialized to BSON. Also, integers larger than 9223372036854775807 cannot be serialized to BSON, and the keys may not contain U+0000, since they are serialized a zero-terminated c-strings.</para>
</warning>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out_of_range.407</entry>
                                <entry>
<para>if <computeroutput>j.is_number_unsigned() &amp;&amp; j.get&lt;std::uint64_t&gt;() &gt; 9223372036854775807</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>out_of_range.409</entry>
                                <entry>
<para>if a key in <computeroutput>j</computeroutput> contains a NULL (U+0000) </para>
</entry>
                            </row>
                            <row>
                                <entry>type_error.317</entry>
                                <entry>
<para>if <computeroutput>!j.<link linkend="_classnlohmann_1_1basic__json_1ae3300a95d3bb4a55cb0e04b9f125e42f">is_object()</link></computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>The input <computeroutput>j</computeroutput> is required to be an object: <computeroutput>j.is_object() == true</computeroutput>.</para>
</formalpara>
<note><title>Note</title>

<para>Any BSON output created via <link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1aa00c7ff5d182debcdfd4aa632714dc3d">from_bson</link>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to serialize </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>BSON serialization as byte vector</para>
</formalpara>
@complexity Linear in the size of the JSON value <emphasis>j</emphasis>.</para>

<para>@liveexample{The example shows the serialization of a JSON value to a byte vector in BSON format.,to_bson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</link> </para>

<para>from_bson(detail::input_adapter&amp;&amp;, const bool strict) for the analogous deserialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson(const basic_json&amp;, const bool, const bool)</link> for the related UBJSON format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor(const basic_json&amp;)</link> for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack(const basic_json&amp;)</link> for the related MessagePack format </para>
</formalpara>
</para>
<para>
Definition at line 22752 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a09ed82d52ba52eae2dfaf7a338893fb8"/>    <section>
    <title>to_bson()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_bson</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>j</entry>
                                <entry>
<para>The JSON object to convert to BSON. </para>
</entry>
                            </row>
                            <row>
                                <entry>o</entry>
                                <entry>
<para>The output adapter that receives the binary BSON representation. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>The input <computeroutput>j</computeroutput> shall be an object: <computeroutput>j.is_object() == true</computeroutput> </para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson(const basic_json&amp;)</link> </para>
</formalpara>
</para>
<para>
Definition at line 22775 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0e352827765f76b007725d2b2b890d45"/>    <section>
    <title>to_bson()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_bson</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>j</entry>
                                <entry>
<para>The JSON object to convert to BSON. </para>
</entry>
                            </row>
                            <row>
                                <entry>o</entry>
                                <entry>
<para>The output adapter that receives the binary BSON representation. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>The input <computeroutput>j</computeroutput> shall be an object: <computeroutput>j.is_object() == true</computeroutput> </para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a2dc8fd9d856f74a16a7b4f284571775a">to_bson(const basic_json&amp;)</link> </para>
</formalpara>
</para>
<para>
Definition at line 22767 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a"/>    <section>
    <title>to_cbor()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_cbor</secondary></indexterm>
<para><computeroutput>static std::vector&lt;uint8_t&gt; nlohmann::basic_json::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a CBOR serialization of a given JSON value </para>
</para>

<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the CBOR (Concise Binary Object Representation) serialization format. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para>

<para>The library uses the following mapping from JSON values types to CBOR types according to the CBOR specification (RFC 7049):</para>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>JSON value type </para>
</entry><entry>
<para>value/range </para>
</entry><entry>
<para>CBOR type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>Null </para>
</entry><entry>
<para>0xF6  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>True </para>
</entry><entry>
<para>0xF5  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>False </para>
</entry><entry>
<para>0xF4  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-9223372036854775808..-2147483649 </para>
</entry><entry>
<para>Negative integer (8 bytes follow) </para>
</entry><entry>
<para>0x3B  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-2147483648..-32769 </para>
</entry><entry>
<para>Negative integer (4 bytes follow) </para>
</entry><entry>
<para>0x3A  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-32768..-129 </para>
</entry><entry>
<para>Negative integer (2 bytes follow) </para>
</entry><entry>
<para>0x39  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-128..-25 </para>
</entry><entry>
<para>Negative integer (1 byte follow) </para>
</entry><entry>
<para>0x38  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-24..-1 </para>
</entry><entry>
<para>Negative integer </para>
</entry><entry>
<para>0x20..0x37  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>0..23 </para>
</entry><entry>
<para>Integer </para>
</entry><entry>
<para>0x00..0x17  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>24..255 </para>
</entry><entry>
<para>Unsigned integer (1 byte follow) </para>
</entry><entry>
<para>0x18  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>256..65535 </para>
</entry><entry>
<para>Unsigned integer (2 bytes follow) </para>
</entry><entry>
<para>0x19  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>65536..4294967295 </para>
</entry><entry>
<para>Unsigned integer (4 bytes follow) </para>
</entry><entry>
<para>0x1A  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>4294967296..18446744073709551615 </para>
</entry><entry>
<para>Unsigned integer (8 bytes follow) </para>
</entry><entry>
<para>0x1B  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>0..23 </para>
</entry><entry>
<para>Integer </para>
</entry><entry>
<para>0x00..0x17  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>24..255 </para>
</entry><entry>
<para>Unsigned integer (1 byte follow) </para>
</entry><entry>
<para>0x18  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>256..65535 </para>
</entry><entry>
<para>Unsigned integer (2 bytes follow) </para>
</entry><entry>
<para>0x19  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>65536..4294967295 </para>
</entry><entry>
<para>Unsigned integer (4 bytes follow) </para>
</entry><entry>
<para>0x1A  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>4294967296..18446744073709551615 </para>
</entry><entry>
<para>Unsigned integer (8 bytes follow) </para>
</entry><entry>
<para>0x1B  </para>
</entry></row>
      <row >
<entry>
<para>number_float </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>Double-Precision Float </para>
</entry><entry>
<para>0xFB  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 0..23 </para>
</entry><entry>
<para>UTF-8 string </para>
</entry><entry>
<para>0x60..0x77  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 23..255 </para>
</entry><entry>
<para>UTF-8 string (1 byte follow) </para>
</entry><entry>
<para>0x78  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 256..65535 </para>
</entry><entry>
<para>UTF-8 string (2 bytes follow) </para>
</entry><entry>
<para>0x79  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>UTF-8 string (4 bytes follow) </para>
</entry><entry>
<para>0x7A  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 4294967296..18446744073709551615 </para>
</entry><entry>
<para>UTF-8 string (8 bytes follow) </para>
</entry><entry>
<para>0x7B  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..23 </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para>0x80..0x97  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 23..255 </para>
</entry><entry>
<para>array (1 byte follow) </para>
</entry><entry>
<para>0x98  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 256..65535 </para>
</entry><entry>
<para>array (2 bytes follow) </para>
</entry><entry>
<para>0x99  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>array (4 bytes follow) </para>
</entry><entry>
<para>0x9A  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para>
</entry><entry>
<para>array (8 bytes follow) </para>
</entry><entry>
<para>0x9B  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..23 </para>
</entry><entry>
<para>map </para>
</entry><entry>
<para>0xA0..0xB7  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 23..255 </para>
</entry><entry>
<para>map (1 byte follow) </para>
</entry><entry>
<para>0xB8  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 256..65535 </para>
</entry><entry>
<para>map (2 bytes follow) </para>
</entry><entry>
<para>0xB9  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>map (4 bytes follow) </para>
</entry><entry>
<para>0xBA  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para>
</entry><entry>
<para>map (8 bytes follow) </para>
</entry><entry>
<para>0xBB  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..23 </para>
</entry><entry>
<para>byte string </para>
</entry><entry>
<para>0x40..0x57  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 23..255 </para>
</entry><entry>
<para>byte string (1 byte follow) </para>
</entry><entry>
<para>0x58  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 256..65535 </para>
</entry><entry>
<para>byte string (2 bytes follow) </para>
</entry><entry>
<para>0x59  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>byte string (4 bytes follow) </para>
</entry><entry>
<para>0x5A  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para>
</entry><entry>
<para>byte string (8 bytes follow) </para>
</entry><entry>
<para>0x5B  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>The mapping is <emphasis role="bold">complete</emphasis> in the sense that any JSON value type can be converted to a CBOR value.</para>

<para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump()</link> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para>

<para>The following CBOR types are not used in the conversion:<itemizedlist>
<listitem>
<para>UTF-8 strings terminated by &quot;break&quot; (0x7F)</para>
</listitem><listitem>
<para>arrays terminated by &quot;break&quot; (0x9F)</para>
</listitem><listitem>
<para>maps terminated by &quot;break&quot; (0xBF)</para>
</listitem><listitem>
<para>byte strings terminated by &quot;break&quot; (0x5F)</para>
</listitem><listitem>
<para>date/time (0xC0..0xC1)</para>
</listitem><listitem>
<para>bignum (0xC2..0xC3)</para>
</listitem><listitem>
<para>decimal fraction (0xC4)</para>
</listitem><listitem>
<para>bigfloat (0xC5)</para>
</listitem><listitem>
<para>tagged items (0xC6..0xD4, 0xD8..0xDB)</para>
</listitem><listitem>
<para>expected conversions (0xD5..0xD7)</para>
</listitem><listitem>
<para>simple values (0xE0..0xF3, 0xF8)</para>
</listitem><listitem>
<para>undefined (0xF7)</para>
</listitem><listitem>
<para>half and single-precision floats (0xF9-0xFA)</para>
</listitem><listitem>
<para>break (0xFF)</para>
</listitem></itemizedlist>
</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to serialize </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>MessagePack serialization as byte vector</para>
</formalpara>
@complexity Linear in the size of the JSON value <emphasis>j</emphasis>.</para>

<para>@liveexample{The example shows the serialization of a JSON value to a byte vector in CBOR format.,to_cbor}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://cbor.io">http://cbor.io</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a542cbcfc6f88a23282694bd2c5ddd3d0">from_cbor(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the analogous deserialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack(const basic_json&amp;)</link> for the related MessagePack format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson(const basic_json&amp;, const bool, const bool)</link> for the related UBJSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9 </para>
</formalpara>
</para>
<para>
Definition at line 22474 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a356ef3e5eed7946f7ff1e20501054aea"/>    <section>
    <title>to_cbor()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_cbor</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22486 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1af803f43acdb465ead25e65aa53acbcb8"/>    <section>
    <title>to_cbor()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_cbor</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22481 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4"/>    <section>
    <title>to_msgpack()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_msgpack</secondary></indexterm>
<para><computeroutput>static std::vector&lt;uint8_t&gt; nlohmann::basic_json::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a MessagePack serialization of a given JSON value </para>
</para>

<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the MessagePack serialization format. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para>

<para>The library uses the following mapping from JSON values types to MessagePack types according to the MessagePack specification:</para>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>JSON value type </para>
</entry><entry>
<para>value/range </para>
</entry><entry>
<para>MessagePack type </para>
</entry><entry>
<para>first byte  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>nil </para>
</entry><entry>
<para>0xC0  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>true </para>
</entry><entry>
<para>0xC3  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>false </para>
</entry><entry>
<para>0xC2  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-9223372036854775808..-2147483649 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para>0xD3  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-2147483648..-32769 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para>0xD2  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-32768..-129 </para>
</entry><entry>
<para>int16 </para>
</entry><entry>
<para>0xD1  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-128..-33 </para>
</entry><entry>
<para>int8 </para>
</entry><entry>
<para>0xD0  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-32..-1 </para>
</entry><entry>
<para>negative fixint </para>
</entry><entry>
<para>0xE0..0xFF  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>0..127 </para>
</entry><entry>
<para>positive fixint </para>
</entry><entry>
<para>0x00..0x7F  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>128..255 </para>
</entry><entry>
<para>uint 8 </para>
</entry><entry>
<para>0xCC  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>256..65535 </para>
</entry><entry>
<para>uint 16 </para>
</entry><entry>
<para>0xCD  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>65536..4294967295 </para>
</entry><entry>
<para>uint 32 </para>
</entry><entry>
<para>0xCE  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>4294967296..18446744073709551615 </para>
</entry><entry>
<para>uint 64 </para>
</entry><entry>
<para>0xCF  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>0..127 </para>
</entry><entry>
<para>positive fixint </para>
</entry><entry>
<para>0x00..0x7F  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>128..255 </para>
</entry><entry>
<para>uint 8 </para>
</entry><entry>
<para>0xCC  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>256..65535 </para>
</entry><entry>
<para>uint 16 </para>
</entry><entry>
<para>0xCD  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>65536..4294967295 </para>
</entry><entry>
<para>uint 32 </para>
</entry><entry>
<para>0xCE  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>4294967296..18446744073709551615 </para>
</entry><entry>
<para>uint 64 </para>
</entry><entry>
<para>0xCF  </para>
</entry></row>
      <row >
<entry>
<para>number_float </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>float 64 </para>
</entry><entry>
<para>0xCB  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 0..31 </para>
</entry><entry>
<para>fixstr </para>
</entry><entry>
<para>0xA0..0xBF  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 32..255 </para>
</entry><entry>
<para>str 8 </para>
</entry><entry>
<para>0xD9  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 256..65535 </para>
</entry><entry>
<para>str 16 </para>
</entry><entry>
<para>0xDA  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>length</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>str 32 </para>
</entry><entry>
<para>0xDB  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..15 </para>
</entry><entry>
<para>fixarray </para>
</entry><entry>
<para>0x90..0x9F  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 16..65535 </para>
</entry><entry>
<para>array 16 </para>
</entry><entry>
<para>0xDC  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>array 32 </para>
</entry><entry>
<para>0xDD  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..15 </para>
</entry><entry>
<para>fix map </para>
</entry><entry>
<para>0x80..0x8F  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 16..65535 </para>
</entry><entry>
<para>map 16 </para>
</entry><entry>
<para>0xDE  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>map 32 </para>
</entry><entry>
<para>0xDF  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 0..255 </para>
</entry><entry>
<para>bin 8 </para>
</entry><entry>
<para>0xC4  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 256..65535 </para>
</entry><entry>
<para>bin 16 </para>
</entry><entry>
<para>0xC5  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><emphasis>size</emphasis>: 65536..4294967295 </para>
</entry><entry>
<para>bin 32 </para>
</entry><entry>
<para>0xC6  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>The mapping is <emphasis role="bold">complete</emphasis> in the sense that any JSON value type can be converted to a MessagePack value.</para>

<para>The following values can <emphasis role="bold">not</emphasis> be converted to a MessagePack value:<itemizedlist>
<listitem>
<para>strings with more than 4294967295 bytes</para>
</listitem><listitem>
<para>byte strings with more than 4294967295 bytes</para>
</listitem><listitem>
<para>arrays with more than 4294967295 elements</para>
</listitem><listitem>
<para>objects with more than 4294967295 elements</para>
</listitem></itemizedlist>
</para>

<para>The following MessagePack types are not used in the conversion:<itemizedlist>
<listitem>
<para>float 32 (0xCA)</para>
</listitem></itemizedlist>
</para>

<para>Any MessagePack output created <link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack</link>.</para>

<para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump()</link> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to serialize </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>MessagePack serialization as byte vector</para>
</formalpara>
@complexity Linear in the size of the JSON value <emphasis>j</emphasis>.</para>

<para>@liveexample{The example shows the serialization of a JSON value to a byte vector in MessagePack format.,to_msgpack}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://msgpack.org">http://msgpack.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1af0e3f15d4a01488bcc498321ee7a5a0f">from_msgpack</link> for the analogous deserialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor</link>(const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp; for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson(const basic_json&amp;, const bool, const bool)</link> for the related UBJSON format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.9 </para>
</formalpara>
</para>
<para>
Definition at line 22571 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a28c815e898071099c3c9326174e01749"/>    <section>
    <title>to_msgpack()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_msgpack</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22583 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac258abcc5ccb6f5d46c12d5e66fadf98"/>    <section>
    <title>to_msgpack()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_msgpack</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22578 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34"/>    <section>
    <title>to_ubjson()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_ubjson</secondary></indexterm>
<para><computeroutput>static std::vector&lt;uint8_t&gt; nlohmann::basic_json::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, const bool use_size = <computeroutput>false</computeroutput>
, const bool use_type = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a UBJSON serialization of a given JSON value </para>
</para>

<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the UBJSON (Universal Binary JSON) serialization format. UBJSON aims to be more compact than JSON itself, yet more efficient to parse.</para>

<para>The library uses the following mapping from JSON values types to UBJSON types according to the UBJSON specification:</para>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>JSON value type </para>
</entry><entry>
<para>value/range </para>
</entry><entry>
<para>UBJSON type </para>
</entry><entry>
<para>marker  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>null</computeroutput> </para>
</entry><entry>
<para>null </para>
</entry><entry>
<para><computeroutput>Z</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>true</computeroutput> </para>
</entry><entry>
<para>true </para>
</entry><entry>
<para><computeroutput>T</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>false</computeroutput> </para>
</entry><entry>
<para>false </para>
</entry><entry>
<para><computeroutput>F</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-9223372036854775808..-2147483649 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para><computeroutput>L</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-2147483648..-32769 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para><computeroutput>l</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-32768..-129 </para>
</entry><entry>
<para>int16 </para>
</entry><entry>
<para><computeroutput>I</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>-128..127 </para>
</entry><entry>
<para>int8 </para>
</entry><entry>
<para><computeroutput>i</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>128..255 </para>
</entry><entry>
<para>uint8 </para>
</entry><entry>
<para><computeroutput>U</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>256..32767 </para>
</entry><entry>
<para>int16 </para>
</entry><entry>
<para><computeroutput>I</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>32768..2147483647 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para><computeroutput>l</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_integer </para>
</entry><entry>
<para>2147483648..9223372036854775807 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para><computeroutput>L</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>0..127 </para>
</entry><entry>
<para>int8 </para>
</entry><entry>
<para><computeroutput>i</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>128..255 </para>
</entry><entry>
<para>uint8 </para>
</entry><entry>
<para><computeroutput>U</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>256..32767 </para>
</entry><entry>
<para>int16 </para>
</entry><entry>
<para><computeroutput>I</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>32768..2147483647 </para>
</entry><entry>
<para>int32 </para>
</entry><entry>
<para><computeroutput>l</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_unsigned </para>
</entry><entry>
<para>2147483648..9223372036854775807 </para>
</entry><entry>
<para>int64 </para>
</entry><entry>
<para><computeroutput>L</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number_float </para>
</entry><entry>
<para><emphasis>any value</emphasis> </para>
</entry><entry>
<para>float64 </para>
</entry><entry>
<para><computeroutput>D</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><emphasis>with shortest length indicator</emphasis> </para>
</entry><entry>
<para>string </para>
</entry><entry>
<para><computeroutput>S</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><emphasis>see notes on optimized format</emphasis> </para>
</entry><entry>
<para>array </para>
</entry><entry>
<para><computeroutput>[</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><emphasis>see notes on optimized format</emphasis> </para>
</entry><entry>
<para>map </para>
</entry><entry>
<para><computeroutput>{</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><note><title>Note</title>

<para>The mapping is <emphasis role="bold">complete</emphasis> in the sense that any JSON value type can be converted to a UBJSON value.</para>

<para>The following values can <emphasis role="bold">not</emphasis> be converted to a UBJSON value:<itemizedlist>
<listitem>
<para>strings with more than 9223372036854775807 bytes (theoretical)</para>
</listitem><listitem>
<para>unsigned integer numbers above 9223372036854775807</para>
</listitem></itemizedlist>
</para>

<para>The following markers are not used in the conversion:<itemizedlist>
<listitem>
<para><computeroutput>Z</computeroutput>: no-op values are not created.</para>
</listitem><listitem>
<para><computeroutput>C</computeroutput>: single-byte strings are serialized with <computeroutput>S</computeroutput> markers.</para>
</listitem></itemizedlist>
</para>

<para>Any UBJSON output created <link linkend="_classnlohmann_1_1basic__json_1ad87e7cef6373d292b8c6f471c87bfb34">to_ubjson</link> can be successfully parsed by <link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson</link>.</para>

<para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump()</link> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para>

<para>The optimized formats for containers are supported: Parameter <emphasis>use_size</emphasis> adds size information to the beginning of a container and removes the closing marker. Parameter <emphasis>use_type</emphasis> further checks whether all elements of a container have the same type and adds the type marker to the beginning of the container. The <emphasis>use_type</emphasis> parameter must only be used together with <emphasis>use_size</emphasis> = true. Note that <emphasis>use_size</emphasis> = true alone may result in larger representations - the benefit of this parameter is that the receiving side is immediately informed on the number of elements of the container.</para>

<para>If the JSON data contains the binary type, the value stored is a list of integers, as suggested by the UBJSON documentation. In particular, this means that serialization and the deserialization of a JSON containing binary values into UBJSON and back will result in a different JSON object.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to serialize </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>use_size</entry>
                                <entry>
<para>whether to add size annotations to container types </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>use_type</entry>
                                <entry>
<para>whether to add type annotations to container types (must be combined with <emphasis>use_size</emphasis> = true) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>UBJSON serialization as byte vector</para>
</formalpara>
@complexity Linear in the size of the JSON value <emphasis>j</emphasis>.</para>

<para>@liveexample{The example shows the serialization of a JSON value to a byte vector in UBJSON format.,to_ubjson}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://ubjson.org">http://ubjson.org</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aff9a614c620f13064094bb4bd110a67a">from_ubjson(detail::input_adapter&amp;&amp;, const bool, const bool)</link> for the analogous deserialization </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aa0345b54ea150f6f803444766832979a">to_cbor</link>(const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&amp; for the related CBOR format </para>

<para><link linkend="_classnlohmann_1_1basic__json_1aac4398704ac872368c735b40738ae1c4">to_msgpack(const basic_json&amp;)</link> for the related MessagePack format</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.1.0 </para>
</formalpara>
</para>
<para>
Definition at line 22674 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac427addfb0fb31b0c482d304557e4461"/>    <section>
    <title>to_ubjson()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_ubjson</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; char &gt; o, const bool use_size = <computeroutput>false</computeroutput>
, const bool use_type = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22689 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a52df3c307adc4224c4be2723d6a73e4e"/>    <section>
    <title>to_ubjson()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>to_ubjson</secondary></indexterm>
<para><computeroutput>static void nlohmann::basic_json::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, <link linkend="_classnlohmann_1_1detail_1_1output__adapter">detail::output_adapter</link>&lt; uint8_t &gt; o, const bool use_size = <computeroutput>false</computeroutput>
, const bool use_type = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line 22683 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00"/>    <section>
    <title>type()</title>
<indexterm><primary>type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>type</secondary></indexterm>
<para><computeroutput>constexpr <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> nlohmann::basic_json::type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type of the JSON value (explicit) </para>
</para>

<para>Return the type of the JSON value as a value from the <link linkend="_classnlohmann_1_1basic__json_1a4e43b685789a169bca7e69b3104c86d1">value_t</link> enumeration.</para>

<para><formalpara><title>Returns</title>

<para>the type of the JSON value <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>return value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">value_t::boolean</link>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">value_t::string</link>  </para>
</entry></row>
      <row >
<entry>
<para>number (integer) </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">value_t::number_integer</link>  </para>
</entry></row>
      <row >
<entry>
<para>number (unsigned integer) </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">value_t::number_unsigned</link>  </para>
</entry></row>
      <row >
<entry>
<para>number (floating-point) </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">value_t::number_float</link>  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</link>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">value_t::array</link>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">value_t::binary</link>  </para>
</entry></row>
      <row >
<entry>
<para>discarded </para>
</entry><entry>
<para><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">value_t::discarded</link>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@complexity Constant.</para>

<para>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type()</link></computeroutput> for all JSON types.,type}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a568197da17e5f7f9889607a2524497c6">operator value_t()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> of the JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> (implicit) </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a0fb9647ea72df0a3099cf6dd7e3f53e9">type_name()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> as string</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 17769 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0fb9647ea72df0a3099cf6dd7e3f53e9"/>    <section>
    <title>type_name()</title>
<indexterm><primary>type_name</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>type_name</secondary></indexterm>
<para><computeroutput>const <link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> char* nlohmann::basic_json::type_name ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type as string </para>
</para>

<para>Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type.</para>

<para><formalpara><title>Returns</title>

<para>a string representation of a the <emphasis>m_type</emphasis> member: <informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row >
<entry>
<para>Value type </para>
</entry><entry>
<para>return value  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>null </para>
</entry><entry>
<para><computeroutput>&quot;null&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>boolean </para>
</entry><entry>
<para><computeroutput>&quot;boolean&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>string </para>
</entry><entry>
<para><computeroutput>&quot;string&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>number </para>
</entry><entry>
<para><computeroutput>&quot;number&quot;</computeroutput> (for all number types)  </para>
</entry></row>
      <row >
<entry>
<para>object </para>
</entry><entry>
<para><computeroutput>&quot;object&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>array </para>
</entry><entry>
<para><computeroutput>&quot;array&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>binary </para>
</entry><entry>
<para><computeroutput>&quot;binary&quot;</computeroutput>  </para>
</entry></row>
      <row >
<entry>
<para>discarded </para>
</entry><entry>
<para><computeroutput>&quot;discarded&quot;</computeroutput>  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</formalpara>
@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@complexity Constant.</para>

<para>@liveexample{The following code exemplifies <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a0fb9647ea72df0a3099cf6dd7e3f53e9">type_name()</link></computeroutput> for all JSON types.,type_name}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> of the JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> </para>

<para><link linkend="_classnlohmann_1_1basic__json_1a568197da17e5f7f9889607a2524497c6">operator value_t()</link> &#8211; return the <link linkend="_classnlohmann_1_1basic__json_1a530ad60b7fb590e0ee45b6803144cc00">type</link> of the JSON <link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value</link> (implicit)</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0, public since 2.1.0, <computeroutput>const char*</computeroutput> and <computeroutput>noexcept</computeroutput> since 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 22336 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8"/>    <section>
    <title>unflatten()</title>
<indexterm><primary>unflatten</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>unflatten</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> nlohmann::basic_json::unflatten ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>unflatten a previously flattened JSON value </para>
</para>

<para>The function restores the arbitrary nesting of a JSON value that has been flattened before using the <link linkend="_classnlohmann_1_1basic__json_1ae91348b027208339c94dbbc6fd769929">flatten()</link> function. The JSON value must meet certain constraints:<orderedlist>
<listitem>
<para>The value must be an object.</para>
</listitem><listitem>
<para>The keys must be JSON pointers (see <link xlink:href="https://tools.ietf.org/html/rfc6901">RFC 6901</link>)</para>
</listitem><listitem>
<para>The mapped values must be primitive JSON types.</para>
</listitem></orderedlist>
</para>

<para><formalpara><title>Returns</title>

<para>the original JSON from a flattened version</para>
</formalpara>
<note><title>Note</title>

<para>Empty objects and arrays are flattened by <link linkend="_classnlohmann_1_1basic__json_1ae91348b027208339c94dbbc6fd769929">flatten()</link> to <computeroutput>null</computeroutput> values and can not unflattened to their original type. Apart from this example, for a JSON value <computeroutput>j</computeroutput>, the following is always true: <computeroutput>j == j.flatten().<link linkend="_classnlohmann_1_1basic__json_1ac63d16a141ee5c2046410d2d0ba4cec8">unflatten()</link></computeroutput>.</para>
</note>
@complexity Linear in the size the JSON value.</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.314</entry>
                                <entry>
<para>if value is not an object </para>
</entry>
                            </row>
                            <row>
                                <entry>type_error.315</entry>
                                <entry>
<para>if object values are not primitive</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @liveexample{The following code shows how a flattened JSON object is unflattened into the original nested JSON object.,unflatten}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1ae91348b027208339c94dbbc6fd769929">flatten()</link> for the reverse function</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 23420 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a0dbd5c8bdff3d633ff6d1d373297b777"/>    <section>
    <title>update()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::update (<link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1a7a09a580613f00c73015c19e5e7c44ba">const_iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</para>

<para>Inserts all values from from range <computeroutput>[first, last)</computeroutput> and overwrites existing keys.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>first</entry>
                                <entry>
<para>begin of the range of elements to insert </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>last</entry>
                                <entry>
<para>end of the range of elements to insert</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.312</entry>
                                <entry>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use update() with string&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.202</entry>
                                <entry>
<para>if iterator <emphasis>first</emphasis> or <emphasis>last</emphasis> does does not point to an object; example: <computeroutput>&quot;iterators first and last must point to
objects&quot;</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>invalid_iterator.210</entry>
                                <entry>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity O(N*log(<link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> + N)), where N is the number of elements to insert.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85">update()</link></computeroutput> is used__range.,update}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://docs.python.org/3.6/library/stdtypes.html#dict.update">https://docs.python.org/3.6/library/stdtypes.html#dict.update</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21330 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85"/>    <section>
    <title>update()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void nlohmann::basic_json::update (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> j)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</para>

<para>Inserts all values from JSON object <emphasis>j</emphasis> and overwrites existing keys.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON object to read values from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.312</entry>
                                <entry>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use update() with string&quot;</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity O(N*log(<link linkend="_classnlohmann_1_1basic__json_1aaa2519eb5a174547b8a2f6019def9b65">size()</link> + N)), where N is the number of elements to insert.</para>

<para>@liveexample{The example shows how <computeroutput><link linkend="_classnlohmann_1_1basic__json_1a6c02637be3d8bd730a14082cc05f7a85">update()</link></computeroutput> is used.,update}</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://docs.python.org/3.6/library/stdtypes.html#dict.update">https://docs.python.org/3.6/library/stdtypes.html#dict.update</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21279 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5dfdaa906f429f5f8b6e14db46e94852"/>    <section>
    <title>value()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> nlohmann::basic_json::value (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>overload for a default value of type const char* </para>
</para>
<para>
Definition at line 19288 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a23d4ac15d8df59f36967a46a49dd896d"/>    <section>
    <title>value()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>ValueType nlohmann::basic_json::value (const <link linkend="_classnlohmann_1_1basic__json_1a352187a5ebf3cde865be1b833c18f208">json_pointer</link> &amp; ptr, const ValueType &amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element via JSON Pointer with default value </para>
</para>

<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para>

<para>The function is basically equivalent to executing <literallayout><computeroutput>try&#32;{
&#32;&#32;&#32;&#32;return&#32;at(ptr);
}&#32;catch(out_of_range)&#32;{
&#32;&#32;&#32;&#32;return&#32;default_value;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>Unlike <link linkend="_classnlohmann_1_1basic__json_1ac07f0518ba7a3af394d37d86753a9845">at(const json_pointer&amp;)</link>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>a JSON pointer to the element to access </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>default_value</entry>
                                <entry>
<para>the value to return if <emphasis>ptr</emphasis> found no value</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.302</entry>
                                <entry>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>ptr</emphasis> </para>
</entry>
                            </row>
                            <row>
                                <entry>type_error.306</entry>
                                <entry>
<para>if the JSON value is not an object; in that case, using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link></computeroutput> with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value_ptr}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a0d26844b03de9067a47752b138e28236">operator[](const json_pointer&amp;)</link> for unchecked access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.2 </para>
</formalpara>
</para>
<para>
Definition at line 19264 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7a378b9282dd1f7eb9bfffea6d177bbe"/>    <section>
    <title>value()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value</secondary></indexterm>
<para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a561057a2cc70397ad0ab890745d1d7c7">string_t</link> nlohmann::basic_json::value (const typename object_t::key_type &amp; key, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>overload for a default value of type const char* </para>
</para>

<para>access specified object element with default value Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para>

<para>The function is basically equivalent to executing <literallayout><computeroutput>try&#32;{
&#32;&#32;&#32;&#32;return&#32;at(key);
}&#32;catch(out_of_range)&#32;{
&#32;&#32;&#32;&#32;return&#32;default_value;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>Unlike <link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para>

<para>Unlike <link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp; key)</link>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>default_value</entry>
                                <entry>
<para>the value to return if <emphasis>key</emphasis> is not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.302</entry>
                                <entry>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>key</emphasis> </para>
</entry>
                            </row>
                            <row>
                                <entry>type_error.306</entry>
                                <entry>
<para>if the JSON value is not an object; in that case, using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link></computeroutput> with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp;)</link> for unchecked access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19214 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245"/>    <section>
    <title>value()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>ValueType nlohmann::basic_json::value (const typename object_t::key_type &amp; key, const ValueType &amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with default value </para>
</para>

<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para>

<para>The function is basically equivalent to executing <literallayout><computeroutput>try&#32;{
&#32;&#32;&#32;&#32;return&#32;at(key);
}&#32;catch(out_of_range)&#32;{
&#32;&#32;&#32;&#32;return&#32;default_value;
}
</computeroutput></literallayout></para>

<para><note><title>Note</title>

<para>Unlike <link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para>

<para>Unlike <link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp; key)</link>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>key of the element to access </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>default_value</entry>
                                <entry>
<para>the value to return if <emphasis>key</emphasis> is not found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ValueType</entry>
                                <entry>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.302</entry>
                                <entry>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>key</emphasis> </para>
</entry>
                            </row>
                            <row>
                                <entry>type_error.306</entry>
                                <entry>
<para>if the JSON value is not an object; in that case, using <computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab29a59d20767180d6d2fe4f5054dd245">value()</link></computeroutput> with a key makes no sense.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Logarithmic in the size of the container.</para>

<para>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value}</para>

<para><formalpara><title>See also</title>

<para><link linkend="_classnlohmann_1_1basic__json_1a157868dfcf060bf67fa423bafbf27b57">at(const typename object_t::key_type&amp;)</link> for access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link> with range checking </para>

<para><link linkend="_classnlohmann_1_1basic__json_1ad983106f7d7fd6a03cf609a9641976f4">operator[](const typename object_t::key_type&amp;)</link> for unchecked access by <link linkend="_classnlohmann_1_1basic__json_1af11372ea846fedea8b2098dba7323831">reference</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 19192 of file json.hpp.</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3226693341c251507fec5d6f4fa5ce79"/>    <section>
    <title>::nlohmann::detail::binary_reader</title>
<indexterm><primary>::nlohmann::detail::binary_reader</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>::nlohmann::detail::binary_reader</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename SAX &gt; </computeroutput><para><computeroutput>friend class ::<link linkend="_classnlohmann_1_1detail_1_1binary__reader">nlohmann::detail::binary_reader</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15666 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf"/>    <section>
    <title>::nlohmann::detail::binary_writer</title>
<indexterm><primary>::nlohmann::detail::binary_writer</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>::nlohmann::detail::binary_writer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CharType &gt; </computeroutput><para><computeroutput>friend class ::<link linkend="_classnlohmann_1_1detail_1_1binary__writer">nlohmann::detail::binary_writer</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15664 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4"/>    <section>
    <title>::nlohmann::detail::iter_impl</title>
<indexterm><primary>::nlohmann::detail::iter_impl</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>::nlohmann::detail::iter_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class ::<link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15662 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da"/>    <section>
    <title>::nlohmann::detail::json_sax_dom_callback_parser</title>
<indexterm><primary>::nlohmann::detail::json_sax_dom_callback_parser</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>::nlohmann::detail::json_sax_dom_callback_parser</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class ::<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">nlohmann::detail::json_sax_dom_callback_parser</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15670 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60"/>    <section>
    <title>::nlohmann::detail::json_sax_dom_parser</title>
<indexterm><primary>::nlohmann::detail::json_sax_dom_parser</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>::nlohmann::detail::json_sax_dom_parser</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class ::<link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">nlohmann::detail::json_sax_dom_parser</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15668 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c"/>    <section>
    <title>detail::external_constructor</title>
<indexterm><primary>detail::external_constructor</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>detail::external_constructor</secondary></indexterm>
<computeroutput>template&lt;detail::value_t &gt; </computeroutput><para><computeroutput>friend struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor">detail::external_constructor</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line 15657 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ab0e886db6e9fa91ff9fd853333fed05b"/>    <section>
    <title>operator!=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator!= (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21687 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1afefc38fc08bdb7a9a7474b5ab4a1140f"/>    <section>
    <title>operator!=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator!= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21676 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327"/>    <section>
    <title>operator!=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool operator!= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para>Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21665 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1abed3e9b4ab75f5bcbd3cd20f5af5cdab"/>    <section>
    <title>operator&lt;<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&lt; (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem>
<para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison</para>
</listitem><listitem>
<para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__less}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21808 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7999ee3a69a4979d92e98ab1e88c8759"/>    <section>
    <title>operator&lt;<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&lt; (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem>
<para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison</para>
</listitem><listitem>
<para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__less}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21797 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3"/>    <section>
    <title>operator&lt;<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput>bool operator&lt; (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem>
<para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison</para>
</listitem><listitem>
<para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__less}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21718 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a60ca396028b8d9714c6e10efbf475af6"/>    <section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::istream&amp; operator&lt;&lt; (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, std::istream &amp; i)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>deserialize from stream </para>
</para>

<para><para><link linkend="_deprecated_1_deprecated000003">Deprecated</link> 
<para>This stream operator is deprecated and will be removed in version 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8">operator&gt;&gt;(std::istream&amp;, basic_json&amp;)</link> instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para>
</para><formalpara><title>Since</title>

<para>version 1.0.0; deprecated since version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 22262 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405"/>    <section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; o, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>serialize to stream </para>
</para>

<para>Serialize the given JSON value <emphasis>j</emphasis> to the output stream <emphasis>o</emphasis>. The JSON value will be serialized using the <link linkend="_classnlohmann_1_1basic__json_1aa9a85530a6669e7bd41e5335aa8abf19">dump</link> member function.</para>

<para><itemizedlist>
<listitem>
<para>The indentation of the output can be controlled with the member variable <computeroutput>width</computeroutput> of the output stream <emphasis>o</emphasis>. For instance, using the manipulator <computeroutput>std::setw(4)</computeroutput> on <emphasis>o</emphasis> sets the indentation level to <computeroutput>4</computeroutput> and the serialization result is the same as calling <computeroutput>dump(4)</computeroutput>.</para>
</listitem><listitem>
<para>The indentation character can be controlled with the member variable <computeroutput>fill</computeroutput> of the output stream <emphasis>o</emphasis>. For instance, the manipulator &#8216;std::setfill(&#8217;\t&apos;)` sets indentation to use a tab character rather than the default space character.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>o</entry>
                                <entry>
<para>stream to serialize to </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to serialize</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the stream <emphasis>o</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>type_error.316</entry>
                                <entry>
<para>if a string stored inside the JSON value is not UTF-8 encoded</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear.</para>

<para>@liveexample{The example below shows the serialization with different parameters to <computeroutput>width</computeroutput> to adjust the indentation level.,operator_serialize}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0; indentation character added in version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21991 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1ad73f88f70fe5acfa521750a8cd710026"/>    <section>
    <title>operator&lt;=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&lt;= (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greater}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21854 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a7e368211047f725f333696aefdf39ffd"/>    <section>
    <title>operator&lt;=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&lt;= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greater}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21843 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac"/>    <section>
    <title>operator&lt;=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&lt;=</secondary></indexterm>
<para><computeroutput>bool operator&lt;= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greater}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21832 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aef302e3ae215e46e5035d0e4fdf47235"/>    <section>
    <title>operator==<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator== (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem>
<para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para>
</listitem><listitem>
<para>Two JSON null values are equal.</para>
</listitem></itemizedlist>
</para>

<para><note><title>Note</title>

<para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <link xlink:href="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</link> could be used, for instance <literallayout><computeroutput>template&lt;typename&#32;T,&#32;typename&#32;=&#32;typename&#32;std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,&#32;T&gt;::type&gt;
inline&#32;bool&#32;is_same(T&#32;a,&#32;T&#32;b,&#32;T&#32;epsilon&#32;=&#32;std::numeric_limits&lt;T&gt;::epsilon())&#32;noexcept
{
&#32;&#32;&#32;&#32;return&#32;std::abs(a&#32;-&#32;b)&#32;&lt;=&#32;epsilon;
}
</computeroutput></literallayout> Or you can self-defined operator equal function like this: <literallayout><computeroutput>bool&#32;my_equal(const_reference&#32;lhs,&#32;const_reference&#32;rhs)&#32;{
const&#32;auto&#32;lhs_type&#32;lhs.type();
const&#32;auto&#32;rhs_type&#32;rhs.type();
if&#32;(lhs_type&#32;==&#32;rhs_type)&#32;{
&#32;&#32;&#32;&#32;switch(lhs_type)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;self_defined&#32;case
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;value_t::number_float:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;std::abs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;std::numeric_limits&lt;float&gt;::epsilon();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;other&#32;cases&#32;remain&#32;the&#32;same&#32;with&#32;the&#32;original
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...
}
...
}
</computeroutput></literallayout></para>

<para>NaN values never compare equal to themselves or to other NaN values.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para>
</formalpara>
@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@complexity Linear.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21642 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aba21440ea1aff44f718285ed7d6d20d9"/>    <section>
    <title>operator==<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator== (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem>
<para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para>
</listitem><listitem>
<para>Two JSON null values are equal.</para>
</listitem></itemizedlist>
</para>

<para><note><title>Note</title>

<para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <link xlink:href="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</link> could be used, for instance <literallayout><computeroutput>template&lt;typename&#32;T,&#32;typename&#32;=&#32;typename&#32;std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,&#32;T&gt;::type&gt;
inline&#32;bool&#32;is_same(T&#32;a,&#32;T&#32;b,&#32;T&#32;epsilon&#32;=&#32;std::numeric_limits&lt;T&gt;::epsilon())&#32;noexcept
{
&#32;&#32;&#32;&#32;return&#32;std::abs(a&#32;-&#32;b)&#32;&lt;=&#32;epsilon;
}
</computeroutput></literallayout> Or you can self-defined operator equal function like this: <literallayout><computeroutput>bool&#32;my_equal(const_reference&#32;lhs,&#32;const_reference&#32;rhs)&#32;{
const&#32;auto&#32;lhs_type&#32;lhs.type();
const&#32;auto&#32;rhs_type&#32;rhs.type();
if&#32;(lhs_type&#32;==&#32;rhs_type)&#32;{
&#32;&#32;&#32;&#32;switch(lhs_type)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;self_defined&#32;case
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;value_t::number_float:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;std::abs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;std::numeric_limits&lt;float&gt;::epsilon();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;other&#32;cases&#32;remain&#32;the&#32;same&#32;with&#32;the&#32;original
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...
}
...
}
</computeroutput></literallayout></para>

<para>NaN values never compare equal to themselves or to other NaN values.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para>
</formalpara>
@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@complexity Linear.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21631 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e"/>    <section>
    <title>operator==<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool operator== (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para>Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem>
<para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para>
</listitem><listitem>
<para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para>
</listitem><listitem>
<para>Two JSON null values are equal.</para>
</listitem></itemizedlist>
</para>

<para><note><title>Note</title>

<para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <link xlink:href="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</link> could be used, for instance <literallayout><computeroutput>template&lt;typename&#32;T,&#32;typename&#32;=&#32;typename&#32;std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,&#32;T&gt;::type&gt;
inline&#32;bool&#32;is_same(T&#32;a,&#32;T&#32;b,&#32;T&#32;epsilon&#32;=&#32;std::numeric_limits&lt;T&gt;::epsilon())&#32;noexcept
{
&#32;&#32;&#32;&#32;return&#32;std::abs(a&#32;-&#32;b)&#32;&lt;=&#32;epsilon;
}
</computeroutput></literallayout> Or you can self-defined operator equal function like this: <literallayout><computeroutput>bool&#32;my_equal(const_reference&#32;lhs,&#32;const_reference&#32;rhs)&#32;{
const&#32;auto&#32;lhs_type&#32;lhs.type();
const&#32;auto&#32;rhs_type&#32;rhs.type();
if&#32;(lhs_type&#32;==&#32;rhs_type)&#32;{
&#32;&#32;&#32;&#32;switch(lhs_type)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;self_defined&#32;case
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;value_t::number_float:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;std::abs(lhs&#32;-&#32;rhs)&#32;&lt;=&#32;std::numeric_limits&lt;float&gt;::epsilon();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;other&#32;cases&#32;remain&#32;the&#32;same&#32;with&#32;the&#32;original
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...
}
...
}
</computeroutput></literallayout></para>

<para>NaN values never compare equal to themselves or to other NaN values.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para>
</formalpara>
@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@complexity Linear.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21557 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a124c319566198d9f092c5bebea46ce77"/>    <section>
    <title>operator&gt;<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&gt; (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__lessequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21900 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a412895af9a582869a4d369a64fb1b6d6"/>    <section>
    <title>operator&gt;<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&gt; (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__lessequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21889 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8"/>    <section>
    <title>operator&gt;<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;</secondary></indexterm>
<para><computeroutput>bool operator&gt; (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__lessequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21878 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a5ee0e3e8afc7cbd932d6ed66418fa80a"/>    <section>
    <title>operator&gt;=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&gt;= (const ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greaterequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21946 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a68e3a92b3d9be1faa05c92d096299189"/>    <section>
    <title>operator&gt;=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </computeroutput><para><computeroutput>bool operator&gt;= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, const ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greaterequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21935 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453"/>    <section>
    <title>operator&gt;=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;=</secondary></indexterm>
<para><computeroutput>bool operator&gt;= (<link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ae83ab5539e404c901ab216aafc9dc6d9">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>lhs</entry>
                                <entry>
<para>first JSON value to consider </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rhs</entry>
                                <entry>
<para>second JSON value to consider </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear.</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions.</para>

<para>@liveexample{The example demonstrates comparing several JSON types.,operator__greaterequal}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 21924 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a34d6a60dd99e9f33b8273a1c8db5669b"/>    <section>
    <title>operator&gt;&gt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&gt;&gt; (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j, std::ostream &amp; o)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>serialize to stream </para>
</para>

<para><para><link linkend="_deprecated_1_deprecated000002">Deprecated</link> 
<para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405">operator&lt;&lt;(std::ostream&amp;, const basic_json&amp;)</link> instead; that is, replace calls like <computeroutput>j &gt;&gt; o;</computeroutput> with <computeroutput>o &lt;&lt; j;</computeroutput>. </para>
</para><formalpara><title>Since</title>

<para>version 1.0.0; deprecated since version 3.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 22015 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8"/>    <section>
    <title>operator&gt;&gt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream&amp; operator&gt;&gt; (std::istream &amp; i, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; j)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>deserialize from stream </para>
</para>

<para>Deserializes an input stream to a JSON value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>i</entry>
                                <entry>
<para>input stream to read a serialized JSON value from </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>j</entry>
                                <entry>
<para>JSON value to write the deserialized input to</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parse_error.101</entry>
                                <entry>
<para>in case of an unexpected token </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.102</entry>
                                <entry>
<para>if to_unicode fails or surrogate error </para>
</entry>
                            </row>
                            <row>
                                <entry>parse_error.103</entry>
                                <entry>
<para>if to_unicode fails</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the length of the input. The parser is a predictive LL(1) parser.</para>

<para><note><title>Note</title>

<para>A UTF-8 byte order mark is silently ignored.</para>
</note>
@liveexample{The example below shows how a JSON value is constructed by reading a serialization from a stream.,operator_deserialize}</para>

<para><formalpara><title>See also</title>

<para>parse(std::istream&amp;, const parser_callback_t) for a variant with a <link linkend="_classnlohmann_1_1basic__json_1adf6340d9881839847d6b7423c5a85e50">parser</link> callback function to filter values while parsing</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<para>
Definition at line 22292 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5f22d74455ea3e1bb6a8a2c31e6be6be"/>    <section>
    <title>m_type</title>
<indexterm><primary>m_type</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>m_type</secondary></indexterm>
<para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> nlohmann::basic_json::m_type = <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">value_t::null</link><computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the type of the current element </para>
</para>
<para>
Definition at line 22368 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1basic__json_1a19622cd7064559888959fe0ef3882bea"/>    <section>
    <title>m_value</title>
<indexterm><primary>m_value</primary><secondary>nlohmann::basic_json</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json</primary><secondary>m_value</secondary></indexterm>
<para><computeroutput><link linkend="_unionnlohmann_1_1basic__json_1_1json__value">json_value</link> nlohmann::basic_json::m_value = {}<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the value of the current element </para>
</para>
<para>
Definition at line 22371 of file json.hpp.</para>
</section>
</section>
</section>
