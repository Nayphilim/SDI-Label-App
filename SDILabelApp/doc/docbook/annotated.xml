<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer&lt; typename, typename &gt;</link>
<para>Default JSONSerializer template argument </para>
<link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>
<para>Class to store JSON values </para>
<link linkend="_classnlohmann_1_1detail_1_1binary__reader">nlohmann::detail::binary_reader&lt; BasicJsonType, SAX &gt;</link>
<para>Deserialization of CBOR, MessagePack, and UBJSON values </para>
<link linkend="_classnlohmann_1_1detail_1_1binary__writer">nlohmann::detail::binary_writer&lt; BasicJsonType, CharType &gt;</link>
<para>Serialization to CBOR and MessagePack values </para>
<link linkend="_structnlohmann_1_1detail_1_1dtoa__impl_1_1boundaries">nlohmann::detail::dtoa_impl::boundaries</link><link linkend="_structnlohmann_1_1detail_1_1dtoa__impl_1_1cached__power">nlohmann::detail::dtoa_impl::cached_power</link><link linkend="_classclass_file">classFile</link>
<para>This class manages all class file functionaility </para>
<link linkend="_classclass_list_creator">classListCreator</link><link linkend="_classclass_management">classManagement</link>
<para>This class handles the dialog for managing classes </para>
<link linkend="_structnlohmann_1_1detail_1_1conjunction">nlohmann::detail::conjunction&lt;... &gt;</link><link linkend="_structnlohmann_1_1detail_1_1conjunction_3_01_b1_01_4">nlohmann::detail::conjunction&lt; B1 &gt;</link><link linkend="_structnlohmann_1_1detail_1_1conjunction_3_01_b1_00_01_bn_8_8_8_01_4">nlohmann::detail::conjunction&lt; B1, Bn... &gt;</link><link linkend="_structnlohmann_1_1detail_1_1detector">nlohmann::detail::detector&lt; Default, AlwaysVoid, Op, Args &gt;</link><link linkend="_structnlohmann_1_1detail_1_1detector_3_01_default_00_01void__t_3_01_op_3_01_args_8_8_8_01_4_01_4_00_01_op_00_01_args_8_8_8_01_4">nlohmann::detail::detector&lt; Default, void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</link><link linkend="_structnlohmann_1_1detail_1_1dtoa__impl_1_1diyfp">nlohmann::detail::dtoa_impl::diyfp</link><link linkend="_classnlohmann_1_1detail_1_1exception">nlohmann::detail::exception</link>
<para>General exception of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class </para>
<link linkend="_structnlohmann_1_1detail_1_1external__constructor">nlohmann::detail::external_constructor&lt; value_t &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4">nlohmann::detail::external_constructor&lt; value_t::array &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1binary_01_4">nlohmann::detail::external_constructor&lt; value_t::binary &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1boolean_01_4">nlohmann::detail::external_constructor&lt; value_t::boolean &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__float_01_4">nlohmann::detail::external_constructor&lt; value_t::number_float &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__integer_01_4">nlohmann::detail::external_constructor&lt; value_t::number_integer &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4">nlohmann::detail::external_constructor&lt; value_t::number_unsigned &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4">nlohmann::detail::external_constructor&lt; value_t::object &gt;</link><link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4">nlohmann::detail::external_constructor&lt; value_t::string &gt;</link><link linkend="_classnlohmann_1_1detail_1_1file__input__adapter">nlohmann::detail::file_input_adapter</link><link linkend="_structnlohmann_1_1detail_1_1from__json__fn">nlohmann::detail::from_json_fn</link><link linkend="_structnlohmann_1_1detail_1_1has__from__json">nlohmann::detail::has_from_json&lt; BasicJsonType, T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1has__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01e29213c543deddccc314d19cbaf9f3b4">nlohmann::detail::has_from_json&lt; BasicJsonType, T, enable_if_t&lt; not is_basic_json&lt; T &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">nlohmann::detail::has_non_default_from_json&lt; BasicJsonType, T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json_3_01_basic_json_type_00_01_t_00_01enab81bd4c814ac1146ff15f3f4636933207">nlohmann::detail::has_non_default_from_json&lt; BasicJsonType, T, enable_if_t&lt; not is_basic_json&lt; T &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1has__to__json">nlohmann::detail::has_to_json&lt; BasicJsonType, T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1has__to__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01nob111e71d40e2273c290d1ce5c6a3b84f">nlohmann::detail::has_to_json&lt; BasicJsonType, T, enable_if_t&lt; not is_basic_json&lt; T &gt;::value &gt; &gt;</link><link linkend="_structstd_1_1hash_3_01nlohmann_1_1json_01_4">std::hash&lt; nlohmann::json &gt;</link>
<para>Hash value for JSON objects </para>
<link linkend="_structnlohmann_1_1detail_1_1index__sequence">nlohmann::detail::index_sequence&lt; Ints &gt;</link><link linkend="_classnlohmann_1_1detail_1_1input__adapter">nlohmann::detail::input_adapter</link><link linkend="_structnlohmann_1_1detail_1_1input__adapter__protocol">nlohmann::detail::input_adapter_protocol</link>
<para>Abstract input adapter interface </para>
<link linkend="_classnlohmann_1_1detail_1_1input__buffer__adapter">nlohmann::detail::input_buffer_adapter</link>
<para>Input adapter for buffer input </para>
<link linkend="_classnlohmann_1_1detail_1_1input__stream__adapter">nlohmann::detail::input_stream_adapter</link><link linkend="_structnlohmann_1_1basic__json_1_1internal__binary__t">nlohmann::basic_json::internal_binary_t</link>
<para>Internal type for a backed binary type </para>
<link linkend="_structnlohmann_1_1detail_1_1internal__iterator">nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;</link>
<para>Iterator value </para>
<link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">nlohmann::detail::invalid_iterator</link>
<para>Exception indicating errors with iterators </para>
<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">nlohmann::detail::is_basic_json&lt; typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__basic__json_3_01_n_l_o_h_m_a_n_n___b_a_s_i_c___j_s_o_n___t_p_l_01_4">nlohmann::detail::is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type">nlohmann::detail::is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl">nlohmann::detail::is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl_3_01_basic_json_type_00_01_compati04c4671a9fa75002365be1949a74f972">nlohmann::detail::is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, enable_if_t&lt; is_detected&lt; value_type_t, CompatibleArrayType &gt;::value and is_detected&lt; iterator_t, CompatibleArrayType &gt;::value and not is_iterator_traits&lt; iterator_traits&lt; CompatibleArrayType &gt; &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">nlohmann::detail::is_compatible_integer_type&lt; RealIntegerType, CompatibleNumberIntegerType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655">nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">nlohmann::detail::is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl">nlohmann::detail::is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl_3_01_basic_json_type_00_01_compatfbe9a153c4ecce445c98bbdd2d65f605">nlohmann::detail::is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, CompatibleObjectType &gt;::value and is_detected&lt; key_type_t, CompatibleObjectType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">nlohmann::detail::is_compatible_string_type&lt; BasicJsonType, ConstructibleStringType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type__impl">nlohmann::detail::is_compatible_string_type_impl&lt; BasicJsonType, CompatibleStringType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type__impl_3_01_basic_json_type_00_01_compat6590904cab40fc73f430e4c7518179a2">nlohmann::detail::is_compatible_string_type_impl&lt; BasicJsonType, CompatibleStringType, enable_if_t&lt; is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, CompatibleStringType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">nlohmann::detail::is_compatible_type&lt; BasicJsonType, CompatibleType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl">nlohmann::detail::is_compatible_type_impl&lt; BasicJsonType, CompatibleType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl_3_01_basic_json_type_00_01_compatible_typ632bee7ec037fc0233f1bbe9dd7d8874">nlohmann::detail::is_compatible_type_impl&lt; BasicJsonType, CompatibleType, enable_if_t&lt; is_complete_type&lt; CompatibleType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__complete__type">nlohmann::detail::is_complete_type&lt; T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__complete__type_3_01_t_00_01decltype_07void_07sizeof_07_t_08_08_08_4">nlohmann::detail::is_complete_type&lt; T, decltype(void(sizeof(T)))&gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type">nlohmann::detail::is_constructible_array_type&lt; BasicJsonType, ConstructibleArrayType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons437c79c936c626a4ffcf289ee9218c26">nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; not std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value and std::is_default_constructible&lt; ConstructibleArrayType &gt;::value and(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value or std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value) andis_detected&lt; value_type_t, ConstructibleArrayType &gt;::value andis_detected&lt; iterator_t, ConstructibleArrayType &gt;::value andis_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons8cf88e17d5eaa68665a8fb4b97604b0e">nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type">nlohmann::detail::is_constructible_object_type&lt; BasicJsonType, ConstructibleObjectType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl">nlohmann::detail::is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl_3_01_basic_json_type_00_01_con6e3270de8050717120afcafe87648413">nlohmann::detail::is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, ConstructibleObjectType &gt;::value and is_detected&lt; key_type_t, ConstructibleObjectType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type">nlohmann::detail::is_constructible_string_type&lt; BasicJsonType, ConstructibleStringType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type__impl">nlohmann::detail::is_constructible_string_type_impl&lt; BasicJsonType, ConstructibleStringType, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type__impl_3_01_basic_json_type_00_01_con83e8ebfe9593f851a60fdb8360df1512">nlohmann::detail::is_constructible_string_type_impl&lt; BasicJsonType, ConstructibleStringType, enable_if_t&lt; is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, ConstructibleStringType &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple">nlohmann::detail::is_constructible_tuple&lt; T1, T2 &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple_3_01_t1_00_01std_1_1tuple_3_01_args_8_8_8_01_4_01_4">nlohmann::detail::is_constructible_tuple&lt; T1, std::tuple&lt; Args... &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">nlohmann::detail::is_iterator_traits&lt; T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits_3_01iterator__traits_3_01_t_01_4_01_4">nlohmann::detail::is_iterator_traits&lt; iterator_traits&lt; T &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__json__ref">nlohmann::detail::is_json_ref&lt; typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__json__ref_3_01json__ref_3_01_t_01_4_01_4">nlohmann::detail::is_json_ref&lt; json_ref&lt; T &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__sax">nlohmann::detail::is_sax&lt; SAX, BasicJsonType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1is__sax__static__asserts">nlohmann::detail::is_sax_static_asserts&lt; SAX, BasicJsonType &gt;</link><link linkend="_classnlohmann_1_1detail_1_1iter__impl">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</link>
<para>Template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class </para>
<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy">nlohmann::detail::iteration_proxy&lt; IteratorType &gt;</link>
<para>Proxy class for the items() function </para>
<link linkend="_classnlohmann_1_1detail_1_1iteration__proxy__value">nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1iterator__traits">nlohmann::detail::iterator_traits&lt; T, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea">nlohmann::detail::iterator_traits&lt; T *, enable_if_t&lt; std::is_object&lt; T &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_00_01enable__if__t_3_01_9std_1_1is__pointer_3_01_t_01_4_1_1value_01_4_01_4">nlohmann::detail::iterator_traits&lt; T, enable_if_t&lt; !std::is_pointer&lt; T &gt;::value &gt; &gt;</link><link linkend="_structnlohmann_1_1detail_1_1iterator__types">nlohmann::detail::iterator_types&lt; It, typename &gt;</link><link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361">nlohmann::detail::iterator_types&lt; It, void_t&lt; typename It::difference_type, typename It::value_type, typename It::pointer, typename It::reference, typename It::iterator_category &gt; &gt;</link><link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer&lt; BasicJsonType &gt;</link>
<para>JSON Pointer </para>
<link linkend="_classnlohmann_1_1detail_1_1json__ref">nlohmann::detail::json_ref&lt; BasicJsonType &gt;</link><link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">nlohmann::detail::json_reverse_iterator&lt; Base &gt;</link>
<para>Template for a reverse iterator class </para>
<link linkend="_structnlohmann_1_1json__sax">nlohmann::json_sax&lt; BasicJsonType &gt;</link>
<para>SAX interface </para>
<link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor">nlohmann::detail::json_sax_acceptor&lt; BasicJsonType &gt;</link><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">nlohmann::detail::json_sax_dom_callback_parser&lt; BasicJsonType &gt;</link><link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">nlohmann::detail::json_sax_dom_parser&lt; BasicJsonType &gt;</link>
<para>SAX implementation to create a JSON value from SAX events </para>
<link linkend="_unionnlohmann_1_1basic__json_1_1json__value">nlohmann::basic_json::json_value</link>
<para>JSON value </para>
<link linkend="_structstd_1_1less_3_1_1nlohmann_1_1detail_1_1value__t_01_4">std::less&lt;::nlohmann::detail::value_t &gt;</link>
<para>Specialization for std::less&lt;value_t&gt; </para>
<link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer&lt; BasicJsonType &gt;</link>
<para>Lexical analysis </para>
<link linkend="_classlinked_list">linkedList</link>
<para>This class handles the linked list data structure </para>
<link linkend="_class_main_window">MainWindow</link>
<para>This class handles all GUI components for the main window </para>
<link linkend="_structnlohmann_1_1detail_1_1make__index__sequence">nlohmann::detail::make_index_sequence&lt; N &gt;</link><link linkend="_structnlohmann_1_1detail_1_1make__index__sequence_3_010_01_4">nlohmann::detail::make_index_sequence&lt; 0 &gt;</link><link linkend="_structnlohmann_1_1detail_1_1make__index__sequence_3_011_01_4">nlohmann::detail::make_index_sequence&lt; 1 &gt;</link><link linkend="_structnlohmann_1_1detail_1_1make__void">nlohmann::detail::make_void&lt; Ts &gt;</link><link linkend="_structnlohmann_1_1detail_1_1merge__and__renumber">nlohmann::detail::merge_and_renumber&lt; Sequence1, Sequence2 &gt;</link><link linkend="_structnlohmann_1_1detail_1_1merge__and__renumber_3_01index__sequence_3_01_i1_8_8_8_01_4_00_01indf5ec8c9c7b5107e4b381e3ca4c1be2ca">nlohmann::detail::merge_and_renumber&lt; index_sequence&lt; I1... &gt;, index_sequence&lt; I2... &gt; &gt;</link><link linkend="_structnode">node</link><link linkend="_structnlohmann_1_1detail_1_1nonesuch">nlohmann::detail::nonesuch</link><link linkend="_classnlohmann_1_1detail_1_1other__error">nlohmann::detail::other_error</link>
<para>Exception indicating other library errors </para>
<link linkend="_classnlohmann_1_1detail_1_1out__of__range">nlohmann::detail::out_of_range</link>
<para>Exception indicating access out of the defined range </para>
<link linkend="_classnlohmann_1_1detail_1_1output__adapter">nlohmann::detail::output_adapter&lt; CharType, StringType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1output__adapter__protocol">nlohmann::detail::output_adapter_protocol&lt; CharType &gt;</link>
<para>Abstract output adapter interface </para>
<link linkend="_classnlohmann_1_1detail_1_1output__stream__adapter">nlohmann::detail::output_stream_adapter&lt; CharType &gt;</link>
<para>Output adapter for output streams </para>
<link linkend="_classnlohmann_1_1detail_1_1output__string__adapter">nlohmann::detail::output_string_adapter&lt; CharType, StringType &gt;</link>
<para>Output adapter for basic_string </para>
<link linkend="_classnlohmann_1_1detail_1_1output__vector__adapter">nlohmann::detail::output_vector_adapter&lt; CharType &gt;</link>
<para>Output adapter for byte vectors </para>
<link linkend="_classnlohmann_1_1detail_1_1parse__error">nlohmann::detail::parse_error</link>
<para>Exception indicating a parse error </para>
<link linkend="_classnlohmann_1_1detail_1_1parser">nlohmann::detail::parser&lt; BasicJsonType &gt;</link>
<para>Syntax analysis </para>
<link linkend="_structnlohmann_1_1detail_1_1position__t">nlohmann::detail::position_t</link>
<para>Struct to capture the start position of the current token </para>
<link linkend="_classnlohmann_1_1detail_1_1primitive__iterator__t">nlohmann::detail::primitive_iterator_t</link><link linkend="_structnlohmann_1_1detail_1_1priority__tag">nlohmann::detail::priority_tag&lt; N &gt;</link><link linkend="_structnlohmann_1_1detail_1_1priority__tag_3_010_01_4">nlohmann::detail::priority_tag&lt; 0 &gt;</link><link linkend="_class_rectangle">Rectangle</link><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer&lt; BasicJsonType &gt;</link><link linkend="_class_shape">Shape</link><link linkend="_structnlohmann_1_1detail_1_1static__const">nlohmann::detail::static_const&lt; T &gt;</link><link linkend="_structnlohmann_1_1detail_1_1to__json__fn">nlohmann::detail::to_json_fn</link><link linkend="_classstd_1_1tuple__element_3_01_n_00_01_1_1nlohmann_1_1detail_1_1iteration__proxy__value_3_01_iterator_type_01_4_01_4">std::tuple_element&lt; N, ::nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &gt;</link><link linkend="_classstd_1_1tuple__size_3_1_1nlohmann_1_1detail_1_1iteration__proxy__value_3_01_iterator_type_01_4_01_4">std::tuple_size&lt;::nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &gt;</link><link linkend="_classnlohmann_1_1detail_1_1type__error">nlohmann::detail::type_error</link>
<para>Exception indicating executing a member function with a wrong type </para>
<link linkend="_classnlohmann_1_1detail_1_1wide__string__input__adapter">nlohmann::detail::wide_string_input_adapter&lt; WideStringType &gt;</link><link linkend="_structnlohmann_1_1detail_1_1wide__string__input__helper">nlohmann::detail::wide_string_input_helper&lt; WideStringType, T &gt;</link><link linkend="_structnlohmann_1_1detail_1_1wide__string__input__helper_3_01_wide_string_type_00_012_01_4">nlohmann::detail::wide_string_input_helper&lt; WideStringType, 2 &gt;</link></section>
