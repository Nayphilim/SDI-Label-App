<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1serializer">
<title>nlohmann::detail::serializer&lt; BasicJsonType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ac010525281d97867ee842da37294fe83">serializer</link> (<link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">output_adapter_t</link>&lt; char &gt; s, const char ichar, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler_=<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link>)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31">serializer</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a5f14c33012477b9f9876dc54d97009a0">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1a28081304e70cca6b3042c101ee5c498c">serializer</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;&amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer_1acaafe3436ee5fb74777eb4132a88c513">operator=</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;&amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1aa6c62b51cbebb185307df851dc0167f0">~serializer</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1ab61936f6da92873dd8f33c37a5fd3b6b">dump</link> (const BasicJsonType &amp;val, const bool pretty_print, const bool ensure_ascii, const unsigned int indent_step, const unsigned int current_indent=0, const bool serialize_binary=false)</para>

<para>internal implementation of the serialization function </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> = typename BasicJsonType::string_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> = typename BasicJsonType::number_float_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198">number_integer_t</link> = typename BasicJsonType::number_integer_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> = typename BasicJsonType::number_unsigned_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1serializer_1adaf905282c97d743c804692cd1afe83e">binary_t</link> = typename BasicJsonType::binary_t</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1ac1f8d1165b44149bd8be397dce68ea05">dump_escaped</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> &amp;s, const bool ensure_ascii)</para>

<para>dump escaped string </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_classnlohmann_1_1detail_1_1serializer_1a10692e98ea1f5a64de1d0b8e0e724b99">count_digits</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> x) noexcept</para>

<para>count digits </para>
</listitem>
            <listitem><para>template&lt;typename NumberType , detail::enable_if_t&lt; std::is_same&lt; NumberType, number_unsigned_t &gt;::value or std::is_same&lt; NumberType, number_integer_t &gt;::value or std::is_same&lt; NumberType, typename binary_t::value_type &gt;::value, int &gt;  = 0&gt; </para><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a944f6dea8dbe2961da145d2f62fa2c2f">dump_integer</link> (NumberType x)</para>

<para>dump an integer </para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a6d652a3bfa581cf1cd7790d6d11ea52f">dump_float</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x)</para>

<para>dump a floating-point number </para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a24b0fe45dc774441237bde198a133d8a">dump_float</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x, std::true_type)</para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a331dad892fc00313f928fdaa6bc8f849">dump_float</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x, std::false_type)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a45bcb8ea41e4db5461e979d4b1d5e5e7">remove_sign</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> x)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1aecc9c3f809a94a07010ea01d9c5a0c42">remove_sign</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198">number_integer_t</link> x) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>static std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1abdcc4fd1dc5d3afb6c0817e4c89b1242">decode</link> (std::uint8_t &amp;state, std::uint32_t &amp;codep, const std::uint8_t byte) noexcept</para>

<para>check whether a string is UTF-8 encoded </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">output_adapter_t</link>&lt; char &gt; <link linkend="_classnlohmann_1_1detail_1_1serializer_1acf3c88660d3cbc65fc71c4d84f2a9f59">o</link> = nullptr</para>

<para>the output of the serializer </para>
</listitem>
            <listitem><para>std::array&lt; char, 64 &gt; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link> {{}}</para>

<para>a (hopefully) large enough character buffer </para>
</listitem>
            <listitem><para>const std::lconv * <link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link> = nullptr</para>

<para>the locale </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link> = &apos;\0&apos;</para>

<para>the locale&apos;s thousand separator character </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link> = &apos;\0&apos;</para>

<para>the locale&apos;s decimal point character </para>
</listitem>
            <listitem><para>std::array&lt; char, 512 &gt; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link> {{}}</para>

<para>string buffer </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b">indent_char</link></para>

<para>the indentation character </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link></para>

<para>the indentation string </para>
</listitem>
            <listitem><para>const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link></para>

<para>error_handler how to react on decoding errors </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a2311a8c756c4a119aa82cd55301d13bc">UTF8_ACCEPT</link> = 0</para>
</listitem>
            <listitem><para>static constexpr std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a833bd5805e4380549f4e21c304820d6d">UTF8_REJECT</link> = 1</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BasicJsonType&gt;
class nlohmann::detail::serializer&lt; BasicJsonType &gt;</title></simplesect>

<para>
Definition at line 14675 of file json.hpp.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1adaf905282c97d743c804692cd1afe83e"/>    <section>
    <title>binary_t</title>
<indexterm><primary>binary_t</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>binary_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer_1adaf905282c97d743c804692cd1afe83e">binary_t</link> =  typename BasicJsonType::binary_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14681 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030"/>    <section>
    <title>number_float_t</title>
<indexterm><primary>number_float_t</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>number_float_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> =  typename BasicJsonType::number_float_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14678 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198"/>    <section>
    <title>number_integer_t</title>
<indexterm><primary>number_integer_t</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>number_integer_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198">number_integer_t</link> =  typename BasicJsonType::number_integer_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14679 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391"/>    <section>
    <title>number_unsigned_t</title>
<indexterm><primary>number_unsigned_t</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>number_unsigned_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> =  typename BasicJsonType::number_unsigned_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14680 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba"/>    <section>
    <title>string_t</title>
<indexterm><primary>string_t</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>string_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> =  typename BasicJsonType::string_t<computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14677 of file json.hpp.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ac010525281d97867ee842da37294fe83"/>    <section>
    <title>serializer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> (<link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">output_adapter_t</link>&lt; char &gt; s, const char ichar, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler_ = <computeroutput><link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>s</entry>
                                <entry>
<para>output stream to serialize to </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ichar</entry>
                                <entry>
<para>indentation character to use </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>error_handler_</entry>
                                <entry>
<para>how to react on decoding errors </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 14691 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31"/>    <section>
    <title>serializer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para>    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a28081304e70cca6b3042c101ee5c498c"/>    <section>
    <title>serializer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para>    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1aa6c62b51cbebb185307df851dc0167f0"/>    <section>
    <title>~serializer()</title>
<indexterm><primary>~serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>~serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::~<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a10692e98ea1f5a64de1d0b8e0e724b99"/>    <section>
    <title>count_digits()</title>
<indexterm><primary>count_digits</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>count_digits</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>unsigned int <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::count_digits (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> x)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>count digits </para>
</para>

<para>Count the number of decimal (base 10) digits for an input unsigned integer.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>x</entry>
                                <entry>
<para>unsigned integer number to count its digits </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>number of decimal digits </para>
</formalpara>
</para>
<para>
Definition at line 15243 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1abdcc4fd1dc5d3afb6c0817e4c89b1242"/>    <section>
    <title>decode()</title>
<indexterm><primary>decode</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>decode</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>static std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::decode (std::uint8_t &amp; state, std::uint32_t &amp; codep, const std::uint8_t byte)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>check whether a string is UTF-8 encoded </para>
</para>

<para>The function checks each byte of a string whether it is UTF-8 encoded. The result of the check is stored in the <emphasis>state</emphasis> parameter. The function must be called initially with state 0 (accept). State 1 means the string must be rejected, because the current byte is not allowed. If the string is completely processed, but the state is non-zero, the string ended prematurely; that is, the last byte indicated more bytes should have followed.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>state</entry>
                                <entry>
<para>the state of the decoding </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>codep</entry>
                                <entry>
<para>codepoint (valid only if resulting state is UTF8_ACCEPT) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>byte</entry>
                                <entry>
<para>next byte to decode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>new state</para>
</formalpara>
<note><title>Note</title>

<para>The function has been edited: a std::array is used.</para>
</note>
<formalpara><title>Copyright</title>

<para>Copyright (c) 2008-2009 Bjoern Hoehrmann <link xlink:href="mailto:bjoern@hoehrmann.de">bjoern@hoehrmann.de</link> </para>
</formalpara>
<formalpara><title>See also</title>

<para><link xlink:href="http://bjoern.hoehrmann.de/utf-8/decoder/dfa/">http://bjoern.hoehrmann.de/utf-8/decoder/dfa/</link> </para>
</formalpara>
</para>
<para>
Definition at line 15468 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ab61936f6da92873dd8f33c37a5fd3b6b"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump (const BasicJsonType &amp; val, const bool pretty_print, const bool ensure_ascii, const unsigned int indent_step, const unsigned int current_indent = <computeroutput>0</computeroutput>
, const bool serialize_binary = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>internal implementation of the serialization function </para>
</para>

<para>This function is called by the public member function dump and organizes the serialization internally. The indentation level is propagated as additional parameter. In case of arrays and objects, the function is called recursively.</para>

<para><itemizedlist>
<listitem>
<para>strings and object keys are escaped using <computeroutput>escape_string()</computeroutput></para>
</listitem><listitem>
<para>integer numbers are converted implicitly via <computeroutput>operator&lt;&lt;</computeroutput></para>
</listitem><listitem>
<para>floating-point numbers are converted to a string using <computeroutput>&quot;%g&quot;</computeroutput> format</para>
</listitem><listitem>
<para>if specified to, binary values are output using the syntax <computeroutput>b[]</computeroutput>, otherwise an exception is thrown</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>val</entry>
                                <entry>
<para>value to serialize </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pretty_print</entry>
                                <entry>
<para>whether the output shall be pretty-printed </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>indent_step</entry>
                                <entry>
<para>the indent level </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>current_indent</entry>
                                <entry>
<para>the current indent level (only used internally) </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>serialize_binary</entry>
                                <entry>
<para>whether the output shall include non-standard binary output </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 14728 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ac1f8d1165b44149bd8be397dce68ea05"/>    <section>
    <title>dump_escaped()</title>
<indexterm><primary>dump_escaped</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump_escaped</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump_escaped (const <link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> &amp; s, const bool ensure_ascii)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>dump escaped string </para>
</para>

<para>Escape a string by replacing certain special characters by a sequence of an escape character (backslash) and another character and other control characters by a sequence of &quot;\u&quot; followed by a four-digit hex representation. The escaped string is written to output stream <emphasis>o</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>s</entry>
                                <entry>
<para>the string to escape </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ensure_ascii</entry>
                                <entry>
<para>whether to escape non-ASCII characters with \uXXXX sequences</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the length of string <emphasis>s</emphasis>. </para>
<para>
Definition at line 14987 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a6d652a3bfa581cf1cd7790d6d11ea52f"/>    <section>
    <title>dump_float()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>dump_float</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump_float</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump_float (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>dump a floating-point number </para>
</para>

<para>Dump a given floating-point number to output stream <emphasis>o</emphasis>. Works internally with <emphasis>number_buffer</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>x</entry>
                                <entry>
<para>floating-point number to dump </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 15369 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a331dad892fc00313f928fdaa6bc8f849"/>    <section>
    <title>dump_float()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>dump_float</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump_float</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump_float (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x, std::false_type )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15398 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a24b0fe45dc774441237bde198a133d8a"/>    <section>
    <title>dump_float()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>dump_float</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump_float</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump_float (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a460c6794fbabbb2ae83380e987a6c030">number_float_t</link> x, std::true_type )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15390 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a944f6dea8dbe2961da145d2f62fa2c2f"/>    <section>
    <title>dump_integer()</title>
<indexterm><primary>dump_integer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump_integer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><computeroutput>template&lt;typename NumberType , detail::enable_if_t&lt; std::is_same&lt; NumberType, number_unsigned_t &gt;::value or std::is_same&lt; NumberType, number_integer_t &gt;::value or std::is_same&lt; NumberType, typename binary_t::value_type &gt;::value, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump_integer (NumberType x)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>dump an integer </para>
</para>

<para>Dump a given integer to output stream <emphasis>o</emphasis>. Works internally with <emphasis>number_buffer</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>x</entry>
                                <entry>
<para>integer number (signed or unsigned) to dump </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>NumberType</entry>
                                <entry>
<para>either <emphasis>number_integer_t</emphasis> or <emphasis>number_unsigned_t</emphasis> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 15283 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a5f14c33012477b9f9876dc54d97009a0"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para>    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1acaafe3436ee5fb74777eb4132a88c513"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&amp; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::operator= (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para>    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1aecc9c3f809a94a07010ea01d9c5a0c42"/>    <section>
    <title>remove_sign()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>remove_sign</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>remove_sign</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::remove_sign (<link linkend="_classnlohmann_1_1detail_1_1serializer_1ae7b1df1c70bdec1371f297567726a198">number_integer_t</link> x)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Definition at line 15522 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a45bcb8ea41e4db5461e979d4b1d5e5e7"/>    <section>
    <title>remove_sign()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>remove_sign</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>remove_sign</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::remove_sign (<link linkend="_classnlohmann_1_1detail_1_1serializer_1a16c7b7a726a38ff0c06dce7ba7968391">number_unsigned_t</link> x)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 15507 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a"/>    <section>
    <title>decimal_point</title>
<indexterm><primary>decimal_point</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>decimal_point</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::decimal_point = &apos;\0&apos;<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the locale&apos;s decimal point character </para>
</para>
<para>
Definition at line 15540 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1"/>    <section>
    <title>error_handler</title>
<indexterm><primary>error_handler</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>error_handler</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::error_handler<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>error_handler how to react on decoding errors </para>
</para>
<para>
Definition at line 15551 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b"/>    <section>
    <title>indent_char</title>
<indexterm><primary>indent_char</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>indent_char</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::indent_char<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the indentation character </para>
</para>
<para>
Definition at line 15546 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6"/>    <section>
    <title>indent_string</title>
<indexterm><primary>indent_string</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>indent_string</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer_1ad08aa54fac1dd0a453320c54137d45ba">string_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::indent_string<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the indentation string </para>
</para>
<para>
Definition at line 15548 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589"/>    <section>
    <title>loc</title>
<indexterm><primary>loc</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>loc</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const std::lconv* <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::loc = nullptr<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the locale </para>
</para>
<para>
Definition at line 15536 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1"/>    <section>
    <title>number_buffer</title>
<indexterm><primary>number_buffer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>number_buffer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::array&lt;char, 64&gt; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::number_buffer {{}}<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>a (hopefully) large enough character buffer </para>
</para>
<para>
Definition at line 15533 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1acf3c88660d3cbc65fc71c4d84f2a9f59"/>    <section>
    <title>o</title>
<indexterm><primary>o</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>o</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556">output_adapter_t</link>&lt;char&gt; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::o = nullptr<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the output of the serializer </para>
</para>
<para>
Definition at line 15530 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f"/>    <section>
    <title>string_buffer</title>
<indexterm><primary>string_buffer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>string_buffer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::array&lt;char, 512&gt; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::string_buffer {{}}<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>string buffer </para>
</para>
<para>
Definition at line 15543 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14"/>    <section>
    <title>thousands_sep</title>
<indexterm><primary>thousands_sep</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>thousands_sep</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::thousands_sep = &apos;\0&apos;<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>the locale&apos;s thousand separator character </para>
</para>
<para>
Definition at line 15538 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a2311a8c756c4a119aa82cd55301d13bc"/>    <section>
    <title>UTF8_ACCEPT</title>
<indexterm><primary>UTF8_ACCEPT</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>UTF8_ACCEPT</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>constexpr std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::UTF8_ACCEPT = 0<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14682 of file json.hpp.</para>
    </section><anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a833bd5805e4380549f4e21c304820d6d"/>    <section>
    <title>UTF8_REJECT</title>
<indexterm><primary>UTF8_REJECT</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>UTF8_REJECT</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>constexpr std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::UTF8_REJECT = 1<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line 14683 of file json.hpp.</para>
</section>
</section>
</section>
