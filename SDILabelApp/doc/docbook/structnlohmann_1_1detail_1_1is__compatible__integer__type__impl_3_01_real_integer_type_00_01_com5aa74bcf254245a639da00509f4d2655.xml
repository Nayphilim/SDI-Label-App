<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655">
<title>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a0e9f2586c4de25750563770c9388ab9f">RealLimits</link> = std::numeric_limits&lt; RealIntegerType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a002983b5c7c0f72b89d2151a6b39627d">CompatibleLimits</link> = std::numeric_limits&lt; CompatibleNumberIntegerType &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr auto <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename RealIntegerType, typename CompatibleNumberIntegerType&gt;
struct nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</title></simplesect>

<para>
Definition at line 3091 of file json.hpp.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a002983b5c7c0f72b89d2151a6b39627d"/>    <section>
    <title>CompatibleLimits</title>
<indexterm><primary>CompatibleLimits</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>CompatibleLimits</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> and std::is_integral&lt; CompatibleNumberIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> &gt; &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a002983b5c7c0f72b89d2151a6b39627d">CompatibleLimits</link> =  std::numeric_limits&lt;CompatibleNumberIntegerType&gt;</computeroutput></para><para>
Definition at line 3099 of file json.hpp.</para>
    </section><anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a0e9f2586c4de25750563770c9388ab9f"/>    <section>
    <title>RealLimits</title>
<indexterm><primary>RealLimits</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>RealLimits</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> and std::is_integral&lt; CompatibleNumberIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">value</link> &gt; &gt;::<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a0e9f2586c4de25750563770c9388ab9f">RealLimits</link> =  std::numeric_limits&lt;RealIntegerType&gt;</computeroutput></para><para>
Definition at line 3098 of file json.hpp.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b"/>    <section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;::value and std::is_integral&lt; CompatibleNumberIntegerType &gt;::value and not std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;::value<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_constructible&lt;RealIntegerType,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleNumberIntegerType&gt;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_com5aa74bcf254245a639da00509f4d2655_1a478242daac7a70e28c749bfec00d1c1b">::value</link>&#32;and
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleLimits::is_integer&#32;and
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RealLimits::is_signed&#32;==&#32;CompatibleLimits::is_signed
</programlisting><para>
Definition at line 3101 of file json.hpp.</para>
</section>
</section>
</section>
